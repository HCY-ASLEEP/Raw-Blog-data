{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"source/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg","path":"pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg","path":"pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg","path":"pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg","path":"pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg","path":"pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg","path":"pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg","path":"pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg","path":"pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg","path":"pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg","path":"pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg","path":"pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg","path":"pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg","path":"pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg","path":"pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg","path":"pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg","path":"pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg","path":"pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg","path":"pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-b51be8468af5b30faeb9d079cc8c27b7_r.jpg","path":"pictures/MySQL-闲谈/v2-b51be8468af5b30faeb9d079cc8c27b7_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg","path":"pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg","path":"pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg","path":"pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg","path":"pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg","modified":0,"renderable":0},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg","path":"pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/2022.10.23.14.48.30.png","path":"pictures/github-pages-hexo/2022.10.23.14.48.30.png","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png","path":"pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png","path":"pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png","path":"pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png","path":"pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png","path":"pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg","path":"pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png","path":"pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png","path":"pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.14.49.png","path":"pictures/hexo-基本美化/2022.10.23.16.14.49.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.17.17.png","path":"pictures/hexo-基本美化/2022.10.23.16.17.17.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.19.21.png","path":"pictures/hexo-基本美化/2022.10.23.16.19.21.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.22.22.png","path":"pictures/hexo-基本美化/2022.10.23.16.22.22.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.25.30.png","path":"pictures/hexo-基本美化/2022.10.23.16.25.30.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.27.38.png","path":"pictures/hexo-基本美化/2022.10.23.16.27.38.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.29.42.png","path":"pictures/hexo-基本美化/2022.10.23.16.29.42.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.32.39.png","path":"pictures/hexo-基本美化/2022.10.23.16.32.39.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.33.18.png","path":"pictures/hexo-基本美化/2022.10.23.16.33.18.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.35.28.png","path":"pictures/hexo-基本美化/2022.10.23.16.35.28.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.36.27.png","path":"pictures/hexo-基本美化/2022.10.23.16.36.27.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.38.27.png","path":"pictures/hexo-基本美化/2022.10.23.16.38.27.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.41.32.png","path":"pictures/hexo-基本美化/2022.10.23.16.41.32.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-文档分类-图片存储/20191220164252492.png","path":"pictures/hexo-文档分类-图片存储/20191220164252492.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.19.31.09.png","path":"pictures/hexo-文档分类-图片存储/2022.10.23.19.31.09.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.19.50.12.png","path":"pictures/hexo-文档分类-图片存储/2022.10.23.19.50.12.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.19.55.54.png","path":"pictures/hexo-文档分类-图片存储/2022.10.23.19.55.54.png","modified":0,"renderable":0},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.20.00.11.png","path":"pictures/hexo-文档分类-图片存储/2022.10.23.20.00.11.png","modified":0,"renderable":0},{"_id":"source/pictures/markdown-对话框/2022.11.05.21.09.58.png","path":"pictures/markdown-对话框/2022.11.05.21.09.58.png","modified":0,"renderable":0},{"_id":"source/pictures/markdown-对话框/2022.11.07.17.19.38.png","path":"pictures/markdown-对话框/2022.11.07.17.19.38.png","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/key_components.svg","path":"pictures/maro-distributed-toolkit/key_components.svg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/maro_overview.svg","path":"pictures/maro-distributed-toolkit/maro_overview.svg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/overview.svg","path":"pictures/maro-distributed-toolkit/overview.svg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/proxy.svg","path":"pictures/maro-distributed-toolkit/proxy.svg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/register_table.register.svg","path":"pictures/maro-distributed-toolkit/register_table.register.svg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/register_table.trigger.svg","path":"pictures/maro-distributed-toolkit/register_table.trigger.svg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg","path":"pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp","path":"pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg","path":"pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_720w.webp","path":"pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_720w.webp","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg","path":"pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png","path":"pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg","path":"pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp","path":"pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg","path":"pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg","path":"pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg","path":"pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg","path":"pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg","path":"pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg","path":"pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp","path":"pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp","modified":0,"renderable":0},{"_id":"source/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg","path":"pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/maro-vm-调度/2022.10.27.20.00.43.png","path":"pictures/maro-vm-调度/2022.10.27.20.00.43.png","modified":0,"renderable":0},{"_id":"source/pictures/maro-vm-调度/2022.10.28.15.14.52.png","path":"pictures/maro-vm-调度/2022.10.28.15.14.52.png","modified":0,"renderable":0},{"_id":"source/pictures/maro-vm-调度/vm.energy_curve.svg","path":"pictures/maro-vm-调度/vm.energy_curve.svg","modified":0,"renderable":0},{"_id":"source/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png","path":"pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png","modified":0,"renderable":0},{"_id":"source/pictures/初识MARO/cim.container_flow.svg","path":"pictures/初识MARO/cim.container_flow.svg","modified":0,"renderable":0},{"_id":"source/pictures/初识MARO/cim.global_trade.svg","path":"pictures/初识MARO/cim.global_trade.svg","modified":0,"renderable":0},{"_id":"source/pictures/初识MARO/cim.toys.svg","path":"pictures/初识MARO/cim.toys.svg","modified":0,"renderable":0},{"_id":"source/pictures/初识MARO/maro_overview.svg","path":"pictures/初识MARO/maro_overview.svg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg","path":"pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg","path":"pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg","path":"pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg","path":"pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg","path":"pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg","path":"pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg","modified":0,"renderable":0},{"_id":"source/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png","path":"pictures/redis-基础-闲聊/2022.11.07.17.43.04.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux 命令行格式化/2022.11.17.16.36.19.png","path":"pictures/Linux 命令行格式化/2022.11.17.16.36.19.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux 命令行格式化/2022.11.17.16.39.41.png","path":"pictures/Linux 命令行格式化/2022.11.17.16.39.41.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.34.12.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.34.12.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png","modified":0,"renderable":0},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png","path":"pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png","modified":0,"renderable":0},{"_id":"source/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png","path":"pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png","modified":0,"renderable":0},{"_id":"source/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png","path":"pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Github-Pages+Hexo.md","hash":"3155bda85579dd2d97c68b72a805534652152ba1","modified":1669120879386},{"_id":"source/_posts/Hexo-加强-Next-Theme-美化.md","hash":"0a8eec895b1bd51d75ef8ec46a6fe3afc3f9f6d0","modified":1669120985145},{"_id":"source/_posts/Hexo-基本美化.md","hash":"3240392efefb4914746d065ab23ebfefe2ca9194","modified":1666517264865},{"_id":"source/_posts/Hexo-文档分类-图片存储.md","hash":"166cb9178e87686694f3fd319357767abcd84df5","modified":1669121143880},{"_id":"source/_posts/Markdown-对话框笔记.md","hash":"0350afefcc1e551a140a309f4e62c59e41627d52","modified":1669121144008},{"_id":"source/_posts/MySQL-闲谈-1.md","hash":"be69ada4263b3c15c34e5b8bde1bf291174be1c0","modified":1667822290659},{"_id":"source/_posts/MySQL-闲谈-2.md","hash":"8e7c1b09bb3f03145878769abeee1336f7fc77df","modified":1667811254319},{"_id":"source/_posts/The-First-Blog.md","hash":"444ca34af0aa4804e045297b705f6f29c598e910","modified":1666444618706},{"_id":"source/_posts/MySQL-闲谈-3.md","hash":"9c4ed15306d9652ff3c03cb53d6d9f08dbe33ddd","modified":1667811254475},{"_id":"source/_posts/TCP-Shakes-and-Waves-hands-闲聊.md","hash":"647a72c1070ef3ec7ce836d547053aaf166efcb6","modified":1667812964935},{"_id":"source/_posts/Linux-查看硬盘空间.md","hash":"20c41505f31d2c373cf5e04dc17bc413007eebf8","modified":1667634486152},{"_id":"source/_posts/MARO-VM-调度.md","hash":"1a26413337b4c44bc4e4f3c69b7cd01d7747fc84","modified":1669204917934},{"_id":"source/_posts/MARO-Distibuted-toolkit.md","hash":"ab60d08bad143a91b2de116dfd5807d01e47a79f","modified":1669204951026},{"_id":"source/_posts/debian-fcitx-中文输入法.md","hash":"6eb2f488b229cc54609e7aa229eca073ec1c7a74","modified":1667029266190},{"_id":"source/_posts/VIM-配置.md","hash":"86ac9703f4d4bb25591c4363f1eb337b7d50faaa","modified":1667027996352},{"_id":"source/_posts/debian-bashrc.md","hash":"e1616a7a27a88a3bfed5fe8c9a610ba8d00abd07","modified":1667029448658},{"_id":"source/_posts/VLC-Linux-安装在自定义目录.md","hash":"791e7501ee1d98dcbaf2e5ed0255158e7cc39799","modified":1667633865528},{"_id":"source/_posts/debian-gnome-default-browser.md","hash":"71a803f9aa4c8c445b7da56cb88af8d6caa5c424","modified":1667029290490},{"_id":"source/_posts/debian-nvidia.md","hash":"bb8d71b3a2f528c68f8ef2d2bc0eba859fae332e","modified":1667029311154},{"_id":"source/_posts/node-换源-阿里.md","hash":"7f08964bf94ee9d7166c9d5ffcaffed61bd6675c","modified":1667029648473},{"_id":"source/_posts/linux-bash-powerline-arrow.md","hash":"a19f15a358ea23fde750b8bacaecb63aecb457e9","modified":1667029431470},{"_id":"source/_posts/path.sh-gopath-alias.md","hash":"1447518215e484bc2f116f71ccb0cfc9cd7391e6","modified":1667029707700},{"_id":"source/_posts/linux-command-not-found-bash.md","hash":"d20b7a29ef6d42d47b407c49f7aa1e6caab49dab","modified":1667029508517},{"_id":"source/_posts/linux-debian-gnome-desktop-launch.md","hash":"d21caff82ee1397a8e2584f4643e01533b5eada8","modified":1667029563957},{"_id":"source/_posts/初识-MARO.md","hash":"a73feaab33192bbe008150616889b9030d0a99c4","modified":1669204539772},{"_id":"source/_posts/工作面试.md","hash":"1017b501d4bca4babd0be484fae95c0e6647f50d","modified":1669723182035},{"_id":"source/_posts/linux-debian-vscode-fonts-firacode.md","hash":"ea5a2a523b4dd6b66ba1e63f2a7a15b0d44c8c8f","modified":1667029612933},{"_id":"source/tags/index.md","hash":"37014f94e07549ee313b57cded12695dae943e51","modified":1666503496617},{"_id":"source/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg","hash":"c3db54781ea1d187d0cb78a8d001aec7b591be86","modified":1667717512971},{"_id":"source/_posts/vim-nvim-replace-批量查找替换.md","hash":"28dbf8c0efa593fd984e26cbf2d528b80a3bc656","modified":1667099241148},{"_id":"source/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg","hash":"4fc37f6290cb9d410992376fb196b3bbdd2ff01e","modified":1667721087495},{"_id":"source/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg","hash":"b5b20c111bd5b2b25a7759e256617d60bae02081","modified":1667719660348},{"_id":"source/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg","hash":"fa1998b222c669aa54d0fd7bd2b5922f389d079d","modified":1667718763295},{"_id":"source/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg","hash":"4df6435fbaedf7fc16e7fe5a5465f65bbf1f032a","modified":1667721207538},{"_id":"source/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg","hash":"f00ccc2a470bed48b0c2a077ba0952209745d085","modified":1667720425694},{"_id":"source/_posts/wayland-wemeet.md","hash":"bb7106fd8f127cfdbeb49a44b758cce832bd5147","modified":1667631261823},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg","hash":"6efa410ad1555461cf0bf4de33eb9bd7f2a0ad4b","modified":1667801090866},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg","hash":"e76ea560950abf0089419e15843cd4a1dc142ffc","modified":1667801653920},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg","hash":"d46a8e535577a8f64518995332b7f9cd44ee59fa","modified":1667801969915},{"_id":"source/pictures/MySQL-闲谈/v2-b51be8468af5b30faeb9d079cc8c27b7_r.jpg","hash":"45ed9fa25bca1c66845cf60e44ad4633999075c4","modified":1667719904352},{"_id":"source/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png","hash":"0554e5bfb9ab1ebf20c59f7873d0ee906c6dfadd","modified":1666509665442},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.17.17.png","hash":"91b7f05e1d750839cef5e6a0c3adcb8303337c4d","modified":1666513043042},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.19.21.png","hash":"38a1b75eb36b68f1adff146fb584e98391e328f5","modified":1666513172037},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.22.22.png","hash":"c46eec025b7d9ffac0eab732b81fc5ca58c64ec9","modified":1666513349221},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.29.42.png","hash":"5b6da52454cd3d315559d496c9dc2473b0923b89","modified":1666513791441},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.25.30.png","hash":"b1afb2c4d3b8b51fdb53ab65013a8253dc78df6a","modified":1666513536273},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.32.39.png","hash":"0e1555e013c4f92031382129512dfeeeb6369b80","modified":1666513964364},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.27.38.png","hash":"fbf2d785aa4fe1df44ccce9fea77ce6375c78fbd","modified":1666513665593},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.33.18.png","hash":"ea48e67bc63e67d7e1d2a5c8811bfddd355e4bbb","modified":1666514004788},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.36.27.png","hash":"685bf6ebf2bdd00abb8a62ad34e9963811e526f9","modified":1666514199500},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.38.27.png","hash":"9964bd3d7506844711c1af95880e5f5710d854ab","modified":1666514311792},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.19.50.12.png","hash":"c66ef07b7afce0110928a7ddb5b9fc400c987e96","modified":1666525816618},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.35.28.png","hash":"6d9f2604fd7581231717599a739ffccfce6d5c03","modified":1666514140316},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.19.55.54.png","hash":"5bfb170d9ebb4b5119d96e4578adbe100c30521f","modified":1666526160196},{"_id":"source/pictures/markdown-对话框/2022.11.05.21.09.58.png","hash":"6e087c5559accef1af81469bc62dcc8ed934bb7c","modified":1667653807290},{"_id":"source/pictures/markdown-对话框/2022.11.07.17.19.38.png","hash":"ac13892ee18fe8097fd0b3afebcf6b370cbb2423","modified":1667812789176},{"_id":"source/pictures/maro-distributed-toolkit/key_components.svg","hash":"43f2be94d84d7e712d76b0719b51f6e3ee12c42a","modified":1667560861029},{"_id":"source/pictures/maro-distributed-toolkit/maro_overview.svg","hash":"1de4616a1023908e84ecfe480127d8a763cb66a5","modified":1667559222491},{"_id":"source/pictures/maro-distributed-toolkit/overview.svg","hash":"1c0c3a089ed3622d8cabf0ac5f454876e5cf0179","modified":1667559421242},{"_id":"source/pictures/maro-distributed-toolkit/proxy.svg","hash":"bc60d1723f615bec08d1fab624cd2baa6ecc93b4","modified":1667561904457},{"_id":"source/pictures/maro-distributed-toolkit/register_table.register.svg","hash":"3b88eaf6109d0aff41ddc2a705187a5084ef60b9","modified":1667570626803},{"_id":"source/pictures/maro-distributed-toolkit/register_table.trigger.svg","hash":"6b161b234224abcbb5e94201608e614c3a51d205","modified":1667571638509},{"_id":"source/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg","hash":"60a95dcedd11edd6bb5d09535414e67cbabc6f63","modified":1667563887517},{"_id":"source/pictures/hexo-文档分类-图片存储/20191220164252492.png","hash":"ee43cde544033da23da1d35adb3c219e29b9c2bf","modified":1666526699574},{"_id":"source/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp","hash":"94609344f76f229b9c679894cd5442134594c8c6","modified":1667564290153},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.20.00.11.png","hash":"849f447cf80ea5b59d7c54e70c565343d3788cbe","modified":1666526417827},{"_id":"source/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg","hash":"4b57d14aba896b0a74ff7be43708fca2e96e1bc2","modified":1667563633506},{"_id":"source/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png","hash":"447d771da5811867792134dd3f79e340229d7f03","modified":1667563339159},{"_id":"source/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp","hash":"fdd97ccf3898da7d2f8daf1e02c04b84547350d0","modified":1667564155449},{"_id":"source/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg","hash":"45401e9f96ffde0bd2f712744d610d05486cf4e5","modified":1667563091112},{"_id":"source/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg","hash":"61c5ce7c875f217e64982f6d6e2a7106d0a8f8c5","modified":1667562915197},{"_id":"source/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp","hash":"9af182616ae47a2e92c0a64f2db467b198ee469f","modified":1667563774109},{"_id":"source/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg","hash":"152a2d86794897437d887ab579bef5a960428567","modified":1667564083793},{"_id":"source/pictures/maro-vm-调度/2022.10.28.15.14.52.png","hash":"b6c762d02986b8824b18d1b233be16f76b3afaea","modified":1666941299943},{"_id":"source/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png","hash":"46c338b727c3aad014392cb4c20a713eac3b9932","modified":1667630790505},{"_id":"source/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_720w.webp","hash":"bc5a982e1e13b00466f146a0bb29a5470e3dd36d","modified":1667563613146},{"_id":"source/pictures/maro-vm-调度/2022.10.27.20.00.43.png","hash":"f402be5249286bcdb595b8c2fdd1123fe0490d2c","modified":1666872054619},{"_id":"source/pictures/初识MARO/cim.container_flow.svg","hash":"95e2731c5436947ba8892d92ffac3f2240bf77ee","modified":1666336862537},{"_id":"source/pictures/maro-vm-调度/vm.energy_curve.svg","hash":"92098c53d8c1960426a4c1a98fedb7d48cebc7a8","modified":1666942188814},{"_id":"source/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg","hash":"772a0a66b47daa7cf1fb8183ffabc9744853d89b","modified":1667719180278},{"_id":"source/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg","hash":"9d69d57757bc8ba74d2a8f336475ef7a5c20c7de","modified":1667657224686},{"_id":"source/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg","hash":"bbd3b474e52846eedc801077ab7336bfaee9e80a","modified":1667719001162},{"_id":"source/pictures/初识MARO/maro_overview.svg","hash":"1de4616a1023908e84ecfe480127d8a763cb66a5","modified":1666342513748},{"_id":"source/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg","hash":"42702916ed48b7442ec43ca29979c42b4000e585","modified":1667719437773},{"_id":"source/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg","hash":"0d99cb83be20cf3804d87f5279ff9ac55c91125e","modified":1667719581313},{"_id":"source/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg","hash":"eba1ef9c07fb55fc5eb76eeb4898f8e8fcf75d52","modified":1667721510157},{"_id":"source/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg","hash":"9f2d743c7cc6b89636d92da5359164ca6f561771","modified":1667720563597},{"_id":"source/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg","hash":"51aaa1309dd551e341c16be54eea125dcf109c44","modified":1667656777572},{"_id":"source/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg","hash":"c36dc6ad3e3c203f47777ca50a6ae689d4db294b","modified":1667657438189},{"_id":"source/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg","hash":"fea14f6d6e3e8216cf8f3151b1ddc2d93493f2d8","modified":1667720698869},{"_id":"source/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg","hash":"7264ebbf235ce92cb1db4df7f227ef0f63135605","modified":1667720149207},{"_id":"source/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg","hash":"0c4c287db0324b7b8dbaef1937f9c7c60492e72a","modified":1667719244230},{"_id":"source/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg","hash":"29c0605338b46a78f2f0d6a2aadc4602937f5b37","modified":1667720945812},{"_id":"source/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg","hash":"eb4b30af447525578ee1fc0a28561a40d3cc74b1","modified":1667657702396},{"_id":"source/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg","hash":"08262868b28e20867a9c4b247085b8af2a89d776","modified":1667721352754},{"_id":"source/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg","hash":"2b7dde963674304ac7073319bc35d15cc2e685b5","modified":1667719759440},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg","hash":"cc3bf0e5bef6cfdd695c99e2f38915649b526c3a","modified":1667801180342},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg","hash":"dc60690ba4ada669266602ba7f3b2ac52e2f3bdc","modified":1667801777352},{"_id":"source/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png","hash":"e1441b97e385c56e98eca57b0880aaad9640cb60","modified":1666761864162},{"_id":"source/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg","hash":"d33ced84f6b9071a0e545d982523db604152f9d2","modified":1666509657470},{"_id":"source/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg","hash":"8ea1b8616562d9f2648b5ccb47718ffbb319c0dc","modified":1667560400262},{"_id":"source/pictures/hexo-文档分类-图片存储/2022.10.23.19.31.09.png","hash":"0bf9c351e2a0b1841ec89a4169fb91ec6973b683","modified":1666524886526},{"_id":"source/pictures/初识MARO/cim.toys.svg","hash":"06515e0001777c60b58e20e42a42b26c05ad4666","modified":1666339482413},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg","hash":"62814ff8a52caf1556f2d3d0ef0ae2d76ba71064","modified":1667801277697},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg","hash":"67249158ee5ce8e301a8fa39ae5d6cee3c142520","modified":1667801005298},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg","hash":"eaaf265279d82df4f000e744ed6def1a1005c775","modified":1667801329557},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg","hash":"de091448f5014617822efd65f42ee5e3b977e3bc","modified":1667801861420},{"_id":"source/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png","hash":"b982b6ba8875331f124b92547c8e56a1b576e423","modified":1666506354935},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.41.32.png","hash":"aa30b2752ab906bb2a654fda449c4c828fceaa1e","modified":1666514503508},{"_id":"source/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg","hash":"18f676e1f49f8c7401beb7b38b4a5fd95e71a044","modified":1667562926497},{"_id":"source/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg","hash":"a64378cf54918bbe41a03459b5e3ba7ab86bcdbb","modified":1667800866570},{"_id":"source/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png","hash":"db24dcae76df101d7d7ba3cd546e24eec3564ebf","modified":1666506502102},{"_id":"source/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg","hash":"9fc7084f028607a4f55833eff78aa9ff91f553e4","modified":1667563377835},{"_id":"source/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg","hash":"08717e35dc7942842fa29a8b1ee8b217abde8cd5","modified":1667563203980},{"_id":"source/pictures/hexo-基本美化/2022.10.23.16.14.49.png","hash":"a77cd356a29de10852cb6e289e62731cf98187d3","modified":1666512895718},{"_id":"source/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg","hash":"1417e2365c4712eb6bf86907cb97ae2f089bc6e0","modified":1667563939233},{"_id":"source/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg","hash":"2762435294e9963e445337ccf009825f058612d6","modified":1667564373556},{"_id":"source/pictures/github-pages-hexo/2022.10.23.14.48.30.png","hash":"7915c2596f14d29608a15ae998df23095b287de2","modified":1666507725796},{"_id":"source/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png","hash":"04fe446157d97b72e4f12c53376272ab9b234ff1","modified":1666506401987},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"66d8d7c5d4fe4458b0f1ce7e22b039198aa7eb1b","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"618ea653d36f4444a0768513788a3f11beaddd16","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4cdf28232ac2e9f5aca6aac62edb7569a5a2905b","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1666572684265},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1666572684269},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1666572684217},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1666572684217},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1666572684217},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1666572684185},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1666572684185},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1666572684181},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1666572684185},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"314805f0186e9f6208c845f0757fdb7891c540f6","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1666572684221},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1666572684225},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1666572684229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1666572684233},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"62faf6b0b0020066a0dec1f0123cf1fee3198e7e","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1666572684241},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1666572684241},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1666572684241},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1666572684237},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1666572684185},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1666572684189},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1666572684201},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1666572684193},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1666572684241},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1666572684253},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1666572684257},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1666572684241},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1666572684245},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1666572684197},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1666572684249},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1666572684261},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1666572684185},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1666572684245},{"_id":"source/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png","hash":"74a69d0a59da65edf58eb15698b0f730e3c104f0","modified":1666506260803},{"_id":"source/pictures/初识MARO/cim.global_trade.svg","hash":"12a9d667d63a83d889760069d9dfb09a949f02ab","modified":1666341600970},{"_id":"source/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png","hash":"2e141a4aa28e3177ea5e5b0ba9fbf91fa4232db2","modified":1666506597618},{"_id":"public/search.xml","hash":"6e3e5fa1f9f4bea698bba0d77e566848495c2f0d","modified":1669723226355},{"_id":"public/tags/index.html","hash":"ac3b5acf71a02c1c0d763e0d5453c42ffa7aa438","modified":1669723226355},{"_id":"public/2022/11/05/Linux-查看硬盘空间/index.html","hash":"6ee1d501765f6930b90454fbb519763fbe488a33","modified":1667813745578},{"_id":"public/2022/11/05/VLC-Linux-安装在自定义目录/index.html","hash":"756b4af151c552a749de57c0de4dee833a70b83e","modified":1667813745578},{"_id":"public/2022/11/05/wayland-wemeet/index.html","hash":"d214da1a1727898246fc329c2d91f86c7c2327ec","modified":1667813745578},{"_id":"public/2022/10/26/工作面试/index.html","hash":"64e0f8d2689cd0e19e22d0dc846c1892ed4ae385","modified":1669723226355},{"_id":"public/2022/10/26/Hexo-加强-Next-Theme-美化/index.html","hash":"18ef70876288b1e03bf89cd305e04eff8015f99d","modified":1669120988180},{"_id":"public/2022/10/23/Hexo-基本美化/index.html","hash":"c5bcf455443bdfacc919ba94b7e18b4636114040","modified":1667813745578},{"_id":"public/2022/10/23/debian-bashrc/index.html","hash":"96ab6861bb3b896536727241e3ec0dc50ec9496c","modified":1667813745578},{"_id":"public/2022/10/23/debian-fcitx-中文输入法/index.html","hash":"617ce76366e2cb72efb299b1d679202b1b140a74","modified":1667813745578},{"_id":"public/2022/10/23/debian-gnome-default-browser/index.html","hash":"32854a448c580440c70a57104c2e570f990d4345","modified":1667813745578},{"_id":"public/2022/10/23/debian-nvidia/index.html","hash":"9ad56d47871c77682b9fd7fc7a77ba4311111ed4","modified":1667813745578},{"_id":"public/2022/10/23/linux-bash-powerline-arrow/index.html","hash":"f7a51cff23635588d81bf23c8d9000fe7e113ad6","modified":1667813745578},{"_id":"public/2022/10/23/linux-command-not-found-bash/index.html","hash":"efdd20966a479ed52bc0715eafa054919619cb8c","modified":1667813745578},{"_id":"public/2022/10/23/linux-debian-gnome-desktop-launch/index.html","hash":"5822cfe422f07354c9cc06137f6db9e2dc4fd34d","modified":1667813745578},{"_id":"public/2022/10/23/linux-debian-vscode-fonts-firacode/index.html","hash":"18778f49d6a2b92ea66cc84e8332f69832ad1fea","modified":1667813745578},{"_id":"public/2022/10/23/node-换源-阿里/index.html","hash":"53875c646521fff22ce33cebd014289afa199670","modified":1667813745578},{"_id":"public/2022/10/23/path.sh-gopath-alias/index.html","hash":"56d18bfee0b2223c9e7ab9fda5b5f4399c4cd8bc","modified":1667813745578},{"_id":"public/2022/10/23/vim-nvim-replace-批量查找替换/index.html","hash":"fead4537da650ac7ef92f6bdc2a68bf60bf7f1f9","modified":1667813745578},{"_id":"public/2022/10/22/The-First-Blog/index.html","hash":"67198a564ddae8a64c8073aeef733d8798c9ab4c","modified":1667813745578},{"_id":"public/archives/index.html","hash":"17123183a5d8e7b6ad283f0a96a079656006faf7","modified":1669723226355},{"_id":"public/archives/page/2/index.html","hash":"26da58e57d152f8ca7d5d685abde00508275c887","modified":1669723226355},{"_id":"public/archives/page/3/index.html","hash":"0e48b2df69f91d181959e29bce616be72a73abd0","modified":1669723226355},{"_id":"public/archives/2022/index.html","hash":"e5b8f9c8aecdcc2a00e6aa805ec782d74137a8d8","modified":1669723226355},{"_id":"public/archives/2022/page/2/index.html","hash":"f30e29b9393946edfa11218718a483960eb19227","modified":1669723226355},{"_id":"public/archives/2022/page/3/index.html","hash":"1389ffe0269b8ff31bb1e963206135922c7424f8","modified":1669723226355},{"_id":"public/archives/2022/10/index.html","hash":"f45166cb58ba65ddaa455872cb1b04f9362beabe","modified":1669723226355},{"_id":"public/archives/2022/10/page/2/index.html","hash":"f8342e4455515bd4cfa58064d60915f5f574235e","modified":1669723226355},{"_id":"public/archives/2022/11/index.html","hash":"d9bb59a6638ad94caefdc872c06b85854b7238b7","modified":1669723226355},{"_id":"public/categories/Hexo-Usage/index.html","hash":"e8bb56a6e0aa9ddc22dee007fae6eae5a0fd2491","modified":1667813745578},{"_id":"public/tags/Hexo/index.html","hash":"b43f8f8d29d3acad70c154e9f60a26221efa4d45","modified":1669723226355},{"_id":"public/tags/Github/index.html","hash":"24ae1207fceb773522c2ee0cebd95a3d37406e4f","modified":1667813745578},{"_id":"public/tags/Linux/index.html","hash":"b849b33e7c70ead2fe4346efa768fb1446855156","modified":1668774551795},{"_id":"public/tags/Linux/page/2/index.html","hash":"61eb777aeaca7fa9cb40d4bd441ee6093a735a3d","modified":1668774551795},{"_id":"public/tags/MARO/index.html","hash":"4dab4a51081576689a81dce133b0c291e6246831","modified":1667813745578},{"_id":"public/tags/Markdown/index.html","hash":"858b5c2f07933c8c25d5dfc251bbcb76304a8657","modified":1667813745578},{"_id":"public/tags/数据库/index.html","hash":"74d9a860aa6d0a4efc6bd63d46060db902cc053f","modified":1667813745578},{"_id":"public/tags/MySQL/index.html","hash":"a74b1f38ec48bc6f5f37e7c32373da4909bea9fc","modified":1667813745578},{"_id":"public/tags/对话/index.html","hash":"8126a0cd14c7545bb28abb96fd2f6c5a2850f641","modified":1667821165481},{"_id":"public/tags/网络/index.html","hash":"0d9706ff7bbc550eb6c8109fa81ed203a0ef7fca","modified":1667813745578},{"_id":"public/tags/TCP/index.html","hash":"929e499e26ab9292c3d074770f10d59793a5b478","modified":1667813745578},{"_id":"public/tags/VIM/index.html","hash":"6aaf7739971fe024f5611cdcf495bacc71467f12","modified":1668684441791},{"_id":"public/tags/Debian/index.html","hash":"506a4638da7e6df9aad62a88c247d7e952b7a383","modified":1667813745578},{"_id":"public/tags/Bash/index.html","hash":"1edb83661ae75a4f2117e7e84600f83b4c29a9b7","modified":1667813745578},{"_id":"public/tags/Fcitx/index.html","hash":"77efaf2b1f56d43fc61912bbed6e7cee6be37cb2","modified":1667813745578},{"_id":"public/tags/Gnome/index.html","hash":"4c3ae020fa78908b9fa6b5e3c127bab6d9f72d93","modified":1667813745578},{"_id":"public/tags/Nvidia/index.html","hash":"17e10f8f517c95f722f06be83d94ee1e4e6b9759","modified":1667813745578},{"_id":"public/tags/Powerline/index.html","hash":"009632a10f58c4a4f8f72c8704792a0dab7e8836","modified":1667813745578},{"_id":"public/tags/VScode/index.html","hash":"114fe58abdf497c4562a9ca47fc8fbf47e0caf99","modified":1667813745578},{"_id":"public/tags/Nodejs/index.html","hash":"ad6465c1061a5aecf1eadb99e418254921342053","modified":1667813745578},{"_id":"public/tags/Wayland/index.html","hash":"f97acc36aa51b9f535305b4cd4724b36b839134a","modified":1667813745578},{"_id":"public/tags/工作面试/index.html","hash":"f7fffd50d9376b88de8075f6cde3e05480f6d532","modified":1667813745578},{"_id":"public/2022/11/07/TCP-Shakes-and-Waves-hands-闲聊/index.html","hash":"29f31610bd1b6edc2ad06ea014a10ed2f43a9324","modified":1667821165481},{"_id":"public/2022/11/06/MySQL-闲谈-3/index.html","hash":"ff0f3493d9aaa8b63d85f45c789f3d2d88e2ec4f","modified":1667813745578},{"_id":"public/2022/11/06/MySQL-闲谈-2/index.html","hash":"f865cdf058a2fc5e47ccda7b4b744ab2b426c811","modified":1667813745578},{"_id":"public/2022/11/05/MySQL-闲谈-1/index.html","hash":"1c3ca575e245c8ad518c79e384aa2d57fc78b993","modified":1668676051618},{"_id":"public/2022/11/05/Markdown-对话框笔记/index.html","hash":"35ec0657de701797dd6a6036dfe10b529b87d719","modified":1669121146410},{"_id":"public/2022/11/04/MARO-Distibuted-toolkit/index.html","hash":"3ee3bdaf3fb4a782b11df5533dd7db8acf32536f","modified":1669204970321},{"_id":"public/2022/10/29/VIM-配置/index.html","hash":"967aefb6a104d8be66b51e0917aeec552272bea3","modified":1667813745578},{"_id":"public/2022/10/27/MARO-VM-调度/index.html","hash":"7b04661b9c91efe37fa46e01cf9319d467d986ad","modified":1669204970321},{"_id":"public/2022/10/26/初识-MARO/index.html","hash":"9241c38246b493976442bffaac25ac24ed5bb0b7","modified":1669204970321},{"_id":"public/2022/10/23/Hexo-文档分类-图片存储/index.html","hash":"883a66ecec0ad429c8fd2c39b97b26345129ab6d","modified":1669121146410},{"_id":"public/2022/10/23/Github-Pages+Hexo/index.html","hash":"888886a4ff2748b3661626d87e9a15352e2805c1","modified":1669120883738},{"_id":"public/index.html","hash":"27bebc569bc517419eea91eea318db50746a60cc","modified":1669723226355},{"_id":"public/page/2/index.html","hash":"74368ae6d896dc785c134f93fcf86ac5ad8890ce","modified":1669723226355},{"_id":"public/page/3/index.html","hash":"4f3e4b21e4f432b2833577519d7ab03fb3956bd0","modified":1669723226355},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1667813745578},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1667813745578},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1667813745578},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1667813745578},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1667813745578},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg","hash":"c3db54781ea1d187d0cb78a8d001aec7b591be86","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg","hash":"4fc37f6290cb9d410992376fb196b3bbdd2ff01e","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg","hash":"b5b20c111bd5b2b25a7759e256617d60bae02081","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg","hash":"fa1998b222c669aa54d0fd7bd2b5922f389d079d","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg","hash":"4df6435fbaedf7fc16e7fe5a5465f65bbf1f032a","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg","hash":"f00ccc2a470bed48b0c2a077ba0952209745d085","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-b51be8468af5b30faeb9d079cc8c27b7_r.jpg","hash":"45ed9fa25bca1c66845cf60e44ad4633999075c4","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg","hash":"6efa410ad1555461cf0bf4de33eb9bd7f2a0ad4b","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg","hash":"e76ea560950abf0089419e15843cd4a1dc142ffc","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg","hash":"d46a8e535577a8f64518995332b7f9cd44ee59fa","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png","hash":"0554e5bfb9ab1ebf20c59f7873d0ee906c6dfadd","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.17.17.png","hash":"91b7f05e1d750839cef5e6a0c3adcb8303337c4d","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.19.21.png","hash":"38a1b75eb36b68f1adff146fb584e98391e328f5","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.22.22.png","hash":"c46eec025b7d9ffac0eab732b81fc5ca58c64ec9","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.25.30.png","hash":"b1afb2c4d3b8b51fdb53ab65013a8253dc78df6a","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.27.38.png","hash":"fbf2d785aa4fe1df44ccce9fea77ce6375c78fbd","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.29.42.png","hash":"5b6da52454cd3d315559d496c9dc2473b0923b89","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.32.39.png","hash":"0e1555e013c4f92031382129512dfeeeb6369b80","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.33.18.png","hash":"ea48e67bc63e67d7e1d2a5c8811bfddd355e4bbb","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.35.28.png","hash":"6d9f2604fd7581231717599a739ffccfce6d5c03","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.36.27.png","hash":"685bf6ebf2bdd00abb8a62ad34e9963811e526f9","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.38.27.png","hash":"9964bd3d7506844711c1af95880e5f5710d854ab","modified":1667813745578},{"_id":"public/pictures/hexo-文档分类-图片存储/20191220164252492.png","hash":"ee43cde544033da23da1d35adb3c219e29b9c2bf","modified":1667813745578},{"_id":"public/pictures/hexo-文档分类-图片存储/2022.10.23.19.50.12.png","hash":"c66ef07b7afce0110928a7ddb5b9fc400c987e96","modified":1667813745578},{"_id":"public/pictures/hexo-文档分类-图片存储/2022.10.23.19.55.54.png","hash":"5bfb170d9ebb4b5119d96e4578adbe100c30521f","modified":1667813745578},{"_id":"public/pictures/markdown-对话框/2022.11.05.21.09.58.png","hash":"6e087c5559accef1af81469bc62dcc8ed934bb7c","modified":1667813745578},{"_id":"public/pictures/hexo-文档分类-图片存储/2022.10.23.20.00.11.png","hash":"849f447cf80ea5b59d7c54e70c565343d3788cbe","modified":1667813745578},{"_id":"public/pictures/markdown-对话框/2022.11.07.17.19.38.png","hash":"ac13892ee18fe8097fd0b3afebcf6b370cbb2423","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/key_components.svg","hash":"43f2be94d84d7e712d76b0719b51f6e3ee12c42a","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/maro_overview.svg","hash":"1de4616a1023908e84ecfe480127d8a763cb66a5","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/overview.svg","hash":"1c0c3a089ed3622d8cabf0ac5f454876e5cf0179","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/proxy.svg","hash":"bc60d1723f615bec08d1fab624cd2baa6ecc93b4","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/register_table.register.svg","hash":"3b88eaf6109d0aff41ddc2a705187a5084ef60b9","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/register_table.trigger.svg","hash":"6b161b234224abcbb5e94201608e614c3a51d205","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg","hash":"60a95dcedd11edd6bb5d09535414e67cbabc6f63","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp","hash":"94609344f76f229b9c679894cd5442134594c8c6","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_720w.webp","hash":"bc5a982e1e13b00466f146a0bb29a5470e3dd36d","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg","hash":"4b57d14aba896b0a74ff7be43708fca2e96e1bc2","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png","hash":"447d771da5811867792134dd3f79e340229d7f03","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp","hash":"fdd97ccf3898da7d2f8daf1e02c04b84547350d0","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg","hash":"45401e9f96ffde0bd2f712744d610d05486cf4e5","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg","hash":"61c5ce7c875f217e64982f6d6e2a7106d0a8f8c5","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg","hash":"152a2d86794897437d887ab579bef5a960428567","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp","hash":"9af182616ae47a2e92c0a64f2db467b198ee469f","modified":1667813745578},{"_id":"public/pictures/maro-vm-调度/2022.10.27.20.00.43.png","hash":"f402be5249286bcdb595b8c2fdd1123fe0490d2c","modified":1667813745578},{"_id":"public/pictures/maro-vm-调度/2022.10.28.15.14.52.png","hash":"b6c762d02986b8824b18d1b233be16f76b3afaea","modified":1667813745578},{"_id":"public/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png","hash":"46c338b727c3aad014392cb4c20a713eac3b9932","modified":1667813745578},{"_id":"public/pictures/maro-vm-调度/vm.energy_curve.svg","hash":"92098c53d8c1960426a4c1a98fedb7d48cebc7a8","modified":1667813745578},{"_id":"public/pictures/初识MARO/cim.container_flow.svg","hash":"95e2731c5436947ba8892d92ffac3f2240bf77ee","modified":1667813745578},{"_id":"public/pictures/初识MARO/maro_overview.svg","hash":"1de4616a1023908e84ecfe480127d8a763cb66a5","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg","hash":"bbd3b474e52846eedc801077ab7336bfaee9e80a","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg","hash":"772a0a66b47daa7cf1fb8183ffabc9744853d89b","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg","hash":"9d69d57757bc8ba74d2a8f336475ef7a5c20c7de","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg","hash":"9f2d743c7cc6b89636d92da5359164ca6f561771","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg","hash":"42702916ed48b7442ec43ca29979c42b4000e585","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg","hash":"eba1ef9c07fb55fc5eb76eeb4898f8e8fcf75d52","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg","hash":"0d99cb83be20cf3804d87f5279ff9ac55c91125e","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg","hash":"51aaa1309dd551e341c16be54eea125dcf109c44","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg","hash":"29c0605338b46a78f2f0d6a2aadc4602937f5b37","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg","hash":"c36dc6ad3e3c203f47777ca50a6ae689d4db294b","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg","hash":"fea14f6d6e3e8216cf8f3151b1ddc2d93493f2d8","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg","hash":"2b7dde963674304ac7073319bc35d15cc2e685b5","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg","hash":"eb4b30af447525578ee1fc0a28561a40d3cc74b1","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg","hash":"7264ebbf235ce92cb1db4df7f227ef0f63135605","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg","hash":"0c4c287db0324b7b8dbaef1937f9c7c60492e72a","modified":1667813745578},{"_id":"public/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg","hash":"08262868b28e20867a9c4b247085b8af2a89d776","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg","hash":"cc3bf0e5bef6cfdd695c99e2f38915649b526c3a","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg","hash":"dc60690ba4ada669266602ba7f3b2ac52e2f3bdc","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg","hash":"d33ced84f6b9071a0e545d982523db604152f9d2","modified":1667813745578},{"_id":"public/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png","hash":"e1441b97e385c56e98eca57b0880aaad9640cb60","modified":1667813745578},{"_id":"public/pictures/hexo-文档分类-图片存储/2022.10.23.19.31.09.png","hash":"0bf9c351e2a0b1841ec89a4169fb91ec6973b683","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg","hash":"8ea1b8616562d9f2648b5ccb47718ffbb319c0dc","modified":1667813745578},{"_id":"public/pictures/初识MARO/cim.toys.svg","hash":"06515e0001777c60b58e20e42a42b26c05ad4666","modified":1667813745578},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1667813745578},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1667813745578},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1667813745578},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1667813745578},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1667813745578},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1667813745578},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1667813745578},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1667813745578},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1667813745578},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1667813745578},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1667813745578},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1667813745578},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1667813745578},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1667813745578},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1667813745578},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1667813745578},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1667813745578},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1667813745578},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1667813745578},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1667813745578},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1667813745578},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1667813745578},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1667813745578},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1667813745578},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1667813745578},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1667813745578},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1667813745578},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1667813745578},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1667813745578},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1667813745578},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1667813745578},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1667813745578},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1667813745578},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1667813745578},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1667813745578},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1667813745578},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1667813745578},{"_id":"public/css/main.css","hash":"4cba69dbb34fd6d404bdb58f6b8a9124d6694f23","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg","hash":"67249158ee5ce8e301a8fa39ae5d6cee3c142520","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg","hash":"62814ff8a52caf1556f2d3d0ef0ae2d76ba71064","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg","hash":"eaaf265279d82df4f000e744ed6def1a1005c775","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg","hash":"de091448f5014617822efd65f42ee5e3b977e3bc","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png","hash":"b982b6ba8875331f124b92547c8e56a1b576e423","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.41.32.png","hash":"aa30b2752ab906bb2a654fda449c4c828fceaa1e","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg","hash":"18f676e1f49f8c7401beb7b38b4a5fd95e71a044","modified":1667813745578},{"_id":"public/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg","hash":"a64378cf54918bbe41a03459b5e3ba7ab86bcdbb","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png","hash":"db24dcae76df101d7d7ba3cd546e24eec3564ebf","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg","hash":"9fc7084f028607a4f55833eff78aa9ff91f553e4","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg","hash":"08717e35dc7942842fa29a8b1ee8b217abde8cd5","modified":1667813745578},{"_id":"public/pictures/hexo-基本美化/2022.10.23.16.14.49.png","hash":"a77cd356a29de10852cb6e289e62731cf98187d3","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg","hash":"1417e2365c4712eb6bf86907cb97ae2f089bc6e0","modified":1667813745578},{"_id":"public/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg","hash":"2762435294e9963e445337ccf009825f058612d6","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/2022.10.23.14.48.30.png","hash":"7915c2596f14d29608a15ae998df23095b287de2","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png","hash":"04fe446157d97b72e4f12c53376272ab9b234ff1","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png","hash":"74a69d0a59da65edf58eb15698b0f730e3c104f0","modified":1667813745578},{"_id":"public/pictures/初识MARO/cim.global_trade.svg","hash":"12a9d667d63a83d889760069d9dfb09a949f02ab","modified":1667813745578},{"_id":"public/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png","hash":"2e141a4aa28e3177ea5e5b0ba9fbf91fa4232db2","modified":1667813745578},{"_id":"source/_posts/Redis-基础-闲聊.md","hash":"f9f00974c604cdcf81718f1167604e19a9459fe6","modified":1667821157453},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg","hash":"e327765e55eaa1f5b677d90927db5f65ee8ef8d0","modified":1667814618943},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg","hash":"49bcc3f29c361ed93bf9299ca27300eff4ecd752","modified":1667814749323},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg","hash":"32ca4e4ea35b1f891f9701b85fa86ee7d7c613c5","modified":1667814843599},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg","hash":"e915709cd4438f96dae2f0aa5df52bca0c715cb0","modified":1667820609166},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg","hash":"8f83fb6380cb6b281ab9f8b13f66107fb74f1fc1","modified":1667820883714},{"_id":"source/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg","hash":"b5d4948b6b1ea8ec0f113ba8499b0636a3e3947d","modified":1667821057716},{"_id":"source/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png","hash":"c8c3e95499b59ee0f7a318d7d5641825fb36ff29","modified":1667814190716},{"_id":"public/tags/Redis/index.html","hash":"b6d3694116db6a8f7b63eef56ba787d1a2ac6b2d","modified":1667821165481},{"_id":"public/2022/11/07/Redis-基础-闲聊/index.html","hash":"bdde825a3aa572fe1db766ce3a3178767f6fa280","modified":1668676051618},{"_id":"public/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg","hash":"49bcc3f29c361ed93bf9299ca27300eff4ecd752","modified":1667821165481},{"_id":"public/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg","hash":"e327765e55eaa1f5b677d90927db5f65ee8ef8d0","modified":1667821165481},{"_id":"public/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg","hash":"32ca4e4ea35b1f891f9701b85fa86ee7d7c613c5","modified":1667821165481},{"_id":"public/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg","hash":"e915709cd4438f96dae2f0aa5df52bca0c715cb0","modified":1667821165481},{"_id":"public/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg","hash":"8f83fb6380cb6b281ab9f8b13f66107fb74f1fc1","modified":1667821165481},{"_id":"public/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg","hash":"b5d4948b6b1ea8ec0f113ba8499b0636a3e3947d","modified":1667821165481},{"_id":"public/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png","hash":"c8c3e95499b59ee0f7a318d7d5641825fb36ff29","modified":1667821165481},{"_id":"source/_posts/Linux-命令行格式化磁盘（U盘.md","hash":"6ebee68ceb125cbb5bb3835e54650d6af2de0c97","modified":1668676313454},{"_id":"source/pictures/Linux 命令行格式化/2022.11.17.16.36.19.png","hash":"e0f9f5fa44f43b707822948546f6ae36c7a6d85f","modified":1668674186817},{"_id":"source/_posts/vim-diff.md","hash":"3bcd8e340c9be3ee035a321f7e9c68aee5176395","modified":1667821873042},{"_id":"source/pictures/Linux 命令行格式化/2022.11.17.16.39.41.png","hash":"57cbabaa8c0f439dcc612c6e420d8c27c6cda3fa","modified":1668674391420},{"_id":"public/2022/11/07/vim-diff/index.html","hash":"7e9c16981b368daeb5c202011658517aca7b89ce","modified":1668676051618},{"_id":"public/page/4/index.html","hash":"d184053c373efa2a4ed075d999d9b83723b49197","modified":1669723226355},{"_id":"public/archives/page/4/index.html","hash":"9a6fd0c0e3df84de1f73c203222630c50e1d40b9","modified":1669723226355},{"_id":"public/archives/2022/page/4/index.html","hash":"110ffbe180d935947ac53bdfe385186de64b3a14","modified":1669723226355},{"_id":"public/archives/2022/11/page/2/index.html","hash":"c9427dcaac05c34fba40cc98e98a654e9eb3cf40","modified":1669723226355},{"_id":"public/tags/vim/index.html","hash":"a323c654e9e4b3fa2515a5d184aad31ebd7946f8","modified":1668676051618},{"_id":"public/2022/11/17/Linux-命令行格式化磁盘（U盘/index.html","hash":"22881bec7bb6bbfa16eca61bf877238e3850fe46","modified":1668684441791},{"_id":"public/pictures/Linux 命令行格式化/2022.11.17.16.36.19.png","hash":"e0f9f5fa44f43b707822948546f6ae36c7a6d85f","modified":1668676051618},{"_id":"public/pictures/Linux 命令行格式化/2022.11.17.16.39.41.png","hash":"57cbabaa8c0f439dcc612c6e420d8c27c6cda3fa","modified":1668676051618},{"_id":"source/_posts/coc-pyright-找不到相关的语法分析.md","hash":"8bff04b42c6e4575b04e9c68487b24b7894ca924","modified":1668684630583},{"_id":"public/2022/11/17/coc-pyright-找不到相关的语法分析/index.html","hash":"f434ca761d8a82c39a9ab8d65f9d0c7be6c55cd4","modified":1668774551795},{"_id":"public/tags/Python/index.html","hash":"bd96e258e9ec6798601697cd57a7226b6270181c","modified":1668684441791},{"_id":"source/_posts/Linux-与-KVM-Windows-guest-共享文件.md","hash":"32ac09cf411d01a0ca178206a4bf043e62335aa0","modified":1668774690025},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.34.12.png","hash":"45ae851ffc2a91ba5c41cf994a31b95124217cd8","modified":1668771262563},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png","hash":"8943d21b4d6f55fc6ca5d4bbabc104c24ae0d589","modified":1668771443462},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png","hash":"15bbb5cbdb981084dbd739608d799f5e4063d286","modified":1668771602673},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png","hash":"18050a485cc2343f1fcbd03d1e60799bdc6532e0","modified":1668771696905},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png","hash":"7ec7f409fa7160fba440937034008d94bb11ca48","modified":1668771784460},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png","hash":"516d5743c2d214d145fdbd3bff09cdccb38b4540","modified":1668771935331},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png","hash":"835ec50944d37b2282403bf63091b6203d2ad2c2","modified":1668772026575},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png","hash":"688c82324eee8a5c8a4847d4af17845ab6ef2027","modified":1668772112474},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png","hash":"c57dcf9410d6e60f8ef527f7dd25b600eeb15feb","modified":1668772498024},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png","hash":"7d89104cda7bc3ea3ee43dbcac072c89c2571d60","modified":1668772621396},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png","hash":"5400b6854c8b9a30d4835fbd46a7d47be3038b62","modified":1668773869882},{"_id":"source/pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png","hash":"75e174776a75f7569b0d35fc72fafb3865daaa0c","modified":1668774073549},{"_id":"public/2022/11/18/Linux-与-KVM-Windows-guest-共享文件/index.html","hash":"34249acb649028ed909d5a3db73bea1fe56fa3d8","modified":1669723226355},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png","hash":"8943d21b4d6f55fc6ca5d4bbabc104c24ae0d589","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.34.12.png","hash":"45ae851ffc2a91ba5c41cf994a31b95124217cd8","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png","hash":"18050a485cc2343f1fcbd03d1e60799bdc6532e0","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png","hash":"835ec50944d37b2282403bf63091b6203d2ad2c2","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png","hash":"7ec7f409fa7160fba440937034008d94bb11ca48","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png","hash":"516d5743c2d214d145fdbd3bff09cdccb38b4540","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png","hash":"15bbb5cbdb981084dbd739608d799f5e4063d286","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png","hash":"688c82324eee8a5c8a4847d4af17845ab6ef2027","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png","hash":"c57dcf9410d6e60f8ef527f7dd25b600eeb15feb","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png","hash":"7d89104cda7bc3ea3ee43dbcac072c89c2571d60","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png","hash":"5400b6854c8b9a30d4835fbd46a7d47be3038b62","modified":1668774551795},{"_id":"public/pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png","hash":"75e174776a75f7569b0d35fc72fafb3865daaa0c","modified":1668774551795},{"_id":"source/_posts/Hexo-Inner-Link.md","hash":"101c33e243eca224450e9e034b78562474bbf137","modified":1669206064105},{"_id":"source/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png","hash":"c754e45977fcb40c6eb1183aab65596070a16b08","modified":1669205765050},{"_id":"source/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png","hash":"891121a5ff131175939e9b36d2069554a7ced035","modified":1669205826526},{"_id":"public/2022/11/23/Hexo-Inner-Link/index.html","hash":"1d8b25a4ed00c487c385dc5ea7deee1863f04de6","modified":1669723226355}],"Category":[{"name":"Hexo-Usage","_id":"cla6l8qhp0006g7i5eglxfypt"}],"Data":[],"Page":[{"title":"tags","date":"2022-10-23T05:35:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-10-23 13:35:49\ntype: \"tags\"\n---\n","updated":"2022-10-23T05:38:16.617Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cla6l8qhi0000g7i50an02i5t","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo 加强 Next Theme 美化","date":"2022-10-26T03:27:15.000Z","_content":"#### Hexo-Next 主题\nhexo-theme-next 应该是目前最广泛使用的hexo主题\n\n#### 安装 Hexo-Next 主题\n切换到你的博客顶级工程目录，npm 安装\n\n```bash\nnpm install hexo-theme-next\n```\n\n#### 切换到 Next 主题\n在你的博客顶层工程目录下打开 \"_config.yml\"\n\n<img src=\"/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png\"/>\n\n搜索themes，将里面的值改为next\n\n```yaml\ntheme: next\n```\n#### 配置 Next 主题\n将 node_modules/hexo-theme-next/_config.yml 复制到博客顶层文件目录，重命名为 \"_config.next.yml\"\n\n```bash\ncd your_site_dir\ncp node_modules/hexo-theme-next/_config.yml  _config.next.yml\n```\n- ##### 选择 Schemes\n\t打开 \"_config.next.yml\" ，首先可以看到 Scheme Settings ，里面提供了四种模式，本站使用 Mist 主题\n\n\t```yaml\n\t# Schemes\n\t#scheme: Muse\n\tscheme: Mist\n\t#scheme: Pisces\n\t#scheme: Gemini\n\t```\n- ##### 设置站点 icon\n\t在 favicon 中，可以设置侧边栏头像以及站点 icon ，需要把你的 icon 放在主题目录的 source/img/ 目录下\n\t```yaml\n\tfavicon:\n      small: /img/avatar.jfif\n      medium: /img/avatar.jfif\n      apple_touch_icon: /img/avatar.jfif\n      safari_pinned_tab: /images/logo.svg\n\t```\n- ##### 还有其余的很多配置，可以参考 \"_config.next.yml\" 里面的提示来配置\n\n\n\n","source":"_posts/Hexo-加强-Next-Theme-美化.md","raw":"---\ntitle: Hexo 加强 Next Theme 美化\ndate: 2022-10-26 11:27:15\ntags:\n\t- Hexo\n---\n#### Hexo-Next 主题\nhexo-theme-next 应该是目前最广泛使用的hexo主题\n\n#### 安装 Hexo-Next 主题\n切换到你的博客顶级工程目录，npm 安装\n\n```bash\nnpm install hexo-theme-next\n```\n\n#### 切换到 Next 主题\n在你的博客顶层工程目录下打开 \"_config.yml\"\n\n<img src=\"/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png\"/>\n\n搜索themes，将里面的值改为next\n\n```yaml\ntheme: next\n```\n#### 配置 Next 主题\n将 node_modules/hexo-theme-next/_config.yml 复制到博客顶层文件目录，重命名为 \"_config.next.yml\"\n\n```bash\ncd your_site_dir\ncp node_modules/hexo-theme-next/_config.yml  _config.next.yml\n```\n- ##### 选择 Schemes\n\t打开 \"_config.next.yml\" ，首先可以看到 Scheme Settings ，里面提供了四种模式，本站使用 Mist 主题\n\n\t```yaml\n\t# Schemes\n\t#scheme: Muse\n\tscheme: Mist\n\t#scheme: Pisces\n\t#scheme: Gemini\n\t```\n- ##### 设置站点 icon\n\t在 favicon 中，可以设置侧边栏头像以及站点 icon ，需要把你的 icon 放在主题目录的 source/img/ 目录下\n\t```yaml\n\tfavicon:\n      small: /img/avatar.jfif\n      medium: /img/avatar.jfif\n      apple_touch_icon: /img/avatar.jfif\n      safari_pinned_tab: /images/logo.svg\n\t```\n- ##### 还有其余的很多配置，可以参考 \"_config.next.yml\" 里面的提示来配置\n\n\n\n","slug":"Hexo-加强-Next-Theme-美化","published":1,"updated":"2022-11-22T12:43:05.145Z","_id":"cla6l8qhj0001g7i50zjig03m","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Hexo-Next-主题\"><a href=\"#Hexo-Next-主题\" class=\"headerlink\" title=\"Hexo-Next 主题\"></a>Hexo-Next 主题</h4><p>hexo-theme-next 应该是目前最广泛使用的hexo主题</p>\n<h4 id=\"安装-Hexo-Next-主题\"><a href=\"#安装-Hexo-Next-主题\" class=\"headerlink\" title=\"安装 Hexo-Next 主题\"></a>安装 Hexo-Next 主题</h4><p>切换到你的博客顶级工程目录，npm 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切换到-Next-主题\"><a href=\"#切换到-Next-主题\" class=\"headerlink\" title=\"切换到 Next 主题\"></a>切换到 Next 主题</h4><p>在你的博客顶层工程目录下打开 “_config.yml”</p>\n<img src=\"/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png\"/>\n\n<p>搜索themes，将里面的值改为next</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置-Next-主题\"><a href=\"#配置-Next-主题\" class=\"headerlink\" title=\"配置 Next 主题\"></a>配置 Next 主题</h4><p>将 node_modules&#x2F;hexo-theme-next&#x2F;_config.yml 复制到博客顶层文件目录，重命名为 “_config.next.yml”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your_site_dir</span><br><span class=\"line\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml  _config.next.yml</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"选择-Schemes\"><a href=\"#选择-Schemes\" class=\"headerlink\" title=\"选择 Schemes\"></a>选择 Schemes</h5><p>  打开 “_config.next.yml” ，首先可以看到 Scheme Settings ，里面提供了四种模式，本站使用 Mist 主题</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li>\n<li><h5 id=\"设置站点-icon\"><a href=\"#设置站点-icon\" class=\"headerlink\" title=\"设置站点 icon\"></a>设置站点 icon</h5><p>  在 favicon 中，可以设置侧边栏头像以及站点 icon ，需要把你的 icon 放在主题目录的 source&#x2F;img&#x2F; 目录下</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">     <span class=\"attr\">small:</span> <span class=\"string\">/img/avatar.jfif</span></span><br><span class=\"line\">     <span class=\"attr\">medium:</span> <span class=\"string\">/img/avatar.jfif</span></span><br><span class=\"line\">     <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/img/avatar.jfif</span></span><br><span class=\"line\">     <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure></li>\n<li><h5 id=\"还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置\"><a href=\"#还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置\" class=\"headerlink\" title=\"还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置\"></a>还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置</h5></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Hexo-Next-主题\"><a href=\"#Hexo-Next-主题\" class=\"headerlink\" title=\"Hexo-Next 主题\"></a>Hexo-Next 主题</h4><p>hexo-theme-next 应该是目前最广泛使用的hexo主题</p>\n<h4 id=\"安装-Hexo-Next-主题\"><a href=\"#安装-Hexo-Next-主题\" class=\"headerlink\" title=\"安装 Hexo-Next 主题\"></a>安装 Hexo-Next 主题</h4><p>切换到你的博客顶级工程目录，npm 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切换到-Next-主题\"><a href=\"#切换到-Next-主题\" class=\"headerlink\" title=\"切换到 Next 主题\"></a>切换到 Next 主题</h4><p>在你的博客顶层工程目录下打开 “_config.yml”</p>\n<img src=\"/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png\"/>\n\n<p>搜索themes，将里面的值改为next</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置-Next-主题\"><a href=\"#配置-Next-主题\" class=\"headerlink\" title=\"配置 Next 主题\"></a>配置 Next 主题</h4><p>将 node_modules&#x2F;hexo-theme-next&#x2F;_config.yml 复制到博客顶层文件目录，重命名为 “_config.next.yml”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your_site_dir</span><br><span class=\"line\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml  _config.next.yml</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"选择-Schemes\"><a href=\"#选择-Schemes\" class=\"headerlink\" title=\"选择 Schemes\"></a>选择 Schemes</h5><p>  打开 “_config.next.yml” ，首先可以看到 Scheme Settings ，里面提供了四种模式，本站使用 Mist 主题</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li>\n<li><h5 id=\"设置站点-icon\"><a href=\"#设置站点-icon\" class=\"headerlink\" title=\"设置站点 icon\"></a>设置站点 icon</h5><p>  在 favicon 中，可以设置侧边栏头像以及站点 icon ，需要把你的 icon 放在主题目录的 source&#x2F;img&#x2F; 目录下</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">     <span class=\"attr\">small:</span> <span class=\"string\">/img/avatar.jfif</span></span><br><span class=\"line\">     <span class=\"attr\">medium:</span> <span class=\"string\">/img/avatar.jfif</span></span><br><span class=\"line\">     <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/img/avatar.jfif</span></span><br><span class=\"line\">     <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure></li>\n<li><h5 id=\"还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置\"><a href=\"#还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置\" class=\"headerlink\" title=\"还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置\"></a>还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置</h5></li>\n</ul>\n"},{"title":"Github Pages + Hexo","date":"2022-10-23T05:25:51.000Z","_content":"**Github Pages 可以为个人博客提供支持，Hexo 可以让 Github Pages 更加美观和提供本地预览，而不需要上传到 Github Pages 之后再看到效果**\n###### \n**安装准备**（本地）：\n- git\n- npm\n###### \n**配置 Git**\n```bash\ngit config --global user.name \"github 用户名\"\ngit config --global user.email \"github 注册邮箱\"\n```\nGithub 已经不支持密码登录，需要复杂一点的步骤去验证\n###### \n1. 到个人中心-设置-setting\n2. ![](/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png)\n3. ![](/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png)\n   ![](/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png)\n4. 选 classic 的 token 而不是 beta 的，因为 classic 可以永久\n5. ![](/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png)\n   ![](/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png)\n6. 点击 generate token按钮\n\n###### \n然后 生成了token 一定要复制，不然刷新浏览器就没了\n###### \n拿到token以后再去git push/clone ，password就是输入刚才复制的token\n###### \n**Hexo 安装（本地全局）**\n```bash\nnpm i hexo-cli -g\n```\n新建一个文件夹（我的是blogs）用于存放你的博客，然后进入该文件夹，并用如下命令进行初始化并安装必备组件\n```bash\ngit init \nhexo init .\n```\n初始化后，目录结构如下\n```bash\n.\n ├── _config.yml \t# 网站配置信息\n ├── package.json \t# 应用程序信息\n ├── scaffolds\t\t# 模板文件夹\n ├── source \t\t# 存放用户资源\n |   ├── _drafts\n |   └── _posts\t\t# 存放个人博客\n └── themes \t\t# 主题文件夹\n```\n然后输入如下命令，然后在浏览器中打开 http://localhost:4000 ，就可以预览原始网站\n```bash\nhexo new '博客名' \t\t# 新建博客\nhexo g \t\t\t\t# 生成静态网页\nhexo s \t\t\t\t# 打开本地服务器\n```\n然后就可以看到如下的界面\n![](/pictures/github-pages-hexo/2022.10.23.14.48.30.png)\n###### \n**发布到 Github Pages 上面**\n###### \n注册 Github 帐号，有帐号了不用注册\n###### \n新建一个空仓库，暂时不要创建 README.md ，而且得确保你的仓库是 public 同时，仓库名一定要是 **用户名.github.io**\n###### \n在上文提到的 blogs 文件夹下面安装 hexo-deployer-git\n```bash\nnpm install --save hexo-deployer-git\n```\n###### \n在刚才的博客根目录中的站点配置文件 \"_config.yml\" ，设置为你的个人仓库名，branch 与你的 git 主分支对应\n![](/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg)\n![](/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png)\n###### \n开始推送内容到 Github 上去\n\n```bash\nhexo clean \t\t\t\t\t# 清理缓存\nhexo g     \t\t\t\t\t# 将 md 生成 html\ngit add -A \t\t\t\t\t# 添加到 git 缓冲区\ngit commit -m \"first time\"\t\t\t# 提交所有更改\nhexo d     \t\t\t\t\t# 推送到远程\n```\n稍等片刻，就可以访问 https://用户名.github.io 了\n\n","source":"_posts/Github-Pages+Hexo.md","raw":"---\ntitle: Github Pages + Hexo\ndate: 2022-10-23 13:25:51\ntags:\n\t- Hexo\n\t- Github\n---\n**Github Pages 可以为个人博客提供支持，Hexo 可以让 Github Pages 更加美观和提供本地预览，而不需要上传到 Github Pages 之后再看到效果**\n###### \n**安装准备**（本地）：\n- git\n- npm\n###### \n**配置 Git**\n```bash\ngit config --global user.name \"github 用户名\"\ngit config --global user.email \"github 注册邮箱\"\n```\nGithub 已经不支持密码登录，需要复杂一点的步骤去验证\n###### \n1. 到个人中心-设置-setting\n2. ![](/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png)\n3. ![](/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png)\n   ![](/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png)\n4. 选 classic 的 token 而不是 beta 的，因为 classic 可以永久\n5. ![](/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png)\n   ![](/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png)\n6. 点击 generate token按钮\n\n###### \n然后 生成了token 一定要复制，不然刷新浏览器就没了\n###### \n拿到token以后再去git push/clone ，password就是输入刚才复制的token\n###### \n**Hexo 安装（本地全局）**\n```bash\nnpm i hexo-cli -g\n```\n新建一个文件夹（我的是blogs）用于存放你的博客，然后进入该文件夹，并用如下命令进行初始化并安装必备组件\n```bash\ngit init \nhexo init .\n```\n初始化后，目录结构如下\n```bash\n.\n ├── _config.yml \t# 网站配置信息\n ├── package.json \t# 应用程序信息\n ├── scaffolds\t\t# 模板文件夹\n ├── source \t\t# 存放用户资源\n |   ├── _drafts\n |   └── _posts\t\t# 存放个人博客\n └── themes \t\t# 主题文件夹\n```\n然后输入如下命令，然后在浏览器中打开 http://localhost:4000 ，就可以预览原始网站\n```bash\nhexo new '博客名' \t\t# 新建博客\nhexo g \t\t\t\t# 生成静态网页\nhexo s \t\t\t\t# 打开本地服务器\n```\n然后就可以看到如下的界面\n![](/pictures/github-pages-hexo/2022.10.23.14.48.30.png)\n###### \n**发布到 Github Pages 上面**\n###### \n注册 Github 帐号，有帐号了不用注册\n###### \n新建一个空仓库，暂时不要创建 README.md ，而且得确保你的仓库是 public 同时，仓库名一定要是 **用户名.github.io**\n###### \n在上文提到的 blogs 文件夹下面安装 hexo-deployer-git\n```bash\nnpm install --save hexo-deployer-git\n```\n###### \n在刚才的博客根目录中的站点配置文件 \"_config.yml\" ，设置为你的个人仓库名，branch 与你的 git 主分支对应\n![](/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg)\n![](/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png)\n###### \n开始推送内容到 Github 上去\n\n```bash\nhexo clean \t\t\t\t\t# 清理缓存\nhexo g     \t\t\t\t\t# 将 md 生成 html\ngit add -A \t\t\t\t\t# 添加到 git 缓冲区\ngit commit -m \"first time\"\t\t\t# 提交所有更改\nhexo d     \t\t\t\t\t# 推送到远程\n```\n稍等片刻，就可以访问 https://用户名.github.io 了\n\n","slug":"Github-Pages+Hexo","published":1,"updated":"2022-11-22T12:41:19.386Z","_id":"cla6l8qhl0002g7i5hdfmayyf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Github Pages 可以为个人博客提供支持，Hexo 可以让 Github Pages 更加美观和提供本地预览，而不需要上传到 Github Pages 之后再看到效果</strong></p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><p><strong>安装准备</strong>（本地）：</p>\n<ul>\n<li>git</li>\n<li>npm</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p><strong>配置 Git</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;github 用户名&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;github 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Github 已经不支持密码登录，需要复杂一点的步骤去验证</p>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ol>\n<li>到个人中心-设置-setting</li>\n<li><img src=\"/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png\"></li>\n<li><img src=\"/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png\"><br><img src=\"/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png\"></li>\n<li>选 classic 的 token 而不是 beta 的，因为 classic 可以永久</li>\n<li><img src=\"/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png\"><br><img src=\"/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png\"></li>\n<li>点击 generate token按钮</li>\n</ol>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><p>然后 生成了token 一定要复制，不然刷新浏览器就没了</p>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><p>拿到token以后再去git push&#x2F;clone ，password就是输入刚才复制的token</p>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><p><strong>Hexo 安装（本地全局）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>新建一个文件夹（我的是blogs）用于存放你的博客，然后进入该文件夹，并用如下命令进行初始化并安装必备组件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init </span><br><span class=\"line\">hexo init .</span><br></pre></td></tr></table></figure>\n<p>初始化后，目录结构如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\"> ├── _config.yml \t<span class=\"comment\"># 网站配置信息</span></span><br><span class=\"line\"> ├── package.json \t<span class=\"comment\"># 应用程序信息</span></span><br><span class=\"line\"> ├── scaffolds\t\t<span class=\"comment\"># 模板文件夹</span></span><br><span class=\"line\"> ├── <span class=\"built_in\">source</span> \t\t<span class=\"comment\"># 存放用户资源</span></span><br><span class=\"line\"> |   ├── _drafts</span><br><span class=\"line\"> |   └── _posts\t\t<span class=\"comment\"># 存放个人博客</span></span><br><span class=\"line\"> └── themes \t\t<span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></table></figure>\n<p>然后输入如下命令，然后在浏览器中打开 <a href=\"http://localhost:4000/\">http://localhost:4000</a> ，就可以预览原始网站</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&#x27;博客名&#x27;</span> \t\t<span class=\"comment\"># 新建博客</span></span><br><span class=\"line\">hexo g \t\t\t\t<span class=\"comment\"># 生成静态网页</span></span><br><span class=\"line\">hexo s \t\t\t\t<span class=\"comment\"># 打开本地服务器</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以看到如下的界面<br><img src=\"/pictures/github-pages-hexo/2022.10.23.14.48.30.png\"></p>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><p><strong>发布到 Github Pages 上面</strong></p>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><p>注册 Github 帐号，有帐号了不用注册</p>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><p>新建一个空仓库，暂时不要创建 README.md ，而且得确保你的仓库是 public 同时，仓库名一定要是 <strong>用户名.github.io</strong></p>\n<h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><p>在上文提到的 blogs 文件夹下面安装 hexo-deployer-git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><p>在刚才的博客根目录中的站点配置文件 “_config.yml” ，设置为你的个人仓库名，branch 与你的 git 主分支对应<br><img src=\"/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg\"><br><img src=\"/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png\"></p>\n<h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6><p>开始推送内容到 Github 上去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean \t\t\t\t\t<span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo g     \t\t\t\t\t<span class=\"comment\"># 将 md 生成 html</span></span><br><span class=\"line\">git add -A \t\t\t\t\t<span class=\"comment\"># 添加到 git 缓冲区</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first time&quot;</span>\t\t\t<span class=\"comment\"># 提交所有更改</span></span><br><span class=\"line\">hexo d     \t\t\t\t\t<span class=\"comment\"># 推送到远程</span></span><br></pre></td></tr></table></figure>\n<p>稍等片刻，就可以访问 https:&#x2F;&#x2F;用户名.github.io 了</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Github Pages 可以为个人博客提供支持，Hexo 可以让 Github Pages 更加美观和提供本地预览，而不需要上传到 Github Pages 之后再看到效果</strong></p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><p><strong>安装准备</strong>（本地）：</p>\n<ul>\n<li>git</li>\n<li>npm</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p><strong>配置 Git</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;github 用户名&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;github 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Github 已经不支持密码登录，需要复杂一点的步骤去验证</p>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ol>\n<li>到个人中心-设置-setting</li>\n<li><img src=\"/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png\"></li>\n<li><img src=\"/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png\"><br><img src=\"/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png\"></li>\n<li>选 classic 的 token 而不是 beta 的，因为 classic 可以永久</li>\n<li><img src=\"/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png\"><br><img src=\"/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png\"></li>\n<li>点击 generate token按钮</li>\n</ol>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><p>然后 生成了token 一定要复制，不然刷新浏览器就没了</p>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><p>拿到token以后再去git push&#x2F;clone ，password就是输入刚才复制的token</p>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><p><strong>Hexo 安装（本地全局）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>新建一个文件夹（我的是blogs）用于存放你的博客，然后进入该文件夹，并用如下命令进行初始化并安装必备组件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init </span><br><span class=\"line\">hexo init .</span><br></pre></td></tr></table></figure>\n<p>初始化后，目录结构如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\"> ├── _config.yml \t<span class=\"comment\"># 网站配置信息</span></span><br><span class=\"line\"> ├── package.json \t<span class=\"comment\"># 应用程序信息</span></span><br><span class=\"line\"> ├── scaffolds\t\t<span class=\"comment\"># 模板文件夹</span></span><br><span class=\"line\"> ├── <span class=\"built_in\">source</span> \t\t<span class=\"comment\"># 存放用户资源</span></span><br><span class=\"line\"> |   ├── _drafts</span><br><span class=\"line\"> |   └── _posts\t\t<span class=\"comment\"># 存放个人博客</span></span><br><span class=\"line\"> └── themes \t\t<span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></table></figure>\n<p>然后输入如下命令，然后在浏览器中打开 <a href=\"http://localhost:4000/\">http://localhost:4000</a> ，就可以预览原始网站</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&#x27;博客名&#x27;</span> \t\t<span class=\"comment\"># 新建博客</span></span><br><span class=\"line\">hexo g \t\t\t\t<span class=\"comment\"># 生成静态网页</span></span><br><span class=\"line\">hexo s \t\t\t\t<span class=\"comment\"># 打开本地服务器</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以看到如下的界面<br><img src=\"/pictures/github-pages-hexo/2022.10.23.14.48.30.png\"></p>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><p><strong>发布到 Github Pages 上面</strong></p>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><p>注册 Github 帐号，有帐号了不用注册</p>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><p>新建一个空仓库，暂时不要创建 README.md ，而且得确保你的仓库是 public 同时，仓库名一定要是 <strong>用户名.github.io</strong></p>\n<h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><p>在上文提到的 blogs 文件夹下面安装 hexo-deployer-git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><p>在刚才的博客根目录中的站点配置文件 “_config.yml” ，设置为你的个人仓库名，branch 与你的 git 主分支对应<br><img src=\"/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg\"><br><img src=\"/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png\"></p>\n<h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6><p>开始推送内容到 Github 上去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean \t\t\t\t\t<span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo g     \t\t\t\t\t<span class=\"comment\"># 将 md 生成 html</span></span><br><span class=\"line\">git add -A \t\t\t\t\t<span class=\"comment\"># 添加到 git 缓冲区</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first time&quot;</span>\t\t\t<span class=\"comment\"># 提交所有更改</span></span><br><span class=\"line\">hexo d     \t\t\t\t\t<span class=\"comment\"># 推送到远程</span></span><br></pre></td></tr></table></figure>\n<p>稍等片刻，就可以访问 https:&#x2F;&#x2F;用户名.github.io 了</p>\n"},{"title":"Hexo 基本美化","date":"2022-10-23T08:08:56.000Z","_content":"**首先是顶部背景**，下面是原背景\n\n![](/pictures/hexo-基本美化/2022.10.23.16.14.49.png)\n\n在 blogs 文件夹（顶层工程文件目录）里面搜索 banner.jpg\n\n![](/pictures/hexo-基本美化/2022.10.23.16.17.17.png)\n\n把这两个 banner.jpg 替换成自己图片，替换之后名字还得是 banner.jpg\n\n![](/pictures/hexo-基本美化/2022.10.23.16.19.21.png)\n\n###### \n![](/pictures/hexo-基本美化/2022.10.23.16.22.22.png)\n\n######\n**定义自己的信息**，定义在顶层工程目录的 \"_config.yml\" 里面\n\n![](/pictures/hexo-基本美化/2022.10.23.16.25.30.png)\n\n###### \n![](/pictures/hexo-基本美化/2022.10.23.16.27.38.png)\n\n######\n**美化代码块**，原本的代码块没有 margin-left 和 margin-right ，不好看\n![](/pictures/hexo-基本美化/2022.10.23.16.29.42.png)\n\n在顶层工程文件目录里面，搜索 highlight.styl\n\n![](/pictures/hexo-基本美化/2022.10.23.16.32.39.png)\n\n###### \n![](/pictures/hexo-基本美化/2022.10.23.16.33.18.png)\n\n这两个 css 文件是一样的，要修改的地方也一样\n\n![](/pictures/hexo-基本美化/2022.10.23.16.35.28.png)\n\n注释掉原来的 margin ，换成 \"margin:1px\" 就可以\n\n![](/pictures/hexo-基本美化/2022.10.23.16.36.27.png)\n\n效果很 nice\n\n![](/pictures/hexo-基本美化/2022.10.23.16.38.27.png)\n\n######\n**最终效果**\n\n![](/pictures/hexo-基本美化/2022.10.23.16.41.32.png)\n","source":"_posts/Hexo-基本美化.md","raw":"---\ntitle: Hexo 基本美化\ndate: 2022-10-23 16:08:56\ncategories: Hexo-Usage\ntags:\n\t- Hexo\n---\n**首先是顶部背景**，下面是原背景\n\n![](/pictures/hexo-基本美化/2022.10.23.16.14.49.png)\n\n在 blogs 文件夹（顶层工程文件目录）里面搜索 banner.jpg\n\n![](/pictures/hexo-基本美化/2022.10.23.16.17.17.png)\n\n把这两个 banner.jpg 替换成自己图片，替换之后名字还得是 banner.jpg\n\n![](/pictures/hexo-基本美化/2022.10.23.16.19.21.png)\n\n###### \n![](/pictures/hexo-基本美化/2022.10.23.16.22.22.png)\n\n######\n**定义自己的信息**，定义在顶层工程目录的 \"_config.yml\" 里面\n\n![](/pictures/hexo-基本美化/2022.10.23.16.25.30.png)\n\n###### \n![](/pictures/hexo-基本美化/2022.10.23.16.27.38.png)\n\n######\n**美化代码块**，原本的代码块没有 margin-left 和 margin-right ，不好看\n![](/pictures/hexo-基本美化/2022.10.23.16.29.42.png)\n\n在顶层工程文件目录里面，搜索 highlight.styl\n\n![](/pictures/hexo-基本美化/2022.10.23.16.32.39.png)\n\n###### \n![](/pictures/hexo-基本美化/2022.10.23.16.33.18.png)\n\n这两个 css 文件是一样的，要修改的地方也一样\n\n![](/pictures/hexo-基本美化/2022.10.23.16.35.28.png)\n\n注释掉原来的 margin ，换成 \"margin:1px\" 就可以\n\n![](/pictures/hexo-基本美化/2022.10.23.16.36.27.png)\n\n效果很 nice\n\n![](/pictures/hexo-基本美化/2022.10.23.16.38.27.png)\n\n######\n**最终效果**\n\n![](/pictures/hexo-基本美化/2022.10.23.16.41.32.png)\n","slug":"Hexo-基本美化","published":1,"updated":"2022-10-23T09:27:44.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qho0004g7i5986qhm89","content":"<p><strong>首先是顶部背景</strong>，下面是原背景</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.14.49.png\"></p>\n<p>在 blogs 文件夹（顶层工程文件目录）里面搜索 banner.jpg</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.17.17.png\"></p>\n<p>把这两个 banner.jpg 替换成自己图片，替换之后名字还得是 banner.jpg</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.19.21.png\"></p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.22.22.png\"></p>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p><strong>定义自己的信息</strong>，定义在顶层工程目录的 “_config.yml” 里面</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.25.30.png\"></p>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.27.38.png\"></p>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><p><strong>美化代码块</strong>，原本的代码块没有 margin-left 和 margin-right ，不好看<br><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.29.42.png\"></p>\n<p>在顶层工程文件目录里面，搜索 highlight.styl</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.32.39.png\"></p>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.33.18.png\"></p>\n<p>这两个 css 文件是一样的，要修改的地方也一样</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.35.28.png\"></p>\n<p>注释掉原来的 margin ，换成 “margin:1px” 就可以</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.36.27.png\"></p>\n<p>效果很 nice</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.38.27.png\"></p>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><p><strong>最终效果</strong></p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.41.32.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>首先是顶部背景</strong>，下面是原背景</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.14.49.png\"></p>\n<p>在 blogs 文件夹（顶层工程文件目录）里面搜索 banner.jpg</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.17.17.png\"></p>\n<p>把这两个 banner.jpg 替换成自己图片，替换之后名字还得是 banner.jpg</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.19.21.png\"></p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.22.22.png\"></p>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p><strong>定义自己的信息</strong>，定义在顶层工程目录的 “_config.yml” 里面</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.25.30.png\"></p>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.27.38.png\"></p>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><p><strong>美化代码块</strong>，原本的代码块没有 margin-left 和 margin-right ，不好看<br><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.29.42.png\"></p>\n<p>在顶层工程文件目录里面，搜索 highlight.styl</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.32.39.png\"></p>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.33.18.png\"></p>\n<p>这两个 css 文件是一样的，要修改的地方也一样</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.35.28.png\"></p>\n<p>注释掉原来的 margin ，换成 “margin:1px” 就可以</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.36.27.png\"></p>\n<p>效果很 nice</p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.38.27.png\"></p>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><p><strong>最终效果</strong></p>\n<p><img src=\"/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.41.32.png\"></p>\n"},{"title":"Hexo 文档分类 图片存储","date":"2022-10-23T11:16:39.000Z","_content":"\n**建立分类**\n1. 输入 hexo new page 'categories'\n######  \n2. 在顶层工程目录的 source 目录中會看到 categories 文件夹\n######   \n3. 修改 categories 中的 index.md 开头，增加一些东西使得变成如下内容\n\n\t```markdown\n\t---\n\ttitle: categories\n\tdate: 2022-10-23 13:30:15\n\ttype: \"categories\"\n\t---\n\t```\n4. 若要把 \"_post\" 內的其中一份文档添加到 \"Hexo-Usage\" categories 里面，在这个文档头部插入 categories: Hexo-Usage\n\n\t```markdown\n\t---\n\ttitle: Hexo 基本美化\n\tdate: 2022-10-23 16:08:56\n\tcategories: Hexo-Usage\n\t---\n\t```\n5. 重新生成静态网页，可以看到导航栏多了一个分类选项\n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.19.31.09.png)\n\n######   \n\n**建立标签**\n\n和建立分类一样，只不过内容改变一点\n######   \n1. 输入 hexo new page 'tags'\n######   \n2. 在顶层工程目录的 source 目录中會看到 tags 文件夹\n######   \n3. 修改 tags 中的 index.md 开头，增加一些东西使得变成如下内容\n\t```\n\t---\n\ttitle: tags\n\tdate: 2022-10-23 13:35:49\n\ttype: \"tags\"\n\t---\n\t```\n4. 若要把 \"_post\" 內的其中一份文档添加到 \"Hexo\" tag 里面，在这个文档头部插入 tags: Hexo\n\t```\n\t---\n\ttitle: Hexo 文档分类 图片存储\n\tdate: 2022-10-23 19:16:39\n\tcategories: Hexo-Usage\n\ttags: Hexo\n\t---\n\t\n\t```\n5. 插入多个 tags ，记得 tab 缩进\n\t```\n\t---\n\ttitle: Hexo 文档分类 图片存储\n\tdate: 2022-10-23 19:16:39\n\tcategories: Hexo-Usage\n\ttags:\n\t\t- Hexo\n\t\t- Github\n\t---\n\t```\n6. 重新生成静态网页，可以看到导航栏多了一个标签选项\n###### \n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.19.50.12.png)\n\n**文档里面插入图片**\n\n使用Hexo创建文件搭建博客时，会遇到图片插图，以及插入的图片无法显示的问题\n######  \n\n1. 在 Hexo 的目录（也就是顶层工程目录） source 中创建一个图片文件夹，例如 pictures\n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.19.55.54.png)\n\n######  \n2. 把要插入的图片文件放到该目录下面，在文档中正常使用 markdown 的语法插入图片即可，例如\n\n\t```\n\t![img](ictures/xxx.png)\n\t```\n\n3. 当然，你还可以在 pictures 再创建目录以区分不同文章的图片\n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.20.00.11.png)\n\n4. 这个时候在文章里面引用的方式就是\n\n\t```\n\t![img](ictures/hexo-文档分类-图片存储/xxx.png)\n\t```\n\n记住在 \"pictures\" 前面有一个 \"/\" ，表示根目录的意思，因为对于 hexo 来说它的资源文件的根目录就是 source ，当然也可以修改 \"_config.yml\" 改变这个配置，下图是 hexo 框架文件夹描述\n\n![](/pictures/hexo-文档分类-图片存储/20191220164252492.png)\n\n\n","source":"_posts/Hexo-文档分类-图片存储.md","raw":"---\ntitle: Hexo 文档分类 图片存储\ndate: 2022-10-23 19:16:39\ncategories: Hexo-Usage\ntags:\n\t- Hexo\n---\n\n**建立分类**\n1. 输入 hexo new page 'categories'\n######  \n2. 在顶层工程目录的 source 目录中會看到 categories 文件夹\n######   \n3. 修改 categories 中的 index.md 开头，增加一些东西使得变成如下内容\n\n\t```markdown\n\t---\n\ttitle: categories\n\tdate: 2022-10-23 13:30:15\n\ttype: \"categories\"\n\t---\n\t```\n4. 若要把 \"_post\" 內的其中一份文档添加到 \"Hexo-Usage\" categories 里面，在这个文档头部插入 categories: Hexo-Usage\n\n\t```markdown\n\t---\n\ttitle: Hexo 基本美化\n\tdate: 2022-10-23 16:08:56\n\tcategories: Hexo-Usage\n\t---\n\t```\n5. 重新生成静态网页，可以看到导航栏多了一个分类选项\n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.19.31.09.png)\n\n######   \n\n**建立标签**\n\n和建立分类一样，只不过内容改变一点\n######   \n1. 输入 hexo new page 'tags'\n######   \n2. 在顶层工程目录的 source 目录中會看到 tags 文件夹\n######   \n3. 修改 tags 中的 index.md 开头，增加一些东西使得变成如下内容\n\t```\n\t---\n\ttitle: tags\n\tdate: 2022-10-23 13:35:49\n\ttype: \"tags\"\n\t---\n\t```\n4. 若要把 \"_post\" 內的其中一份文档添加到 \"Hexo\" tag 里面，在这个文档头部插入 tags: Hexo\n\t```\n\t---\n\ttitle: Hexo 文档分类 图片存储\n\tdate: 2022-10-23 19:16:39\n\tcategories: Hexo-Usage\n\ttags: Hexo\n\t---\n\t\n\t```\n5. 插入多个 tags ，记得 tab 缩进\n\t```\n\t---\n\ttitle: Hexo 文档分类 图片存储\n\tdate: 2022-10-23 19:16:39\n\tcategories: Hexo-Usage\n\ttags:\n\t\t- Hexo\n\t\t- Github\n\t---\n\t```\n6. 重新生成静态网页，可以看到导航栏多了一个标签选项\n###### \n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.19.50.12.png)\n\n**文档里面插入图片**\n\n使用Hexo创建文件搭建博客时，会遇到图片插图，以及插入的图片无法显示的问题\n######  \n\n1. 在 Hexo 的目录（也就是顶层工程目录） source 中创建一个图片文件夹，例如 pictures\n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.19.55.54.png)\n\n######  \n2. 把要插入的图片文件放到该目录下面，在文档中正常使用 markdown 的语法插入图片即可，例如\n\n\t```\n\t![img](ictures/xxx.png)\n\t```\n\n3. 当然，你还可以在 pictures 再创建目录以区分不同文章的图片\n\n![](/pictures/hexo-文档分类-图片存储/2022.10.23.20.00.11.png)\n\n4. 这个时候在文章里面引用的方式就是\n\n\t```\n\t![img](ictures/hexo-文档分类-图片存储/xxx.png)\n\t```\n\n记住在 \"pictures\" 前面有一个 \"/\" ，表示根目录的意思，因为对于 hexo 来说它的资源文件的根目录就是 source ，当然也可以修改 \"_config.yml\" 改变这个配置，下图是 hexo 框架文件夹描述\n\n![](/pictures/hexo-文档分类-图片存储/20191220164252492.png)\n\n\n","slug":"Hexo-文档分类-图片存储","published":1,"updated":"2022-11-22T12:45:43.880Z","_id":"cla6l8qho0005g7i54ey869p7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>建立分类</strong></p>\n<ol>\n<li>输入 hexo new page ‘categories’</li>\n</ol>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"2\">\n<li>在顶层工程目录的 source 目录中會看到 categories 文件夹</li>\n</ol>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"3\">\n<li><p>修改 categories 中的 index.md 开头，增加一些东西使得变成如下内容</p>\n <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2022-10-23 13:30:15</span><br><span class=\"line\"><span class=\"section\">type: &quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></li>\n<li><p>若要把 “_post” 內的其中一份文档添加到 “Hexo-Usage” categories 里面，在这个文档头部插入 categories: Hexo-Usage</p>\n <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 基本美化</span><br><span class=\"line\">date: 2022-10-23 16:08:56</span><br><span class=\"line\"><span class=\"section\">categories: Hexo-Usage</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重新生成静态网页，可以看到导航栏多了一个分类选项</p>\n</li>\n</ol>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.31.09.png\"></p>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><p><strong>建立标签</strong></p>\n<p>和建立分类一样，只不过内容改变一点</p>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ol>\n<li>输入 hexo new page ‘tags’</li>\n</ol>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"2\">\n<li>在顶层工程目录的 source 目录中會看到 tags 文件夹</li>\n</ol>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"3\">\n<li>修改 tags 中的 index.md 开头，增加一些东西使得变成如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2022-10-23 13:35:49</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li>若要把 “_post” 內的其中一份文档添加到 “Hexo” tag 里面，在这个文档头部插入 tags: Hexo <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 文档分类 图片存储</span><br><span class=\"line\">date: 2022-10-23 19:16:39</span><br><span class=\"line\">categories: Hexo-Usage</span><br><span class=\"line\">tags: Hexo</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>插入多个 tags ，记得 tab 缩进 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 文档分类 图片存储</span><br><span class=\"line\">date: 2022-10-23 19:16:39</span><br><span class=\"line\">categories: Hexo-Usage</span><br><span class=\"line\">tags:</span><br><span class=\"line\">\t- Hexo</span><br><span class=\"line\">\t- Github</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li>重新生成静态网页，可以看到导航栏多了一个标签选项</li>\n</ol>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.50.12.png\"></p>\n<p><strong>文档里面插入图片</strong></p>\n<p>使用Hexo创建文件搭建博客时，会遇到图片插图，以及插入的图片无法显示的问题</p>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><ol>\n<li>在 Hexo 的目录（也就是顶层工程目录） source 中创建一个图片文件夹，例如 pictures</li>\n</ol>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.55.54.png\"></p>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"2\">\n<li><p>把要插入的图片文件放到该目录下面，在文档中正常使用 markdown 的语法插入图片即可，例如</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![img](ictures/xxx.png)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然，你还可以在 pictures 再创建目录以区分不同文章的图片</p>\n</li>\n</ol>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.20.00.11.png\"></p>\n<ol start=\"4\">\n<li><p>这个时候在文章里面引用的方式就是</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![img](ictures/hexo-文档分类-图片存储/xxx.png)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>记住在 “pictures” 前面有一个 “&#x2F;“ ，表示根目录的意思，因为对于 hexo 来说它的资源文件的根目录就是 source ，当然也可以修改 “_config.yml” 改变这个配置，下图是 hexo 框架文件夹描述</p>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/20191220164252492.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>建立分类</strong></p>\n<ol>\n<li>输入 hexo new page ‘categories’</li>\n</ol>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"2\">\n<li>在顶层工程目录的 source 目录中會看到 categories 文件夹</li>\n</ol>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"3\">\n<li><p>修改 categories 中的 index.md 开头，增加一些东西使得变成如下内容</p>\n <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2022-10-23 13:30:15</span><br><span class=\"line\"><span class=\"section\">type: &quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></li>\n<li><p>若要把 “_post” 內的其中一份文档添加到 “Hexo-Usage” categories 里面，在这个文档头部插入 categories: Hexo-Usage</p>\n <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 基本美化</span><br><span class=\"line\">date: 2022-10-23 16:08:56</span><br><span class=\"line\"><span class=\"section\">categories: Hexo-Usage</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重新生成静态网页，可以看到导航栏多了一个分类选项</p>\n</li>\n</ol>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.31.09.png\"></p>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><p><strong>建立标签</strong></p>\n<p>和建立分类一样，只不过内容改变一点</p>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ol>\n<li>输入 hexo new page ‘tags’</li>\n</ol>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"2\">\n<li>在顶层工程目录的 source 目录中會看到 tags 文件夹</li>\n</ol>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"3\">\n<li>修改 tags 中的 index.md 开头，增加一些东西使得变成如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2022-10-23 13:35:49</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li>若要把 “_post” 內的其中一份文档添加到 “Hexo” tag 里面，在这个文档头部插入 tags: Hexo <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 文档分类 图片存储</span><br><span class=\"line\">date: 2022-10-23 19:16:39</span><br><span class=\"line\">categories: Hexo-Usage</span><br><span class=\"line\">tags: Hexo</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>插入多个 tags ，记得 tab 缩进 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 文档分类 图片存储</span><br><span class=\"line\">date: 2022-10-23 19:16:39</span><br><span class=\"line\">categories: Hexo-Usage</span><br><span class=\"line\">tags:</span><br><span class=\"line\">\t- Hexo</span><br><span class=\"line\">\t- Github</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li>重新生成静态网页，可以看到导航栏多了一个标签选项</li>\n</ol>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.50.12.png\"></p>\n<p><strong>文档里面插入图片</strong></p>\n<p>使用Hexo创建文件搭建博客时，会遇到图片插图，以及插入的图片无法显示的问题</p>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><ol>\n<li>在 Hexo 的目录（也就是顶层工程目录） source 中创建一个图片文件夹，例如 pictures</li>\n</ol>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.55.54.png\"></p>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><ol start=\"2\">\n<li><p>把要插入的图片文件放到该目录下面，在文档中正常使用 markdown 的语法插入图片即可，例如</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![img](ictures/xxx.png)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然，你还可以在 pictures 再创建目录以区分不同文章的图片</p>\n</li>\n</ol>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.20.00.11.png\"></p>\n<ol start=\"4\">\n<li><p>这个时候在文章里面引用的方式就是</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![img](ictures/hexo-文档分类-图片存储/xxx.png)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>记住在 “pictures” 前面有一个 “&#x2F;“ ，表示根目录的意思，因为对于 hexo 来说它的资源文件的根目录就是 source ，当然也可以修改 “_config.yml” 改变这个配置，下图是 hexo 框架文件夹描述</p>\n<p><img src=\"/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/20191220164252492.png\"></p>\n"},{"title":"Linux 查看硬盘空间","date":"2022-11-05T07:46:02.000Z","_content":"\n```\ndu -sh ./*\n```\n\n","source":"_posts/Linux-查看硬盘空间.md","raw":"---\ntitle: Linux 查看硬盘空间\ndate: 2022-11-05 15:46:02\ntags:\n\t- Linux\n---\n\n```\ndu -sh ./*\n```\n\n","slug":"Linux-查看硬盘空间","published":1,"updated":"2022-11-05T07:48:06.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhp0007g7i5glb42u93","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh ./*</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh ./*</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MARO Distibuted Toolkit","date":"2022-11-04T10:15:29.000Z","_content":"### MARO 三层框架\n\n<img src=\"/pictures/maro-distributed-toolkit/maro_overview.svg\"/>\n\n###### \n\n#### 接下来展示的是第三层 Distibuted toolkit\n\n<img src=\"/pictures/maro-distributed-toolkit/overview.svg\"/>\n\n- MARO Distibuted Toolkit 遵循 message-passing 模式，即不同组件之间的协作基于消息**发送**和**接收**\n- 典型的 **master/worker** 分布式程序通常包含以下步骤\n\n\t- master 会将任务（w/ or w/o data）发送到 worker\n\t- worker 将在其本地计算环境或本地设备中完成任务\n\t- worker 将计算结果返回到 master\n\n<img src=\"/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg\" style=\"zoom:40%\"/>\n\n\t\n- 根据实际需要，主控组件和工作组件之间的通信方式可以是同步的，也可以是异步的\n\n###### \n\n#### 关键部件\n\n<img src=\"/pictures/maro-distributed-toolkit/key_components.svg\"/> \n\n- ##### Comunication\n\n\t- ##### 大致功能预览\n\n\t\t- 提供通用的消息传递接口\n\t\t\t\n\t\t\t- send, receive\n\t\t\t- broadcast\n\t\t\t- scatter \n\t\t\t\n\t\t###### \n\t\t- 通信组件使用**可替换**的通信协议驱动程序来适应不同的通信协议栈\n\t\t\t\n\t\t\t- TCP/IP\n\t\t\t- InfiniBand\n\t\t\n\t\t###### \n\t\t- Peer Discovering\n\t\t\n\t\t- 部分故障恢复\n\t\t\n\t\t- 条件事件自动调度\n\n\t###### \n\n\t- #####  Proxy \n\t\t\n\t\t<img src=\"/pictures/maro-distributed-toolkit/proxy.svg\"/>\n\n\t\t###### \n\t\t\n\t\t- Proxy 提供通信原语的实现，是通信操作接口，是通信组件的主要实体\n\t\t- Proxy 默认使用 ZeroMQ 框架\n\t\t- Proxy 为基于 Redis 的 peer discovering 提供支持\n\t\t- 分布式通信原语常见操作如下\n\t\t\n\t\t\t###### \n\t\t\t\n\t\t\t- **Broadcast**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg\"/>\n\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg\"/>\n\n\t\t\t######\n\t\t\t###### \n\t\t\t###### \n\t\t\t\n\t\t\t- **Scatter**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg\"/>\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **Reduce (强调聚合之后处理)**\n\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png\"/>\n\n\t\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg\"/>\n\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **Gather (单纯聚合没有额外处理)**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg\"/>\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **All Reduce**\n\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg\"/>\n\t\t\t\n\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **All Gather**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg\"/>\n\n\t\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **Reduce Scatter**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp\"/>\n\n\t\t\t######\n\t\t\t######\n\t\t\t###### \n\n\t\t\t- **All to All**\n\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg\"/>\n\n\t###### \n\n\t- **Message**\n\t\n\t\t- 用于打包组件之间的通信内容，消息实例的主要属性包括\n\t\t\n\t\t\t- tag：自定义属性，可用于通过 **conditional event register table** 实现自动调度逻辑\n\t\t\t- source：message 发送者的别名\n\t\t\t- destination：message 接收者的别名\n\t\t\t- payload：用于远程函数调用的 Python 对象\n\t\t\t- session_id（自动生成）：特定会话的 UUID ，一个会话可能包含多条消息\n\t\t\t- message_id（自动生成）：特定消息的 UUID\n\t\t\t\n\t\t###### \n\t\n\t\t- Example\n\t\t\t\n\t\t\t```python\n\t\t\tfrom maro.communication import Message\n\n\t\t\tmessage = Message(tag=\"check_in\",\n\t\t\t                  source=\"worker_001\",\n\t\t\t                  destination=\"master\",\n\t\t\t                  body=\"\")\n\t\t\t```\n\t\n\t###### \n\t- **Session Message**\n\n\t\t- MARO 为常见的分布式场景提供了两种预定义的会话类型\n\t\t\n\t\t\t- **Task Session**\n\t\t\t\n\t\t\t\t- 存在 master 和 worker 关系\n\t\t\t\t- 用于描述从 master 发送到 worker 的 computing task\n\t\t\t\t\t\n\t\t\t\t\t- master 将 task 发送给 worker\n\t\t\t\t\t- 一旦 worker 收到 task ，worker 就开始执行 task\n\t\t\t\t\t- worker 将 computing result 返回给 master\n\t\t\t\n\t\t\t###### \n\n\t\t\t- **Notification Session**\n\t\t\t\n\t\t\t\t- sender 和 receiver 关系\n\t\t\t\t- 用于信息同步\n\t\t\t\t\t\n\t\t\t\t\t- sender 发送 notification message\n\t\t\t\t\t- receiver 接收 notification message\n\t\t\n\t\t###### \n\n\t\t- session 的每个阶段由 proxy 在内部维护\n\t\t- Example\n\t\t```python\n\t\tfrom maro.communication import SessionMessage, SessionType\n\t\t\n\t\ttask_message = SessionMessage(tag=\"sum\",\n\t\t                              source=\"master\",\n\t\t                              destination=\"worker_001\",\n\t\t                              body=[0, 1, 2, ...],\n\t\t                              session_type=SessionType.TASK)\n\t\t\n\t\tnotification_message = SessionMessage(tag=\"check_out\",\n\t\t                                      source=\"worker_001\",\n\t\t                                      destination=\"master\",\n\t\t                                      body=\"\",\n\t\t                                      session_type=SessionType.NOTIFICATION)\n\t\t``` \n\n\t###### \n\n\t- ##### MARO 通信原语实际接口\n\n\t\t\t\n\t\t- receive：用于持续接收消息\n\t\treceive_by_id：仅接收具有给定 session ID 的消息\n\t\t- send：单播，这是一种阻塞、一对一的发送模式，监视并收集来自远程对等方的回复消息   \n\t\t- isend：非阻塞版的 send ，将立即返回 message session ID，该 ID 可由  receive_by_id 使用\n\t\t- scatter：send 的高级版本，用于向 peer 发送消息，并监视和收集来自 peer 的回复消息，不是真正的多播，每条消息都会经过完整的 TCP/IP 堆栈（ZeroMQ driver），如果要发送的消息完全相同，并且想要更好的性能，请改用 broadcast 接口\n\t\t- iscatter：非阻塞版本的 scatter ，message session ID 将立即返回，可由 receive_by_id 使用\n\t\t- broadcast：阻塞，用于向所有订阅者广播消息，将监视并收集所有订阅者的回复消息\n\t\t- ibroadcast：非阻塞版本的 broadcast ，相关 message session ID 将立即返回，可供 receive_by_id 使用\n\n\t###### \n\t\n\t- ##### Conditional Event Register Table\n\t\n\t\t- 提供消息自动发送机制\n\t\t- 通过将 conditional event 和相关的 handler function 注册到注册表中，当 conditional event 满足时，handler function 将与接收到的消息一起自动执行\n\n\t\t###### \n\t\t<img src=\"/pictures/maro-distributed-toolkit/register_table.register.svg\"/>\n\t\t\n\t\t###### \n\n\t\t- conditional event 用于声明自动触发相关 handler function 所需的消息组\n\t\t- unit event 是条件事件中的最小组件，声明格式分三段\n\t\t\t\n\t\t\t- source：用于声明所需的消息源\n\t\t\t- tag：消息实例的属性\n\t\t\t- amount：所需的消息实例量\n\n\t\t\t```python\n\t\t\tunit_event_abs = \"worker:update:10\"\n\n\t\t\tunit_event_rel = \"worker:update:60%\"\n\t\t\t```\n\n\t\t- AND OR 操作支持更复杂的业务逻辑\n\t\t\t\n\t\t\t```python\n\t\t\tcombined_event_and = (\"worker_01:update:2\",\n                      \"worker_02:update:3\",\n                      \"AND\")\n\n\t\t\tcombined_event_or = (\"worker_03:update:1\",\n\t\t\t                      \"worker_04:update:5\",\n\t\t\t                      \"OR\")\n\t\t\t\n\t\t\tcombined_event_mix = ((\"worker_01:update:2\", \"worker_02:update:3\", \"AND\"),\n\t\t\t                      \"worker_03:update:1\",\n\t\t\t                      \"OR\")\n\t\t\t```\n\n\t\t- Handler function 是绑定到特定 conditional event 的用户定义的回调函数，当满足事件的条件时，相关消息将被发送到处理程序函数执行\n\n\t\t\t<img src=\"/pictures/maro-distributed-toolkit/register_table.trigger.svg\"/>\n\n\t\t\t```python\n\t\t\t# A common handler function signature\n\t\t\tdef handler(that, proxy, messages):\n\t\t\t    \"\"\"\n\t\t\t        Conditional event handler function.\n\t\t\t\n\t\t\t        Args:\n\t\t\t            that: local instance reference, which needs to be operated.\n\t\t\t            proxy: the proxy reference for remote communication.\n\t\t\t            messages: received messages.\n\t\t\t    \"\"\"\n\t\t\t    pass\n\t\t\t```\n\n\t###### \n\n\t- ##### Distributed Decorator\n\n\t\t- 从本地函数类生成分布式 worker 类的帮助程序\n\t\t\t\n\t\t\t```python\n\t\t\tfrom maro.communication import dist, Proxy\n\n\t\t\t# Initialize proxy instance for remote communication.\n\t\t\tproxy = Proxy(group_name=\"master-worker\",\n\t\t\t              component_type=\"worker\",\n\t\t\t              expected_peers=[(\"master\", 1)])\n\t\t\t\n\t\t\t# Declare the trigger condition of rollout event.\n\t\t\trollout_event = \"master:rollout:1\"\n\t\t\t\n\t\t\t# Implement rollout event handler logic.\n\t\t\tdef on_rollout(that, proxy, messages):\n\t\t\t    pass\n\t\t\t\n\t\t\t# Assemble event-handler directory.\n\t\t\thandler_dict = {rollout_event: on_rollout}\n\t\t\t\n\t\t\t# Convert a local functional class to a distributed one.\n\t\t\t@dist(proxy, handler_dict)\n\t\t\tclass Worker:\n\t\t\t    def __init__(self):\n\t\t\t        pass\n\t\t\t```\n\n\t\n\n<br/>\n<h3 style=\"display:flex\">\n<span align=\"left\" style=\"width:50%\">\nPRE : {% post_link 初识-MARO 初识 MARO %}\n</span>\n\n<span align=\"right\" style=\"width:50%\">\nNEXT : {% post_link MARO-VM-调度 MARO VM 调度%}\n</span>\n</h3>\n","source":"_posts/MARO-Distibuted-toolkit.md","raw":"---\ntitle: MARO Distibuted Toolkit\ndate: 2022-11-04 18:15:29\ntags:\n\t- MARO\n---\n### MARO 三层框架\n\n<img src=\"/pictures/maro-distributed-toolkit/maro_overview.svg\"/>\n\n###### \n\n#### 接下来展示的是第三层 Distibuted toolkit\n\n<img src=\"/pictures/maro-distributed-toolkit/overview.svg\"/>\n\n- MARO Distibuted Toolkit 遵循 message-passing 模式，即不同组件之间的协作基于消息**发送**和**接收**\n- 典型的 **master/worker** 分布式程序通常包含以下步骤\n\n\t- master 会将任务（w/ or w/o data）发送到 worker\n\t- worker 将在其本地计算环境或本地设备中完成任务\n\t- worker 将计算结果返回到 master\n\n<img src=\"/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg\" style=\"zoom:40%\"/>\n\n\t\n- 根据实际需要，主控组件和工作组件之间的通信方式可以是同步的，也可以是异步的\n\n###### \n\n#### 关键部件\n\n<img src=\"/pictures/maro-distributed-toolkit/key_components.svg\"/> \n\n- ##### Comunication\n\n\t- ##### 大致功能预览\n\n\t\t- 提供通用的消息传递接口\n\t\t\t\n\t\t\t- send, receive\n\t\t\t- broadcast\n\t\t\t- scatter \n\t\t\t\n\t\t###### \n\t\t- 通信组件使用**可替换**的通信协议驱动程序来适应不同的通信协议栈\n\t\t\t\n\t\t\t- TCP/IP\n\t\t\t- InfiniBand\n\t\t\n\t\t###### \n\t\t- Peer Discovering\n\t\t\n\t\t- 部分故障恢复\n\t\t\n\t\t- 条件事件自动调度\n\n\t###### \n\n\t- #####  Proxy \n\t\t\n\t\t<img src=\"/pictures/maro-distributed-toolkit/proxy.svg\"/>\n\n\t\t###### \n\t\t\n\t\t- Proxy 提供通信原语的实现，是通信操作接口，是通信组件的主要实体\n\t\t- Proxy 默认使用 ZeroMQ 框架\n\t\t- Proxy 为基于 Redis 的 peer discovering 提供支持\n\t\t- 分布式通信原语常见操作如下\n\t\t\n\t\t\t###### \n\t\t\t\n\t\t\t- **Broadcast**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg\"/>\n\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg\"/>\n\n\t\t\t######\n\t\t\t###### \n\t\t\t###### \n\t\t\t\n\t\t\t- **Scatter**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg\"/>\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **Reduce (强调聚合之后处理)**\n\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png\"/>\n\n\t\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg\"/>\n\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **Gather (单纯聚合没有额外处理)**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg\"/>\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **All Reduce**\n\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg\"/>\n\t\t\t\n\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **All Gather**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg\"/>\n\n\t\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp\"/>\n\n\t\t\t###### \n\t\t\t###### \n\t\t\t###### \n\n\t\t\t- **Reduce Scatter**\n\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp\"/>\n\n\t\t\t######\n\t\t\t######\n\t\t\t###### \n\n\t\t\t- **All to All**\n\t\t\t\n\t\t\t\t<img src=\"/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg\"/>\n\n\t###### \n\n\t- **Message**\n\t\n\t\t- 用于打包组件之间的通信内容，消息实例的主要属性包括\n\t\t\n\t\t\t- tag：自定义属性，可用于通过 **conditional event register table** 实现自动调度逻辑\n\t\t\t- source：message 发送者的别名\n\t\t\t- destination：message 接收者的别名\n\t\t\t- payload：用于远程函数调用的 Python 对象\n\t\t\t- session_id（自动生成）：特定会话的 UUID ，一个会话可能包含多条消息\n\t\t\t- message_id（自动生成）：特定消息的 UUID\n\t\t\t\n\t\t###### \n\t\n\t\t- Example\n\t\t\t\n\t\t\t```python\n\t\t\tfrom maro.communication import Message\n\n\t\t\tmessage = Message(tag=\"check_in\",\n\t\t\t                  source=\"worker_001\",\n\t\t\t                  destination=\"master\",\n\t\t\t                  body=\"\")\n\t\t\t```\n\t\n\t###### \n\t- **Session Message**\n\n\t\t- MARO 为常见的分布式场景提供了两种预定义的会话类型\n\t\t\n\t\t\t- **Task Session**\n\t\t\t\n\t\t\t\t- 存在 master 和 worker 关系\n\t\t\t\t- 用于描述从 master 发送到 worker 的 computing task\n\t\t\t\t\t\n\t\t\t\t\t- master 将 task 发送给 worker\n\t\t\t\t\t- 一旦 worker 收到 task ，worker 就开始执行 task\n\t\t\t\t\t- worker 将 computing result 返回给 master\n\t\t\t\n\t\t\t###### \n\n\t\t\t- **Notification Session**\n\t\t\t\n\t\t\t\t- sender 和 receiver 关系\n\t\t\t\t- 用于信息同步\n\t\t\t\t\t\n\t\t\t\t\t- sender 发送 notification message\n\t\t\t\t\t- receiver 接收 notification message\n\t\t\n\t\t###### \n\n\t\t- session 的每个阶段由 proxy 在内部维护\n\t\t- Example\n\t\t```python\n\t\tfrom maro.communication import SessionMessage, SessionType\n\t\t\n\t\ttask_message = SessionMessage(tag=\"sum\",\n\t\t                              source=\"master\",\n\t\t                              destination=\"worker_001\",\n\t\t                              body=[0, 1, 2, ...],\n\t\t                              session_type=SessionType.TASK)\n\t\t\n\t\tnotification_message = SessionMessage(tag=\"check_out\",\n\t\t                                      source=\"worker_001\",\n\t\t                                      destination=\"master\",\n\t\t                                      body=\"\",\n\t\t                                      session_type=SessionType.NOTIFICATION)\n\t\t``` \n\n\t###### \n\n\t- ##### MARO 通信原语实际接口\n\n\t\t\t\n\t\t- receive：用于持续接收消息\n\t\treceive_by_id：仅接收具有给定 session ID 的消息\n\t\t- send：单播，这是一种阻塞、一对一的发送模式，监视并收集来自远程对等方的回复消息   \n\t\t- isend：非阻塞版的 send ，将立即返回 message session ID，该 ID 可由  receive_by_id 使用\n\t\t- scatter：send 的高级版本，用于向 peer 发送消息，并监视和收集来自 peer 的回复消息，不是真正的多播，每条消息都会经过完整的 TCP/IP 堆栈（ZeroMQ driver），如果要发送的消息完全相同，并且想要更好的性能，请改用 broadcast 接口\n\t\t- iscatter：非阻塞版本的 scatter ，message session ID 将立即返回，可由 receive_by_id 使用\n\t\t- broadcast：阻塞，用于向所有订阅者广播消息，将监视并收集所有订阅者的回复消息\n\t\t- ibroadcast：非阻塞版本的 broadcast ，相关 message session ID 将立即返回，可供 receive_by_id 使用\n\n\t###### \n\t\n\t- ##### Conditional Event Register Table\n\t\n\t\t- 提供消息自动发送机制\n\t\t- 通过将 conditional event 和相关的 handler function 注册到注册表中，当 conditional event 满足时，handler function 将与接收到的消息一起自动执行\n\n\t\t###### \n\t\t<img src=\"/pictures/maro-distributed-toolkit/register_table.register.svg\"/>\n\t\t\n\t\t###### \n\n\t\t- conditional event 用于声明自动触发相关 handler function 所需的消息组\n\t\t- unit event 是条件事件中的最小组件，声明格式分三段\n\t\t\t\n\t\t\t- source：用于声明所需的消息源\n\t\t\t- tag：消息实例的属性\n\t\t\t- amount：所需的消息实例量\n\n\t\t\t```python\n\t\t\tunit_event_abs = \"worker:update:10\"\n\n\t\t\tunit_event_rel = \"worker:update:60%\"\n\t\t\t```\n\n\t\t- AND OR 操作支持更复杂的业务逻辑\n\t\t\t\n\t\t\t```python\n\t\t\tcombined_event_and = (\"worker_01:update:2\",\n                      \"worker_02:update:3\",\n                      \"AND\")\n\n\t\t\tcombined_event_or = (\"worker_03:update:1\",\n\t\t\t                      \"worker_04:update:5\",\n\t\t\t                      \"OR\")\n\t\t\t\n\t\t\tcombined_event_mix = ((\"worker_01:update:2\", \"worker_02:update:3\", \"AND\"),\n\t\t\t                      \"worker_03:update:1\",\n\t\t\t                      \"OR\")\n\t\t\t```\n\n\t\t- Handler function 是绑定到特定 conditional event 的用户定义的回调函数，当满足事件的条件时，相关消息将被发送到处理程序函数执行\n\n\t\t\t<img src=\"/pictures/maro-distributed-toolkit/register_table.trigger.svg\"/>\n\n\t\t\t```python\n\t\t\t# A common handler function signature\n\t\t\tdef handler(that, proxy, messages):\n\t\t\t    \"\"\"\n\t\t\t        Conditional event handler function.\n\t\t\t\n\t\t\t        Args:\n\t\t\t            that: local instance reference, which needs to be operated.\n\t\t\t            proxy: the proxy reference for remote communication.\n\t\t\t            messages: received messages.\n\t\t\t    \"\"\"\n\t\t\t    pass\n\t\t\t```\n\n\t###### \n\n\t- ##### Distributed Decorator\n\n\t\t- 从本地函数类生成分布式 worker 类的帮助程序\n\t\t\t\n\t\t\t```python\n\t\t\tfrom maro.communication import dist, Proxy\n\n\t\t\t# Initialize proxy instance for remote communication.\n\t\t\tproxy = Proxy(group_name=\"master-worker\",\n\t\t\t              component_type=\"worker\",\n\t\t\t              expected_peers=[(\"master\", 1)])\n\t\t\t\n\t\t\t# Declare the trigger condition of rollout event.\n\t\t\trollout_event = \"master:rollout:1\"\n\t\t\t\n\t\t\t# Implement rollout event handler logic.\n\t\t\tdef on_rollout(that, proxy, messages):\n\t\t\t    pass\n\t\t\t\n\t\t\t# Assemble event-handler directory.\n\t\t\thandler_dict = {rollout_event: on_rollout}\n\t\t\t\n\t\t\t# Convert a local functional class to a distributed one.\n\t\t\t@dist(proxy, handler_dict)\n\t\t\tclass Worker:\n\t\t\t    def __init__(self):\n\t\t\t        pass\n\t\t\t```\n\n\t\n\n<br/>\n<h3 style=\"display:flex\">\n<span align=\"left\" style=\"width:50%\">\nPRE : {% post_link 初识-MARO 初识 MARO %}\n</span>\n\n<span align=\"right\" style=\"width:50%\">\nNEXT : {% post_link MARO-VM-调度 MARO VM 调度%}\n</span>\n</h3>\n","slug":"MARO-Distibuted-toolkit","published":1,"updated":"2022-11-23T12:02:31.026Z","_id":"cla6l8qhr000ag7i593br1zi3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"MARO-三层框架\"><a href=\"#MARO-三层框架\" class=\"headerlink\" title=\"MARO 三层框架\"></a>MARO 三层框架</h3><img src=\"/pictures/maro-distributed-toolkit/maro_overview.svg\"/>\n\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h4 id=\"接下来展示的是第三层-Distibuted-toolkit\"><a href=\"#接下来展示的是第三层-Distibuted-toolkit\" class=\"headerlink\" title=\"接下来展示的是第三层 Distibuted toolkit\"></a>接下来展示的是第三层 Distibuted toolkit</h4><img src=\"/pictures/maro-distributed-toolkit/overview.svg\"/>\n\n<ul>\n<li><p>MARO Distibuted Toolkit 遵循 message-passing 模式，即不同组件之间的协作基于消息<strong>发送</strong>和<strong>接收</strong></p>\n</li>\n<li><p>典型的 <strong>master&#x2F;worker</strong> 分布式程序通常包含以下步骤</p>\n<ul>\n<li>master 会将任务（w&#x2F; or w&#x2F;o data）发送到 worker</li>\n<li>worker 将在其本地计算环境或本地设备中完成任务</li>\n<li>worker 将计算结果返回到 master</li>\n</ul>\n</li>\n</ul>\n<img src=\"/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg\" style=\"zoom:40%\"/>\n\n    \n<ul>\n<li>根据实际需要，主控组件和工作组件之间的通信方式可以是同步的，也可以是异步的</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><h4 id=\"关键部件\"><a href=\"#关键部件\" class=\"headerlink\" title=\"关键部件\"></a>关键部件</h4><img src=\"/pictures/maro-distributed-toolkit/key_components.svg\"/> \n\n<ul>\n<li><h5 id=\"Comunication\"><a href=\"#Comunication\" class=\"headerlink\" title=\"Comunication\"></a>Comunication</h5><ul>\n<li><h5 id=\"大致功能预览\"><a href=\"#大致功能预览\" class=\"headerlink\" title=\"大致功能预览\"></a>大致功能预览</h5><ul>\n<li><p>提供通用的消息传递接口</p>\n<ul>\n<li>send, receive</li>\n<li>broadcast</li>\n<li>scatter</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>通信组件使用<strong>可替换</strong>的通信协议驱动程序来适应不同的通信协议栈</p>\n<ul>\n<li>TCP&#x2F;IP</li>\n<li>InfiniBand</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>Peer Discovering</p>\n</li>\n<li><p>部分故障恢复</p>\n</li>\n<li><p>条件事件自动调度</p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h5>  <img src=\"/pictures/maro-distributed-toolkit/proxy.svg\"/>\n\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>Proxy 提供通信原语的实现，是通信操作接口，是通信组件的主要实体</li>\n<li>Proxy 默认使用 ZeroMQ 框架</li>\n<li>Proxy 为基于 Redis 的 peer discovering 提供支持</li>\n<li>分布式通信原语常见操作如下<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Broadcast</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg\"/>\n\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg\"/></li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Scatter</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg\"/>\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg\"/></li>\n</ul>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-12\"><a href=\"#-12\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Reduce (强调聚合之后处理)</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png\"/>\n\n  \n  <img src=\"/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg\"/></li>\n</ul>\n<h6 id=\"-13\"><a href=\"#-13\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-14\"><a href=\"#-14\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-15\"><a href=\"#-15\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Gather (单纯聚合没有额外处理)</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg\"/>\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp\"/></li>\n</ul>\n<h6 id=\"-16\"><a href=\"#-16\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-17\"><a href=\"#-17\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-18\"><a href=\"#-18\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>All Reduce</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg\"/>\n\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg\"/></li>\n</ul>\n<h6 id=\"-19\"><a href=\"#-19\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-20\"><a href=\"#-20\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-21\"><a href=\"#-21\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>All Gather</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg\"/>\n\n  \n  <img src=\"/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp\"/></li>\n</ul>\n<h6 id=\"-22\"><a href=\"#-22\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-23\"><a href=\"#-23\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-24\"><a href=\"#-24\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Reduce Scatter</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp\"/></li>\n</ul>\n<h6 id=\"-25\"><a href=\"#-25\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-26\"><a href=\"#-26\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-27\"><a href=\"#-27\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>All to All</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg\"/></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-28\"><a href=\"#-28\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Message</strong></p>\n<ul>\n<li><p>用于打包组件之间的通信内容，消息实例的主要属性包括</p>\n<ul>\n<li>tag：自定义属性，可用于通过 <strong>conditional event register table</strong> 实现自动调度逻辑</li>\n<li>source：message 发送者的别名</li>\n<li>destination：message 接收者的别名</li>\n<li>payload：用于远程函数调用的 Python 对象</li>\n<li>session_id（自动生成）：特定会话的 UUID ，一个会话可能包含多条消息</li>\n<li>message_id（自动生成）：特定消息的 UUID</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-29\"><a href=\"#-29\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>Example</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> maro.communication <span class=\"keyword\">import</span> Message</span><br><span class=\"line\"></span><br><span class=\"line\">message = Message(tag=<span class=\"string\">&quot;check_in&quot;</span>,</span><br><span class=\"line\">                  source=<span class=\"string\">&quot;worker_001&quot;</span>,</span><br><span class=\"line\">                  destination=<span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">                  body=<span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-30\"><a href=\"#-30\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Session Message</strong></p>\n<ul>\n<li><p>MARO 为常见的分布式场景提供了两种预定义的会话类型</p>\n<ul>\n<li><p><strong>Task Session</strong></p>\n<ul>\n<li><p>存在 master 和 worker 关系</p>\n</li>\n<li><p>用于描述从 master 发送到 worker 的 computing task</p>\n<ul>\n<li>master 将 task 发送给 worker</li>\n<li>一旦 worker 收到 task ，worker 就开始执行 task</li>\n<li>worker 将 computing result 返回给 master</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-31\"><a href=\"#-31\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Notification Session</strong></p>\n<ul>\n<li><p>sender 和 receiver 关系</p>\n</li>\n<li><p>用于信息同步</p>\n<ul>\n<li>sender 发送 notification message</li>\n<li>receiver 接收 notification message</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-32\"><a href=\"#-32\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>session 的每个阶段由 proxy 在内部维护</li>\n<li>Example  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> maro.communication <span class=\"keyword\">import</span> SessionMessage, SessionType</span><br><span class=\"line\"></span><br><span class=\"line\">task_message = SessionMessage(tag=<span class=\"string\">&quot;sum&quot;</span>,</span><br><span class=\"line\">                              source=<span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">                              destination=<span class=\"string\">&quot;worker_001&quot;</span>,</span><br><span class=\"line\">                              body=[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, ...],</span><br><span class=\"line\">                              session_type=SessionType.TASK)</span><br><span class=\"line\"></span><br><span class=\"line\">notification_message = SessionMessage(tag=<span class=\"string\">&quot;check_out&quot;</span>,</span><br><span class=\"line\">                                      source=<span class=\"string\">&quot;worker_001&quot;</span>,</span><br><span class=\"line\">                                      destination=<span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">                                      body=<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                                      session_type=SessionType.NOTIFICATION)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-33\"><a href=\"#-33\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"MARO-通信原语实际接口\"><a href=\"#MARO-通信原语实际接口\" class=\"headerlink\" title=\"MARO 通信原语实际接口\"></a>MARO 通信原语实际接口</h5><ul>\n<li>receive：用于持续接收消息<br>  receive_by_id：仅接收具有给定 session ID 的消息</li>\n<li>send：单播，这是一种阻塞、一对一的发送模式，监视并收集来自远程对等方的回复消息   </li>\n<li>isend：非阻塞版的 send ，将立即返回 message session ID，该 ID 可由  receive_by_id 使用</li>\n<li>scatter：send 的高级版本，用于向 peer 发送消息，并监视和收集来自 peer 的回复消息，不是真正的多播，每条消息都会经过完整的 TCP&#x2F;IP 堆栈（ZeroMQ driver），如果要发送的消息完全相同，并且想要更好的性能，请改用 broadcast 接口</li>\n<li>iscatter：非阻塞版本的 scatter ，message session ID 将立即返回，可由 receive_by_id 使用</li>\n<li>broadcast：阻塞，用于向所有订阅者广播消息，将监视并收集所有订阅者的回复消息</li>\n<li>ibroadcast：非阻塞版本的 broadcast ，相关 message session ID 将立即返回，可供 receive_by_id 使用</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-34\"><a href=\"#-34\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Conditional-Event-Register-Table\"><a href=\"#Conditional-Event-Register-Table\" class=\"headerlink\" title=\"Conditional Event Register Table\"></a>Conditional Event Register Table</h5><ul>\n<li>提供消息自动发送机制</li>\n<li>通过将 conditional event 和相关的 handler function 注册到注册表中，当 conditional event 满足时，handler function 将与接收到的消息一起自动执行</li>\n</ul>\n<h6 id=\"-35\"><a href=\"#-35\" class=\"headerlink\" title=\"\"></a></h6>  <img src=\"/pictures/maro-distributed-toolkit/register_table.register.svg\"/>\n  \n<h6 id=\"-36\"><a href=\"#-36\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>conditional event 用于声明自动触发相关 handler function 所需的消息组</p>\n</li>\n<li><p>unit event 是条件事件中的最小组件，声明格式分三段</p>\n<ul>\n<li>source：用于声明所需的消息源</li>\n<li>tag：消息实例的属性</li>\n<li>amount：所需的消息实例量</li>\n</ul>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit_event_abs = <span class=\"string\">&quot;worker:update:10&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">unit_event_rel = <span class=\"string\">&quot;worker:update:60%&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>AND OR 操作支持更复杂的业务逻辑</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">combined_event_and = (<span class=\"string\">&quot;worker_01:update:2&quot;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&quot;worker_02:update:3&quot;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&quot;AND&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">combined_event_or = (<span class=\"string\">&quot;worker_03:update:1&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;worker_04:update:5&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;OR&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">combined_event_mix = ((<span class=\"string\">&quot;worker_01:update:2&quot;</span>, <span class=\"string\">&quot;worker_02:update:3&quot;</span>, <span class=\"string\">&quot;AND&quot;</span>),</span><br><span class=\"line\">                      <span class=\"string\">&quot;worker_03:update:1&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;OR&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Handler function 是绑定到特定 conditional event 的用户定义的回调函数，当满足事件的条件时，相关消息将被发送到处理程序函数执行</p>\n  <img src=\"/pictures/maro-distributed-toolkit/register_table.trigger.svg\"/>\n\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A common handler function signature</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handler</span>(<span class=\"params\">that, proxy, messages</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Conditional event handler function.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            that: local instance reference, which needs to be operated.</span></span><br><span class=\"line\"><span class=\"string\">            proxy: the proxy reference for remote communication.</span></span><br><span class=\"line\"><span class=\"string\">            messages: received messages.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-37\"><a href=\"#-37\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Distributed-Decorator\"><a href=\"#Distributed-Decorator\" class=\"headerlink\" title=\"Distributed Decorator\"></a>Distributed Decorator</h5><ul>\n<li><p>从本地函数类生成分布式 worker 类的帮助程序</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> maro.communication <span class=\"keyword\">import</span> dist, Proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Initialize proxy instance for remote communication.</span></span><br><span class=\"line\">proxy = Proxy(group_name=<span class=\"string\">&quot;master-worker&quot;</span>,</span><br><span class=\"line\">              component_type=<span class=\"string\">&quot;worker&quot;</span>,</span><br><span class=\"line\">              expected_peers=[(<span class=\"string\">&quot;master&quot;</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Declare the trigger condition of rollout event.</span></span><br><span class=\"line\">rollout_event = <span class=\"string\">&quot;master:rollout:1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Implement rollout event handler logic.</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">on_rollout</span>(<span class=\"params\">that, proxy, messages</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Assemble event-handler directory.</span></span><br><span class=\"line\">handler_dict = &#123;rollout_event: on_rollout&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Convert a local functional class to a distributed one.</span></span><br><span class=\"line\"><span class=\"meta\">@dist(<span class=\"params\">proxy, handler_dict</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 style=\"display:flex\">\n<span align=\"left\" style=\"width:50%\">\nPRE : <a href=\"/2022/10/26/%E5%88%9D%E8%AF%86-MARO/\" title=\"初识 MARO\">初识 MARO</a>\n</span>\n\n<span align=\"right\" style=\"width:50%\">\nNEXT : <a href=\"/2022/10/27/MARO-VM-%E8%B0%83%E5%BA%A6/\" title=\"MARO VM 调度\">MARO VM 调度</a>\n</span>\n</h3>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MARO-三层框架\"><a href=\"#MARO-三层框架\" class=\"headerlink\" title=\"MARO 三层框架\"></a>MARO 三层框架</h3><img src=\"/pictures/maro-distributed-toolkit/maro_overview.svg\"/>\n\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h4 id=\"接下来展示的是第三层-Distibuted-toolkit\"><a href=\"#接下来展示的是第三层-Distibuted-toolkit\" class=\"headerlink\" title=\"接下来展示的是第三层 Distibuted toolkit\"></a>接下来展示的是第三层 Distibuted toolkit</h4><img src=\"/pictures/maro-distributed-toolkit/overview.svg\"/>\n\n<ul>\n<li><p>MARO Distibuted Toolkit 遵循 message-passing 模式，即不同组件之间的协作基于消息<strong>发送</strong>和<strong>接收</strong></p>\n</li>\n<li><p>典型的 <strong>master&#x2F;worker</strong> 分布式程序通常包含以下步骤</p>\n<ul>\n<li>master 会将任务（w&#x2F; or w&#x2F;o data）发送到 worker</li>\n<li>worker 将在其本地计算环境或本地设备中完成任务</li>\n<li>worker 将计算结果返回到 master</li>\n</ul>\n</li>\n</ul>\n<img src=\"/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg\" style=\"zoom:40%\"/>\n\n    \n<ul>\n<li>根据实际需要，主控组件和工作组件之间的通信方式可以是同步的，也可以是异步的</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><h4 id=\"关键部件\"><a href=\"#关键部件\" class=\"headerlink\" title=\"关键部件\"></a>关键部件</h4><img src=\"/pictures/maro-distributed-toolkit/key_components.svg\"/> \n\n<ul>\n<li><h5 id=\"Comunication\"><a href=\"#Comunication\" class=\"headerlink\" title=\"Comunication\"></a>Comunication</h5><ul>\n<li><h5 id=\"大致功能预览\"><a href=\"#大致功能预览\" class=\"headerlink\" title=\"大致功能预览\"></a>大致功能预览</h5><ul>\n<li><p>提供通用的消息传递接口</p>\n<ul>\n<li>send, receive</li>\n<li>broadcast</li>\n<li>scatter</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>通信组件使用<strong>可替换</strong>的通信协议驱动程序来适应不同的通信协议栈</p>\n<ul>\n<li>TCP&#x2F;IP</li>\n<li>InfiniBand</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>Peer Discovering</p>\n</li>\n<li><p>部分故障恢复</p>\n</li>\n<li><p>条件事件自动调度</p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h5>  <img src=\"/pictures/maro-distributed-toolkit/proxy.svg\"/>\n\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>Proxy 提供通信原语的实现，是通信操作接口，是通信组件的主要实体</li>\n<li>Proxy 默认使用 ZeroMQ 框架</li>\n<li>Proxy 为基于 Redis 的 peer discovering 提供支持</li>\n<li>分布式通信原语常见操作如下<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Broadcast</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg\"/>\n\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg\"/></li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Scatter</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg\"/>\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg\"/></li>\n</ul>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-12\"><a href=\"#-12\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Reduce (强调聚合之后处理)</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png\"/>\n\n  \n  <img src=\"/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg\"/></li>\n</ul>\n<h6 id=\"-13\"><a href=\"#-13\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-14\"><a href=\"#-14\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-15\"><a href=\"#-15\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Gather (单纯聚合没有额外处理)</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg\"/>\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp\"/></li>\n</ul>\n<h6 id=\"-16\"><a href=\"#-16\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-17\"><a href=\"#-17\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-18\"><a href=\"#-18\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>All Reduce</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg\"/>\n\n\n  <img src=\"/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg\"/></li>\n</ul>\n<h6 id=\"-19\"><a href=\"#-19\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-20\"><a href=\"#-20\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-21\"><a href=\"#-21\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>All Gather</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg\"/>\n\n  \n  <img src=\"/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp\"/></li>\n</ul>\n<h6 id=\"-22\"><a href=\"#-22\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-23\"><a href=\"#-23\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-24\"><a href=\"#-24\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Reduce Scatter</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp\"/></li>\n</ul>\n<h6 id=\"-25\"><a href=\"#-25\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-26\"><a href=\"#-26\" class=\"headerlink\" title=\"\"></a></h6><h6 id=\"-27\"><a href=\"#-27\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>All to All</strong></p>\n  <img src=\"/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg\"/></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-28\"><a href=\"#-28\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Message</strong></p>\n<ul>\n<li><p>用于打包组件之间的通信内容，消息实例的主要属性包括</p>\n<ul>\n<li>tag：自定义属性，可用于通过 <strong>conditional event register table</strong> 实现自动调度逻辑</li>\n<li>source：message 发送者的别名</li>\n<li>destination：message 接收者的别名</li>\n<li>payload：用于远程函数调用的 Python 对象</li>\n<li>session_id（自动生成）：特定会话的 UUID ，一个会话可能包含多条消息</li>\n<li>message_id（自动生成）：特定消息的 UUID</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-29\"><a href=\"#-29\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>Example</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> maro.communication <span class=\"keyword\">import</span> Message</span><br><span class=\"line\"></span><br><span class=\"line\">message = Message(tag=<span class=\"string\">&quot;check_in&quot;</span>,</span><br><span class=\"line\">                  source=<span class=\"string\">&quot;worker_001&quot;</span>,</span><br><span class=\"line\">                  destination=<span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">                  body=<span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-30\"><a href=\"#-30\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Session Message</strong></p>\n<ul>\n<li><p>MARO 为常见的分布式场景提供了两种预定义的会话类型</p>\n<ul>\n<li><p><strong>Task Session</strong></p>\n<ul>\n<li><p>存在 master 和 worker 关系</p>\n</li>\n<li><p>用于描述从 master 发送到 worker 的 computing task</p>\n<ul>\n<li>master 将 task 发送给 worker</li>\n<li>一旦 worker 收到 task ，worker 就开始执行 task</li>\n<li>worker 将 computing result 返回给 master</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-31\"><a href=\"#-31\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>Notification Session</strong></p>\n<ul>\n<li><p>sender 和 receiver 关系</p>\n</li>\n<li><p>用于信息同步</p>\n<ul>\n<li>sender 发送 notification message</li>\n<li>receiver 接收 notification message</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-32\"><a href=\"#-32\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>session 的每个阶段由 proxy 在内部维护</li>\n<li>Example  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> maro.communication <span class=\"keyword\">import</span> SessionMessage, SessionType</span><br><span class=\"line\"></span><br><span class=\"line\">task_message = SessionMessage(tag=<span class=\"string\">&quot;sum&quot;</span>,</span><br><span class=\"line\">                              source=<span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">                              destination=<span class=\"string\">&quot;worker_001&quot;</span>,</span><br><span class=\"line\">                              body=[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, ...],</span><br><span class=\"line\">                              session_type=SessionType.TASK)</span><br><span class=\"line\"></span><br><span class=\"line\">notification_message = SessionMessage(tag=<span class=\"string\">&quot;check_out&quot;</span>,</span><br><span class=\"line\">                                      source=<span class=\"string\">&quot;worker_001&quot;</span>,</span><br><span class=\"line\">                                      destination=<span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">                                      body=<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                                      session_type=SessionType.NOTIFICATION)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-33\"><a href=\"#-33\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"MARO-通信原语实际接口\"><a href=\"#MARO-通信原语实际接口\" class=\"headerlink\" title=\"MARO 通信原语实际接口\"></a>MARO 通信原语实际接口</h5><ul>\n<li>receive：用于持续接收消息<br>  receive_by_id：仅接收具有给定 session ID 的消息</li>\n<li>send：单播，这是一种阻塞、一对一的发送模式，监视并收集来自远程对等方的回复消息   </li>\n<li>isend：非阻塞版的 send ，将立即返回 message session ID，该 ID 可由  receive_by_id 使用</li>\n<li>scatter：send 的高级版本，用于向 peer 发送消息，并监视和收集来自 peer 的回复消息，不是真正的多播，每条消息都会经过完整的 TCP&#x2F;IP 堆栈（ZeroMQ driver），如果要发送的消息完全相同，并且想要更好的性能，请改用 broadcast 接口</li>\n<li>iscatter：非阻塞版本的 scatter ，message session ID 将立即返回，可由 receive_by_id 使用</li>\n<li>broadcast：阻塞，用于向所有订阅者广播消息，将监视并收集所有订阅者的回复消息</li>\n<li>ibroadcast：非阻塞版本的 broadcast ，相关 message session ID 将立即返回，可供 receive_by_id 使用</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-34\"><a href=\"#-34\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Conditional-Event-Register-Table\"><a href=\"#Conditional-Event-Register-Table\" class=\"headerlink\" title=\"Conditional Event Register Table\"></a>Conditional Event Register Table</h5><ul>\n<li>提供消息自动发送机制</li>\n<li>通过将 conditional event 和相关的 handler function 注册到注册表中，当 conditional event 满足时，handler function 将与接收到的消息一起自动执行</li>\n</ul>\n<h6 id=\"-35\"><a href=\"#-35\" class=\"headerlink\" title=\"\"></a></h6>  <img src=\"/pictures/maro-distributed-toolkit/register_table.register.svg\"/>\n  \n<h6 id=\"-36\"><a href=\"#-36\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>conditional event 用于声明自动触发相关 handler function 所需的消息组</p>\n</li>\n<li><p>unit event 是条件事件中的最小组件，声明格式分三段</p>\n<ul>\n<li>source：用于声明所需的消息源</li>\n<li>tag：消息实例的属性</li>\n<li>amount：所需的消息实例量</li>\n</ul>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit_event_abs = <span class=\"string\">&quot;worker:update:10&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">unit_event_rel = <span class=\"string\">&quot;worker:update:60%&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>AND OR 操作支持更复杂的业务逻辑</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">combined_event_and = (<span class=\"string\">&quot;worker_01:update:2&quot;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&quot;worker_02:update:3&quot;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&quot;AND&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">combined_event_or = (<span class=\"string\">&quot;worker_03:update:1&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;worker_04:update:5&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;OR&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">combined_event_mix = ((<span class=\"string\">&quot;worker_01:update:2&quot;</span>, <span class=\"string\">&quot;worker_02:update:3&quot;</span>, <span class=\"string\">&quot;AND&quot;</span>),</span><br><span class=\"line\">                      <span class=\"string\">&quot;worker_03:update:1&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;OR&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Handler function 是绑定到特定 conditional event 的用户定义的回调函数，当满足事件的条件时，相关消息将被发送到处理程序函数执行</p>\n  <img src=\"/pictures/maro-distributed-toolkit/register_table.trigger.svg\"/>\n\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A common handler function signature</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handler</span>(<span class=\"params\">that, proxy, messages</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Conditional event handler function.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            that: local instance reference, which needs to be operated.</span></span><br><span class=\"line\"><span class=\"string\">            proxy: the proxy reference for remote communication.</span></span><br><span class=\"line\"><span class=\"string\">            messages: received messages.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-37\"><a href=\"#-37\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Distributed-Decorator\"><a href=\"#Distributed-Decorator\" class=\"headerlink\" title=\"Distributed Decorator\"></a>Distributed Decorator</h5><ul>\n<li><p>从本地函数类生成分布式 worker 类的帮助程序</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> maro.communication <span class=\"keyword\">import</span> dist, Proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Initialize proxy instance for remote communication.</span></span><br><span class=\"line\">proxy = Proxy(group_name=<span class=\"string\">&quot;master-worker&quot;</span>,</span><br><span class=\"line\">              component_type=<span class=\"string\">&quot;worker&quot;</span>,</span><br><span class=\"line\">              expected_peers=[(<span class=\"string\">&quot;master&quot;</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Declare the trigger condition of rollout event.</span></span><br><span class=\"line\">rollout_event = <span class=\"string\">&quot;master:rollout:1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Implement rollout event handler logic.</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">on_rollout</span>(<span class=\"params\">that, proxy, messages</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Assemble event-handler directory.</span></span><br><span class=\"line\">handler_dict = &#123;rollout_event: on_rollout&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Convert a local functional class to a distributed one.</span></span><br><span class=\"line\"><span class=\"meta\">@dist(<span class=\"params\">proxy, handler_dict</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 style=\"display:flex\">\n<span align=\"left\" style=\"width:50%\">\nPRE : <a href=\"/2022/10/26/%E5%88%9D%E8%AF%86-MARO/\" title=\"初识 MARO\">初识 MARO</a>\n</span>\n\n<span align=\"right\" style=\"width:50%\">\nNEXT : <a href=\"/2022/10/27/MARO-VM-%E8%B0%83%E5%BA%A6/\" title=\"MARO VM 调度\">MARO VM 调度</a>\n</span>\n</h3>\n"},{"title":"MARO VM 调度","date":"2022-10-27T03:01:57.000Z","_content":"### 背景\n- 在云服务期间，用户请求具有一定数量资源的 **虚拟机（VM）（Virtual Mechine）**，例如中央处理器、内存等\n- 假设一个特定的时间，VM 请求的数量和到达模式是固定的，给定一个物理资源有限的 **物理机（PM）（Physical Mechine）** 集群\n- 不同的 VM 分配策略导致数据中心的成功完成量不同，运营成本也不同\n- 对于云提供商，一个好的 VM 分配策略可以最大限度地提高资源利用率，从而可以通过向用户提供更多的 VM 来增加利润\n- 对于云用户，良好的 VM 分配策略可以最大程度地缩短 VM 响应时间，并提供更好的使用体验\n\n###### \n\n### 资源供需\n<img src=\"/pictures/maro-vm-调度/2022.10.27.20.00.43.png\"/>\n\n- 每个 **PM** 中的物理资源是中心资源，包括 **物理内核** 和 **内存**\n\t\n\t- VM 请求需要一定数量的 **物理资源** ，资源要求因不同的 VM 请求而异 \n\t- 只要指定的 PM 的剩余资源足够，**模拟器** 就会将 VM 分配到指定 PM ，VM 会在指定 PM 中创建 \n\t- VM 的资源利用率动态变化，PM 的实时能耗将在 **Runtime-Simulation（模拟器）** 中被模拟出来\n\t- VM 执行一段时间后完成其任务，**模拟器** 将释放分配给此 VM 的资源，并从 PM 中解除分配此 VM ，物理资源被释放，可以处理下一个 VM 请求 \n\n<img src=\"/pictures/maro-vm-调度/2022.10.28.15.14.52.png\"/>\n\n\n###### \n\n### VM Request\n\n- MARO 和机器学习算法原理类似，需要 **样本数据** 训练出 **模型（找出当前场景的规律）**，再通过模型去 **预测** 怎样的行为更加正确符合实际\n- VM scheduling 场景里面，**样本数据** 是 VM Request**s** ，样本数据从实际工作负荷中统一采样\n- 只要原始数据集足够大，采样率不太小，采样的 VM Requests**（复数名词）** 就可以被认为遵循与原始请求类似的分布\n- 一个 VM Request 包含 **VM 信息**（如 订阅 ID、部署 ID 和 VM 类别）、**VM 的所需资源**（包括所需的 CPU 核心数和内存）以及 **剩余缓冲时间（remaining buffer time）**\n\n###### \n\n### VM 类型\n- 交互式\n\n\t- 交互式 VM 通常需要较低的响应时间，因此设置此类 VM 只能分配给不可超额订阅的 PM 服务器  \n###### \n- 延迟不敏感\n\n\t- 不区分延迟的 VM 通常用于批处理任务或开发工作负荷，可以将此类 VM 分配给可过度订阅的 PM 服务器\n\n###### \n\n### VM 分配\n\n- 根据 **有效的 PM 列表** ，**模拟器记录的历史信息** 以及 **VM 的详细所需资源** ，**VM 调度器（决策代理）** 将根据其分配策略做出决策\n- 两种有意义的操作\n\n\t- 将 **有效的 PM ID** 传送到模拟器\n\t- 推迟如果 **剩余缓冲区时间** 足够，则可以稍后将处理的 VM Request\n\t\n###### \n\n### Oversubscription 超额订阅\n\n- 考虑到各种服务级别，将物理机分为可超额订阅和非超额订阅的\n- 所谓超额，就比如 10 个 VM 实际上只使用 7 个 PM （就是厂商为了省钱）\n- 对于超额订阅，可以在 **config.yml** 中设置参数\n- 在此场景，有两个资源可能被超额订阅，CPU 和 内存，因可以设置这两个的最大超额订阅率\n\n\t- **MAX_CPU_OVERSUBSCRIPTION_RATE** ，CPU 的超额订阅率，默认设置为 1.15 ，意味着每个 PM 最多可以分配其资源容量的 1.15 倍 \n\t\n\t- **MAX_MEM_OVERSUBSCRIPTION_RATE** ，内存的超额订阅率，与 CPU 的类似\n\n- 为了保护 PM 免受过载的影响，需要考虑 CPU 利用率 ，MAX_UTILIZATION_RATE 被用作安全机制\n\n\t- **MAX_UTILIZATION_RATE** ，默认设置为 1，这意味着在筛选有效 PM 时，允许的最大物理 CPU 使用率为 100% \n\n###### \n\n### Runtime Simulation\n\n- #### 动态利用率\n\n\t- 为了使模拟环境最接近真实情况，MARO 模拟每个 VM 的资源利用率（当前仅为 CPU 利用率）\n\t- **模拟的** VM CPU 利用率根据**实际的** VM 工作负载读数而变化\n\t- MARO 还将根据每个 PM 中的**实时** VM 定期更新**实时**资源利用率\n\t\n- #### 实时能耗\n\n\t- 不同的 VM 分配会导致 PM 集群的能耗不同，MARO 还根据 CPU 利用率模拟（计算）能耗\n\t\t\n\t\t- 能耗曲线\n\t\t\t\n\t\t\t- 这个非线性曲线反映了 CPU 利用率 与 能耗 的关系，用于模拟（计算）能耗\n\t<img src=\"/pictures/maro-vm-调度/vm.energy_curve.svg\"/>\n\n###### \n\n### Overload\n\n- 由于 VM 的 CPU 使用率随时间而变化，因此在启用超额订阅时，VM 的 CPU 使用率之和可能会超过物理资源的容量，这种情况称为过载\n\t\n\t- 目前对于过载的情况，MARO 只支持**静默（杀死）所有虚拟机** 或 **仅记录过载时间**，在 config.yml 里面设置\n\t\n\t\t- **KILL_ALL_VMS_IF_OVERLOAD** \n\n\t\t\t- 如果启用此操作，则一旦发生重载，将解除分配位于重载 PM 的**所有** VM\n\t\t\t- 考虑到过载的影响，MARO 仍然会计算高利用率的能耗，静默行动对 PM 利用率的影响将反映在下一次 tick 中 \n\n###### \n- 无论是否启用终止所有 VM，过载 PM 的数量和过载 VM 的数量都会被计算\n- 这两个指标是累积值，将被记录为环境指标\n\n###### \n\n### VM 解除分配\n\n- MARO 模拟器会定期检查每次 tick 中完成任务的虚拟机\n- 完成的 VM 意味着它经历了一个完整的生命周期，已准备好终止，它所占用的资源最终将再次可用\n- 然后，模拟器将释放已完成的 VM 的资源，并最终从 PM 中删除 VM\n\n###### \n\n### Quick Start\n\n- 准备两个 csv 文件 vm_table 和 cpu_readings_file\n\t\n\t- vm_table\n\t\t\n\t\t- **vm_id**:       int, 每个 vm 的id\n\t\t- **sub_id**:      int, subscription id（每个 vm 的订阅 id）\n\t\t- **deploy_id**:   int, 每个 vm 的部署 id\n\t\t- **timestamp**:   int, 每个 vm 的创建时间\n\t\t- **vm_deleted**:  int. 每个 vm 的删除时间\n\t\t- **vm_lifetime**: int, 每个 vm 的生存时间，Lifetime = deletion time - creation time (timestamp) + 1\n\t\t- **vm_category**: int, 目前有三种类型\n\t\t\t\n\t\t\t- Delay-Insensitive\n\t\t\t\n\t\t\t\t- 可能延迟的 VM 工作负荷，例如批处理任务或测试工作负荷\n\t\t\t\t- 可以将此类 VM 分配给可过度订阅的 PM \n\n\t\t\t- Interactive\n\n\t\t\t\t- 交互式 VM 工作负荷，需要用户及时响应\n\t\t\t\t- 此类 VM 只能分配给不可超额订阅的 PM \n\n\t\t\t- Unknown\n\t\t\t\t\n\t\t\t\t- 未知类型\n\t\t\t\t- 为避免过载，此类 VM 被视为交互式 VM，只能分配给不可超额订阅的 PM\n\t\n\t- cpu_readings_file \n\t\t\n\t\t- **timestamp**:   int, 与 vm_table 中的 timestamp 匹配\n\t\t- **vm_id**: int, 与 vm_table 中的 vm_id 匹配\n\t\t- **cpu_utilization**: float, VM CPU 的利用率，以百分比单位 （%）存储\n\n\n###### \n\n### 构建命令\n\n- 将 CSV 数据集构建为 MARO 模拟器可以使用的二进制文件\n\n\t```\n\t# maro data build --meta $PATH_TO_META_FILE --file $PATH_TO_CSV_FILE  --output $PATH_TO_OUTPUT_FILE\n\tmaro data build --meta ~/.maro/data/vm_scheduling/meta/vmtable.yml  --file ~/.maro/data/vm_scheduling/.build/azure.2019.10k/vmtable.bin --output $PWD/vmtable.bin\n\t```\n\t- --meta：必需，用于指定 meta file 的路径。默认情况下，meta file 位于\n\t\n\t\t```\n\t\t~/.maro/data/vm_scheduling/meta/\n\t\t```\n\t- --file：必需，用于指定源 CSV 数据文件的路径，如果需要多个源 CSV 数据文件，则可以在特定文件中列出源文件的所有完整路径，并使用 @ 符号指定这个特定文件\n\t- --output：必需，用于指定目标二进制文件的路径 \n\n- 生成二进制文件之后，在 topologies 目录下的 config.yml 中指定 VM_TABLE 和 CPU_READINGS 的直接路径\n\n###### \n\n### Environment Interface\n\n- #### DecisionPayload\n\t\n\t- 一旦环境需要代理的响应来促进模拟，它就会抛出一个带有 DecisionPayload 的 PendingDecision 事件\n\t- DecisionPayload 包含以下信息\n\t\t\n\t\t- **valid_pms (List[int])** ：被视为有效的 PM ID 列表（其 CPU 和内存资源足以满足传入的 VM 请求） \n\t\t- **vm_id (int)** ：传入的 VM Request（正在等待分配的 VM Request）的 vm_id ，\n\t\t- **vm_cpu_cores_requirement (int)** ：传入的 VM Request 的 CPU 内核数量\n\t\t- **vm_memory_requirement (int)** ：传入的 VM Request 请求的内存资源大小\n\t\t- **remaining_buffer_time（int）** ：当使用 remaining_buffer_time 时，VM Request 将被视为失败，可以在 config.yml 里面设置\n\n- #### Action\n\t\n\t- 从环境中获取 PendingDecisionAction 事件后，代理应使用 Action 进行响应，以下是有效的 Action\n\t\t\n\t\t- **None**：除了忽略此 VM Request 之外什么都不执行\n\t\t- **AllocateAction**：VM 的创建时间将固定在它收到这个 Request 的 tick 处，模拟器将更新目标 PM 的工作负载（CPU 核心数量，内存和能耗），这个 Action 包括:\n\t\t\t\n\t\t\t- **vm_id(int)**：等待分配资源的 VM 的 ID\n\t\t\t- **pm_id(int)**：计划将 VM 分配到的 PM 的 ID\n\t\t\n\t\t- **PostponeAction**：计算 remaining buffer time，这个 Action 包括：\n\t\t\t\n\t\t\t- **vm_id (int)** ：等待分配的 VM 的 ID\n\t\t\t- **postpone_step（int）**：分配要推迟的次数，单位是 DELAY_DURATION ，1 表示延迟 1 DELAY_DURATION ，可以在 config.yml 中设置\n\t\t\t- 如果时间仍然足够，模拟器将重新生成一个新的请求事件，新需求事件的 仅在剩余缓冲时间上与旧事件不同\n\t\t\t- 如果时间用完，模拟器会将其记录为失败的分配\n\t\t\t \n###### \n\n### Example\n\n```python\nimport random\n\nfrom maro.simulator import Env\nfrom maro.simulator.scenarios.vm_scheduling import AllocateAction, DecisionPayload, PostponeAction\n\n# Initialize an Env for vm_scheduling scenario\n# 初始化环境\nenv = Env(\n  scenario=\"vm_scheduling\",     \n  topology=\"azure.2019.10k\",    \n  start_tick=0,                \n  durations=8638,              \n  snapshot_resolution=1\n)\n\n# 初始化变量，声明类型，\":\"用于声明类型\nmetrics: object = None\ndecision_event: DecisionPayload = None\nis_done: bool = False\naction: AllocateAction = None\n\n# Start the env with a None Action\n# 开始模拟\nmetrics, decision_event, is_done = env.step(None)\n\nwhile not is_done:\n    valid_pm_num: int = len(decision_event.valid_pms)\n\t# 作出决策\n    if valid_pm_num <= 0:\n        # No valid PM now, postpone.\n\t\t# 没有可用的 PM ，推迟分配\n        action: PostponeAction = PostponeAction(\n            vm_id=decision_event.vm_id,\n            postpone_step=1\n        )\n    else:\n        # Randomly choose an available PM.\n\t\t# 有可用的 PM ，随机选一个 PM 与 VM 绑定\n        random_idx = random.randint(0, valid_pm_num - 1)\n        pm_id = decision_event.valid_pms[random_idx]\n        action: AllocateAction = AllocateAction(\n            vm_id=decision_event.vm_id,\n            pm_id=pm_id\n        )\n\t\n\t# 采取行动\n    metrics, decision_event, is_done = env.step(action)\n\nprint(f\"[Random] Topology: azure.2019.10k. Total ticks: 8638. Start tick: 0\")\nprint(metrics)\n```\n\n<br/>\n<h3>\n<div align=\"left\">\nPRE : {% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %}\n</div>\n</h3>\n","source":"_posts/MARO-VM-调度.md","raw":"---\ntitle: MARO VM 调度\ndate: 2022-10-27 11:01:57\ntags:\n\t- MARO\n---\n### 背景\n- 在云服务期间，用户请求具有一定数量资源的 **虚拟机（VM）（Virtual Mechine）**，例如中央处理器、内存等\n- 假设一个特定的时间，VM 请求的数量和到达模式是固定的，给定一个物理资源有限的 **物理机（PM）（Physical Mechine）** 集群\n- 不同的 VM 分配策略导致数据中心的成功完成量不同，运营成本也不同\n- 对于云提供商，一个好的 VM 分配策略可以最大限度地提高资源利用率，从而可以通过向用户提供更多的 VM 来增加利润\n- 对于云用户，良好的 VM 分配策略可以最大程度地缩短 VM 响应时间，并提供更好的使用体验\n\n###### \n\n### 资源供需\n<img src=\"/pictures/maro-vm-调度/2022.10.27.20.00.43.png\"/>\n\n- 每个 **PM** 中的物理资源是中心资源，包括 **物理内核** 和 **内存**\n\t\n\t- VM 请求需要一定数量的 **物理资源** ，资源要求因不同的 VM 请求而异 \n\t- 只要指定的 PM 的剩余资源足够，**模拟器** 就会将 VM 分配到指定 PM ，VM 会在指定 PM 中创建 \n\t- VM 的资源利用率动态变化，PM 的实时能耗将在 **Runtime-Simulation（模拟器）** 中被模拟出来\n\t- VM 执行一段时间后完成其任务，**模拟器** 将释放分配给此 VM 的资源，并从 PM 中解除分配此 VM ，物理资源被释放，可以处理下一个 VM 请求 \n\n<img src=\"/pictures/maro-vm-调度/2022.10.28.15.14.52.png\"/>\n\n\n###### \n\n### VM Request\n\n- MARO 和机器学习算法原理类似，需要 **样本数据** 训练出 **模型（找出当前场景的规律）**，再通过模型去 **预测** 怎样的行为更加正确符合实际\n- VM scheduling 场景里面，**样本数据** 是 VM Request**s** ，样本数据从实际工作负荷中统一采样\n- 只要原始数据集足够大，采样率不太小，采样的 VM Requests**（复数名词）** 就可以被认为遵循与原始请求类似的分布\n- 一个 VM Request 包含 **VM 信息**（如 订阅 ID、部署 ID 和 VM 类别）、**VM 的所需资源**（包括所需的 CPU 核心数和内存）以及 **剩余缓冲时间（remaining buffer time）**\n\n###### \n\n### VM 类型\n- 交互式\n\n\t- 交互式 VM 通常需要较低的响应时间，因此设置此类 VM 只能分配给不可超额订阅的 PM 服务器  \n###### \n- 延迟不敏感\n\n\t- 不区分延迟的 VM 通常用于批处理任务或开发工作负荷，可以将此类 VM 分配给可过度订阅的 PM 服务器\n\n###### \n\n### VM 分配\n\n- 根据 **有效的 PM 列表** ，**模拟器记录的历史信息** 以及 **VM 的详细所需资源** ，**VM 调度器（决策代理）** 将根据其分配策略做出决策\n- 两种有意义的操作\n\n\t- 将 **有效的 PM ID** 传送到模拟器\n\t- 推迟如果 **剩余缓冲区时间** 足够，则可以稍后将处理的 VM Request\n\t\n###### \n\n### Oversubscription 超额订阅\n\n- 考虑到各种服务级别，将物理机分为可超额订阅和非超额订阅的\n- 所谓超额，就比如 10 个 VM 实际上只使用 7 个 PM （就是厂商为了省钱）\n- 对于超额订阅，可以在 **config.yml** 中设置参数\n- 在此场景，有两个资源可能被超额订阅，CPU 和 内存，因可以设置这两个的最大超额订阅率\n\n\t- **MAX_CPU_OVERSUBSCRIPTION_RATE** ，CPU 的超额订阅率，默认设置为 1.15 ，意味着每个 PM 最多可以分配其资源容量的 1.15 倍 \n\t\n\t- **MAX_MEM_OVERSUBSCRIPTION_RATE** ，内存的超额订阅率，与 CPU 的类似\n\n- 为了保护 PM 免受过载的影响，需要考虑 CPU 利用率 ，MAX_UTILIZATION_RATE 被用作安全机制\n\n\t- **MAX_UTILIZATION_RATE** ，默认设置为 1，这意味着在筛选有效 PM 时，允许的最大物理 CPU 使用率为 100% \n\n###### \n\n### Runtime Simulation\n\n- #### 动态利用率\n\n\t- 为了使模拟环境最接近真实情况，MARO 模拟每个 VM 的资源利用率（当前仅为 CPU 利用率）\n\t- **模拟的** VM CPU 利用率根据**实际的** VM 工作负载读数而变化\n\t- MARO 还将根据每个 PM 中的**实时** VM 定期更新**实时**资源利用率\n\t\n- #### 实时能耗\n\n\t- 不同的 VM 分配会导致 PM 集群的能耗不同，MARO 还根据 CPU 利用率模拟（计算）能耗\n\t\t\n\t\t- 能耗曲线\n\t\t\t\n\t\t\t- 这个非线性曲线反映了 CPU 利用率 与 能耗 的关系，用于模拟（计算）能耗\n\t<img src=\"/pictures/maro-vm-调度/vm.energy_curve.svg\"/>\n\n###### \n\n### Overload\n\n- 由于 VM 的 CPU 使用率随时间而变化，因此在启用超额订阅时，VM 的 CPU 使用率之和可能会超过物理资源的容量，这种情况称为过载\n\t\n\t- 目前对于过载的情况，MARO 只支持**静默（杀死）所有虚拟机** 或 **仅记录过载时间**，在 config.yml 里面设置\n\t\n\t\t- **KILL_ALL_VMS_IF_OVERLOAD** \n\n\t\t\t- 如果启用此操作，则一旦发生重载，将解除分配位于重载 PM 的**所有** VM\n\t\t\t- 考虑到过载的影响，MARO 仍然会计算高利用率的能耗，静默行动对 PM 利用率的影响将反映在下一次 tick 中 \n\n###### \n- 无论是否启用终止所有 VM，过载 PM 的数量和过载 VM 的数量都会被计算\n- 这两个指标是累积值，将被记录为环境指标\n\n###### \n\n### VM 解除分配\n\n- MARO 模拟器会定期检查每次 tick 中完成任务的虚拟机\n- 完成的 VM 意味着它经历了一个完整的生命周期，已准备好终止，它所占用的资源最终将再次可用\n- 然后，模拟器将释放已完成的 VM 的资源，并最终从 PM 中删除 VM\n\n###### \n\n### Quick Start\n\n- 准备两个 csv 文件 vm_table 和 cpu_readings_file\n\t\n\t- vm_table\n\t\t\n\t\t- **vm_id**:       int, 每个 vm 的id\n\t\t- **sub_id**:      int, subscription id（每个 vm 的订阅 id）\n\t\t- **deploy_id**:   int, 每个 vm 的部署 id\n\t\t- **timestamp**:   int, 每个 vm 的创建时间\n\t\t- **vm_deleted**:  int. 每个 vm 的删除时间\n\t\t- **vm_lifetime**: int, 每个 vm 的生存时间，Lifetime = deletion time - creation time (timestamp) + 1\n\t\t- **vm_category**: int, 目前有三种类型\n\t\t\t\n\t\t\t- Delay-Insensitive\n\t\t\t\n\t\t\t\t- 可能延迟的 VM 工作负荷，例如批处理任务或测试工作负荷\n\t\t\t\t- 可以将此类 VM 分配给可过度订阅的 PM \n\n\t\t\t- Interactive\n\n\t\t\t\t- 交互式 VM 工作负荷，需要用户及时响应\n\t\t\t\t- 此类 VM 只能分配给不可超额订阅的 PM \n\n\t\t\t- Unknown\n\t\t\t\t\n\t\t\t\t- 未知类型\n\t\t\t\t- 为避免过载，此类 VM 被视为交互式 VM，只能分配给不可超额订阅的 PM\n\t\n\t- cpu_readings_file \n\t\t\n\t\t- **timestamp**:   int, 与 vm_table 中的 timestamp 匹配\n\t\t- **vm_id**: int, 与 vm_table 中的 vm_id 匹配\n\t\t- **cpu_utilization**: float, VM CPU 的利用率，以百分比单位 （%）存储\n\n\n###### \n\n### 构建命令\n\n- 将 CSV 数据集构建为 MARO 模拟器可以使用的二进制文件\n\n\t```\n\t# maro data build --meta $PATH_TO_META_FILE --file $PATH_TO_CSV_FILE  --output $PATH_TO_OUTPUT_FILE\n\tmaro data build --meta ~/.maro/data/vm_scheduling/meta/vmtable.yml  --file ~/.maro/data/vm_scheduling/.build/azure.2019.10k/vmtable.bin --output $PWD/vmtable.bin\n\t```\n\t- --meta：必需，用于指定 meta file 的路径。默认情况下，meta file 位于\n\t\n\t\t```\n\t\t~/.maro/data/vm_scheduling/meta/\n\t\t```\n\t- --file：必需，用于指定源 CSV 数据文件的路径，如果需要多个源 CSV 数据文件，则可以在特定文件中列出源文件的所有完整路径，并使用 @ 符号指定这个特定文件\n\t- --output：必需，用于指定目标二进制文件的路径 \n\n- 生成二进制文件之后，在 topologies 目录下的 config.yml 中指定 VM_TABLE 和 CPU_READINGS 的直接路径\n\n###### \n\n### Environment Interface\n\n- #### DecisionPayload\n\t\n\t- 一旦环境需要代理的响应来促进模拟，它就会抛出一个带有 DecisionPayload 的 PendingDecision 事件\n\t- DecisionPayload 包含以下信息\n\t\t\n\t\t- **valid_pms (List[int])** ：被视为有效的 PM ID 列表（其 CPU 和内存资源足以满足传入的 VM 请求） \n\t\t- **vm_id (int)** ：传入的 VM Request（正在等待分配的 VM Request）的 vm_id ，\n\t\t- **vm_cpu_cores_requirement (int)** ：传入的 VM Request 的 CPU 内核数量\n\t\t- **vm_memory_requirement (int)** ：传入的 VM Request 请求的内存资源大小\n\t\t- **remaining_buffer_time（int）** ：当使用 remaining_buffer_time 时，VM Request 将被视为失败，可以在 config.yml 里面设置\n\n- #### Action\n\t\n\t- 从环境中获取 PendingDecisionAction 事件后，代理应使用 Action 进行响应，以下是有效的 Action\n\t\t\n\t\t- **None**：除了忽略此 VM Request 之外什么都不执行\n\t\t- **AllocateAction**：VM 的创建时间将固定在它收到这个 Request 的 tick 处，模拟器将更新目标 PM 的工作负载（CPU 核心数量，内存和能耗），这个 Action 包括:\n\t\t\t\n\t\t\t- **vm_id(int)**：等待分配资源的 VM 的 ID\n\t\t\t- **pm_id(int)**：计划将 VM 分配到的 PM 的 ID\n\t\t\n\t\t- **PostponeAction**：计算 remaining buffer time，这个 Action 包括：\n\t\t\t\n\t\t\t- **vm_id (int)** ：等待分配的 VM 的 ID\n\t\t\t- **postpone_step（int）**：分配要推迟的次数，单位是 DELAY_DURATION ，1 表示延迟 1 DELAY_DURATION ，可以在 config.yml 中设置\n\t\t\t- 如果时间仍然足够，模拟器将重新生成一个新的请求事件，新需求事件的 仅在剩余缓冲时间上与旧事件不同\n\t\t\t- 如果时间用完，模拟器会将其记录为失败的分配\n\t\t\t \n###### \n\n### Example\n\n```python\nimport random\n\nfrom maro.simulator import Env\nfrom maro.simulator.scenarios.vm_scheduling import AllocateAction, DecisionPayload, PostponeAction\n\n# Initialize an Env for vm_scheduling scenario\n# 初始化环境\nenv = Env(\n  scenario=\"vm_scheduling\",     \n  topology=\"azure.2019.10k\",    \n  start_tick=0,                \n  durations=8638,              \n  snapshot_resolution=1\n)\n\n# 初始化变量，声明类型，\":\"用于声明类型\nmetrics: object = None\ndecision_event: DecisionPayload = None\nis_done: bool = False\naction: AllocateAction = None\n\n# Start the env with a None Action\n# 开始模拟\nmetrics, decision_event, is_done = env.step(None)\n\nwhile not is_done:\n    valid_pm_num: int = len(decision_event.valid_pms)\n\t# 作出决策\n    if valid_pm_num <= 0:\n        # No valid PM now, postpone.\n\t\t# 没有可用的 PM ，推迟分配\n        action: PostponeAction = PostponeAction(\n            vm_id=decision_event.vm_id,\n            postpone_step=1\n        )\n    else:\n        # Randomly choose an available PM.\n\t\t# 有可用的 PM ，随机选一个 PM 与 VM 绑定\n        random_idx = random.randint(0, valid_pm_num - 1)\n        pm_id = decision_event.valid_pms[random_idx]\n        action: AllocateAction = AllocateAction(\n            vm_id=decision_event.vm_id,\n            pm_id=pm_id\n        )\n\t\n\t# 采取行动\n    metrics, decision_event, is_done = env.step(action)\n\nprint(f\"[Random] Topology: azure.2019.10k. Total ticks: 8638. Start tick: 0\")\nprint(metrics)\n```\n\n<br/>\n<h3>\n<div align=\"left\">\nPRE : {% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %}\n</div>\n</h3>\n","slug":"MARO-VM-调度","published":1,"updated":"2022-11-23T12:01:57.934Z","_id":"cla6l8qhs000cg7i51dvq35rk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li>在云服务期间，用户请求具有一定数量资源的 <strong>虚拟机（VM）（Virtual Mechine）</strong>，例如中央处理器、内存等</li>\n<li>假设一个特定的时间，VM 请求的数量和到达模式是固定的，给定一个物理资源有限的 <strong>物理机（PM）（Physical Mechine）</strong> 集群</li>\n<li>不同的 VM 分配策略导致数据中心的成功完成量不同，运营成本也不同</li>\n<li>对于云提供商，一个好的 VM 分配策略可以最大限度地提高资源利用率，从而可以通过向用户提供更多的 VM 来增加利润</li>\n<li>对于云用户，良好的 VM 分配策略可以最大程度地缩短 VM 响应时间，并提供更好的使用体验</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"资源供需\"><a href=\"#资源供需\" class=\"headerlink\" title=\"资源供需\"></a>资源供需</h3><img src=\"/pictures/maro-vm-调度/2022.10.27.20.00.43.png\"/>\n\n<ul>\n<li><p>每个 <strong>PM</strong> 中的物理资源是中心资源，包括 <strong>物理内核</strong> 和 <strong>内存</strong></p>\n<ul>\n<li>VM 请求需要一定数量的 <strong>物理资源</strong> ，资源要求因不同的 VM 请求而异 </li>\n<li>只要指定的 PM 的剩余资源足够，<strong>模拟器</strong> 就会将 VM 分配到指定 PM ，VM 会在指定 PM 中创建 </li>\n<li>VM 的资源利用率动态变化，PM 的实时能耗将在 <strong>Runtime-Simulation（模拟器）</strong> 中被模拟出来</li>\n<li>VM 执行一段时间后完成其任务，<strong>模拟器</strong> 将释放分配给此 VM 的资源，并从 PM 中解除分配此 VM ，物理资源被释放，可以处理下一个 VM 请求</li>\n</ul>\n</li>\n</ul>\n<img src=\"/pictures/maro-vm-调度/2022.10.28.15.14.52.png\"/>\n\n\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-Request\"><a href=\"#VM-Request\" class=\"headerlink\" title=\"VM Request\"></a>VM Request</h3><ul>\n<li>MARO 和机器学习算法原理类似，需要 <strong>样本数据</strong> 训练出 <strong>模型（找出当前场景的规律）</strong>，再通过模型去 <strong>预测</strong> 怎样的行为更加正确符合实际</li>\n<li>VM scheduling 场景里面，<strong>样本数据</strong> 是 VM Request<strong>s</strong> ，样本数据从实际工作负荷中统一采样</li>\n<li>只要原始数据集足够大，采样率不太小，采样的 VM Requests<strong>（复数名词）</strong> 就可以被认为遵循与原始请求类似的分布</li>\n<li>一个 VM Request 包含 <strong>VM 信息</strong>（如 订阅 ID、部署 ID 和 VM 类别）、<strong>VM 的所需资源</strong>（包括所需的 CPU 核心数和内存）以及 <strong>剩余缓冲时间（remaining buffer time）</strong></li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-类型\"><a href=\"#VM-类型\" class=\"headerlink\" title=\"VM 类型\"></a>VM 类型</h3><ul>\n<li><p>交互式</p>\n<ul>\n<li>交互式 VM 通常需要较低的响应时间，因此设置此类 VM 只能分配给不可超额订阅的 PM 服务器</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>延迟不敏感</p>\n<ul>\n<li>不区分延迟的 VM 通常用于批处理任务或开发工作负荷，可以将此类 VM 分配给可过度订阅的 PM 服务器</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-分配\"><a href=\"#VM-分配\" class=\"headerlink\" title=\"VM 分配\"></a>VM 分配</h3><ul>\n<li><p>根据 <strong>有效的 PM 列表</strong> ，<strong>模拟器记录的历史信息</strong> 以及 <strong>VM 的详细所需资源</strong> ，<strong>VM 调度器（决策代理）</strong> 将根据其分配策略做出决策</p>\n</li>\n<li><p>两种有意义的操作</p>\n<ul>\n<li>将 <strong>有效的 PM ID</strong> 传送到模拟器</li>\n<li>推迟如果 <strong>剩余缓冲区时间</strong> 足够，则可以稍后将处理的 VM Request</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Oversubscription-超额订阅\"><a href=\"#Oversubscription-超额订阅\" class=\"headerlink\" title=\"Oversubscription 超额订阅\"></a>Oversubscription 超额订阅</h3><ul>\n<li><p>考虑到各种服务级别，将物理机分为可超额订阅和非超额订阅的</p>\n</li>\n<li><p>所谓超额，就比如 10 个 VM 实际上只使用 7 个 PM （就是厂商为了省钱）</p>\n</li>\n<li><p>对于超额订阅，可以在 <strong>config.yml</strong> 中设置参数</p>\n</li>\n<li><p>在此场景，有两个资源可能被超额订阅，CPU 和 内存，因可以设置这两个的最大超额订阅率</p>\n<ul>\n<li><p><strong>MAX_CPU_OVERSUBSCRIPTION_RATE</strong> ，CPU 的超额订阅率，默认设置为 1.15 ，意味着每个 PM 最多可以分配其资源容量的 1.15 倍 </p>\n</li>\n<li><p><strong>MAX_MEM_OVERSUBSCRIPTION_RATE</strong> ，内存的超额订阅率，与 CPU 的类似</p>\n</li>\n</ul>\n</li>\n<li><p>为了保护 PM 免受过载的影响，需要考虑 CPU 利用率 ，MAX_UTILIZATION_RATE 被用作安全机制</p>\n<ul>\n<li><strong>MAX_UTILIZATION_RATE</strong> ，默认设置为 1，这意味着在筛选有效 PM 时，允许的最大物理 CPU 使用率为 100%</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Runtime-Simulation\"><a href=\"#Runtime-Simulation\" class=\"headerlink\" title=\"Runtime Simulation\"></a>Runtime Simulation</h3><ul>\n<li><h4 id=\"动态利用率\"><a href=\"#动态利用率\" class=\"headerlink\" title=\"动态利用率\"></a>动态利用率</h4><ul>\n<li>为了使模拟环境最接近真实情况，MARO 模拟每个 VM 的资源利用率（当前仅为 CPU 利用率）</li>\n<li><strong>模拟的</strong> VM CPU 利用率根据<strong>实际的</strong> VM 工作负载读数而变化</li>\n<li>MARO 还将根据每个 PM 中的<strong>实时</strong> VM 定期更新<strong>实时</strong>资源利用率</li>\n</ul>\n</li>\n<li><h4 id=\"实时能耗\"><a href=\"#实时能耗\" class=\"headerlink\" title=\"实时能耗\"></a>实时能耗</h4><ul>\n<li><p>不同的 VM 分配会导致 PM 集群的能耗不同，MARO 还根据 CPU 利用率模拟（计算）能耗</p>\n<ul>\n<li><p>能耗曲线</p>\n<ul>\n<li>这个非线性曲线反映了 CPU 利用率 与 能耗 的关系，用于模拟（计算）能耗</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n  <img src=\"/pictures/maro-vm-调度/vm.energy_curve.svg\"/></li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Overload\"><a href=\"#Overload\" class=\"headerlink\" title=\"Overload\"></a>Overload</h3><ul>\n<li><p>由于 VM 的 CPU 使用率随时间而变化，因此在启用超额订阅时，VM 的 CPU 使用率之和可能会超过物理资源的容量，这种情况称为过载</p>\n<ul>\n<li><p>目前对于过载的情况，MARO 只支持<strong>静默（杀死）所有虚拟机</strong> 或 <strong>仅记录过载时间</strong>，在 config.yml 里面设置</p>\n<ul>\n<li><p><strong>KILL_ALL_VMS_IF_OVERLOAD</strong> </p>\n<ul>\n<li>如果启用此操作，则一旦发生重载，将解除分配位于重载 PM 的<strong>所有</strong> VM</li>\n<li>考虑到过载的影响，MARO 仍然会计算高利用率的能耗，静默行动对 PM 利用率的影响将反映在下一次 tick 中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>无论是否启用终止所有 VM，过载 PM 的数量和过载 VM 的数量都会被计算</li>\n<li>这两个指标是累积值，将被记录为环境指标</li>\n</ul>\n<h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-解除分配\"><a href=\"#VM-解除分配\" class=\"headerlink\" title=\"VM 解除分配\"></a>VM 解除分配</h3><ul>\n<li>MARO 模拟器会定期检查每次 tick 中完成任务的虚拟机</li>\n<li>完成的 VM 意味着它经历了一个完整的生命周期，已准备好终止，它所占用的资源最终将再次可用</li>\n<li>然后，模拟器将释放已完成的 VM 的资源，并最终从 PM 中删除 VM</li>\n</ul>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h3><ul>\n<li><p>准备两个 csv 文件 vm_table 和 cpu_readings_file</p>\n<ul>\n<li><p>vm_table</p>\n<ul>\n<li><p><strong>vm_id</strong>:       int, 每个 vm 的id</p>\n</li>\n<li><p><strong>sub_id</strong>:      int, subscription id（每个 vm 的订阅 id）</p>\n</li>\n<li><p><strong>deploy_id</strong>:   int, 每个 vm 的部署 id</p>\n</li>\n<li><p><strong>timestamp</strong>:   int, 每个 vm 的创建时间</p>\n</li>\n<li><p><strong>vm_deleted</strong>:  int. 每个 vm 的删除时间</p>\n</li>\n<li><p><strong>vm_lifetime</strong>: int, 每个 vm 的生存时间，Lifetime &#x3D; deletion time - creation time (timestamp) + 1</p>\n</li>\n<li><p><strong>vm_category</strong>: int, 目前有三种类型</p>\n<ul>\n<li><p>Delay-Insensitive</p>\n<ul>\n<li>可能延迟的 VM 工作负荷，例如批处理任务或测试工作负荷</li>\n<li>可以将此类 VM 分配给可过度订阅的 PM</li>\n</ul>\n</li>\n<li><p>Interactive</p>\n<ul>\n<li>交互式 VM 工作负荷，需要用户及时响应</li>\n<li>此类 VM 只能分配给不可超额订阅的 PM</li>\n</ul>\n</li>\n<li><p>Unknown</p>\n<ul>\n<li>未知类型</li>\n<li>为避免过载，此类 VM 被视为交互式 VM，只能分配给不可超额订阅的 PM</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cpu_readings_file </p>\n<ul>\n<li><strong>timestamp</strong>:   int, 与 vm_table 中的 timestamp 匹配</li>\n<li><strong>vm_id</strong>: int, 与 vm_table 中的 vm_id 匹配</li>\n<li><strong>cpu_utilization</strong>: float, VM CPU 的利用率，以百分比单位 （%）存储</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"构建命令\"><a href=\"#构建命令\" class=\"headerlink\" title=\"构建命令\"></a>构建命令</h3><ul>\n<li><p>将 CSV 数据集构建为 MARO 模拟器可以使用的二进制文件</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># maro data build --meta $PATH_TO_META_FILE --file $PATH_TO_CSV_FILE  --output $PATH_TO_OUTPUT_FILE</span><br><span class=\"line\">maro data build --meta ~/.maro/data/vm_scheduling/meta/vmtable.yml  --file ~/.maro/data/vm_scheduling/.build/azure.2019.10k/vmtable.bin --output $PWD/vmtable.bin</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>–meta：必需，用于指定 meta file 的路径。默认情况下，meta file 位于</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.maro/data/vm_scheduling/meta/</span><br></pre></td></tr></table></figure></li>\n<li><p>–file：必需，用于指定源 CSV 数据文件的路径，如果需要多个源 CSV 数据文件，则可以在特定文件中列出源文件的所有完整路径，并使用 @ 符号指定这个特定文件</p>\n</li>\n<li><p>–output：必需，用于指定目标二进制文件的路径</p>\n</li>\n</ul>\n</li>\n<li><p>生成二进制文件之后，在 topologies 目录下的 config.yml 中指定 VM_TABLE 和 CPU_READINGS 的直接路径</p>\n</li>\n</ul>\n<h6 id=\"-12\"><a href=\"#-12\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Environment-Interface\"><a href=\"#Environment-Interface\" class=\"headerlink\" title=\"Environment Interface\"></a>Environment Interface</h3><ul>\n<li><h4 id=\"DecisionPayload\"><a href=\"#DecisionPayload\" class=\"headerlink\" title=\"DecisionPayload\"></a>DecisionPayload</h4><ul>\n<li><p>一旦环境需要代理的响应来促进模拟，它就会抛出一个带有 DecisionPayload 的 PendingDecision 事件</p>\n</li>\n<li><p>DecisionPayload 包含以下信息</p>\n<ul>\n<li><strong>valid_pms (List[int])</strong> ：被视为有效的 PM ID 列表（其 CPU 和内存资源足以满足传入的 VM 请求） </li>\n<li><strong>vm_id (int)</strong> ：传入的 VM Request（正在等待分配的 VM Request）的 vm_id ，</li>\n<li><strong>vm_cpu_cores_requirement (int)</strong> ：传入的 VM Request 的 CPU 内核数量</li>\n<li><strong>vm_memory_requirement (int)</strong> ：传入的 VM Request 请求的内存资源大小</li>\n<li><strong>remaining_buffer_time（int）</strong> ：当使用 remaining_buffer_time 时，VM Request 将被视为失败，可以在 config.yml 里面设置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><ul>\n<li><p>从环境中获取 PendingDecisionAction 事件后，代理应使用 Action 进行响应，以下是有效的 Action</p>\n<ul>\n<li><p><strong>None</strong>：除了忽略此 VM Request 之外什么都不执行</p>\n</li>\n<li><p><strong>AllocateAction</strong>：VM 的创建时间将固定在它收到这个 Request 的 tick 处，模拟器将更新目标 PM 的工作负载（CPU 核心数量，内存和能耗），这个 Action 包括:</p>\n<ul>\n<li>**vm_id(int)**：等待分配资源的 VM 的 ID</li>\n<li>**pm_id(int)**：计划将 VM 分配到的 PM 的 ID</li>\n</ul>\n</li>\n<li><p><strong>PostponeAction</strong>：计算 remaining buffer time，这个 Action 包括：</p>\n<ul>\n<li><strong>vm_id (int)</strong> ：等待分配的 VM 的 ID</li>\n<li><strong>postpone_step（int）</strong>：分配要推迟的次数，单位是 DELAY_DURATION ，1 表示延迟 1 DELAY_DURATION ，可以在 config.yml 中设置</li>\n<li>如果时间仍然足够，模拟器将重新生成一个新的请求事件，新需求事件的 仅在剩余缓冲时间上与旧事件不同</li>\n<li>如果时间用完，模拟器会将其记录为失败的分配</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-13\"><a href=\"#-13\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> maro.simulator <span class=\"keyword\">import</span> Env</span><br><span class=\"line\"><span class=\"keyword\">from</span> maro.simulator.scenarios.vm_scheduling <span class=\"keyword\">import</span> AllocateAction, DecisionPayload, PostponeAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Initialize an Env for vm_scheduling scenario</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化环境</span></span><br><span class=\"line\">env = Env(</span><br><span class=\"line\">  scenario=<span class=\"string\">&quot;vm_scheduling&quot;</span>,     </span><br><span class=\"line\">  topology=<span class=\"string\">&quot;azure.2019.10k&quot;</span>,    </span><br><span class=\"line\">  start_tick=<span class=\"number\">0</span>,                </span><br><span class=\"line\">  durations=<span class=\"number\">8638</span>,              </span><br><span class=\"line\">  snapshot_resolution=<span class=\"number\">1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化变量，声明类型，&quot;:&quot;用于声明类型</span></span><br><span class=\"line\">metrics: <span class=\"built_in\">object</span> = <span class=\"literal\">None</span></span><br><span class=\"line\">decision_event: DecisionPayload = <span class=\"literal\">None</span></span><br><span class=\"line\">is_done: <span class=\"built_in\">bool</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">action: AllocateAction = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Start the env with a None Action</span></span><br><span class=\"line\"><span class=\"comment\"># 开始模拟</span></span><br><span class=\"line\">metrics, decision_event, is_done = env.step(<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">not</span> is_done:</span><br><span class=\"line\">    valid_pm_num: <span class=\"built_in\">int</span> = <span class=\"built_in\">len</span>(decision_event.valid_pms)</span><br><span class=\"line\">\t<span class=\"comment\"># 作出决策</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> valid_pm_num &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># No valid PM now, postpone.</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 没有可用的 PM ，推迟分配</span></span><br><span class=\"line\">        action: PostponeAction = PostponeAction(</span><br><span class=\"line\">            vm_id=decision_event.vm_id,</span><br><span class=\"line\">            postpone_step=<span class=\"number\">1</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Randomly choose an available PM.</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 有可用的 PM ，随机选一个 PM 与 VM 绑定</span></span><br><span class=\"line\">        random_idx = random.randint(<span class=\"number\">0</span>, valid_pm_num - <span class=\"number\">1</span>)</span><br><span class=\"line\">        pm_id = decision_event.valid_pms[random_idx]</span><br><span class=\"line\">        action: AllocateAction = AllocateAction(</span><br><span class=\"line\">            vm_id=decision_event.vm_id,</span><br><span class=\"line\">            pm_id=pm_id</span><br><span class=\"line\">        )</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 采取行动</span></span><br><span class=\"line\">    metrics, decision_event, is_done = env.step(action)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[Random] Topology: azure.2019.10k. Total ticks: 8638. Start tick: 0&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(metrics)</span><br></pre></td></tr></table></figure>\n\n<br/>\n<h3>\n<div align=\"left\">\nPRE : <a href=\"/2022/11/04/MARO-Distibuted-toolkit/\" title=\"MARO Distibuted Toolkit\">MARO Distibuted toolkit</a>\n</div>\n</h3>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li>在云服务期间，用户请求具有一定数量资源的 <strong>虚拟机（VM）（Virtual Mechine）</strong>，例如中央处理器、内存等</li>\n<li>假设一个特定的时间，VM 请求的数量和到达模式是固定的，给定一个物理资源有限的 <strong>物理机（PM）（Physical Mechine）</strong> 集群</li>\n<li>不同的 VM 分配策略导致数据中心的成功完成量不同，运营成本也不同</li>\n<li>对于云提供商，一个好的 VM 分配策略可以最大限度地提高资源利用率，从而可以通过向用户提供更多的 VM 来增加利润</li>\n<li>对于云用户，良好的 VM 分配策略可以最大程度地缩短 VM 响应时间，并提供更好的使用体验</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"资源供需\"><a href=\"#资源供需\" class=\"headerlink\" title=\"资源供需\"></a>资源供需</h3><img src=\"/pictures/maro-vm-调度/2022.10.27.20.00.43.png\"/>\n\n<ul>\n<li><p>每个 <strong>PM</strong> 中的物理资源是中心资源，包括 <strong>物理内核</strong> 和 <strong>内存</strong></p>\n<ul>\n<li>VM 请求需要一定数量的 <strong>物理资源</strong> ，资源要求因不同的 VM 请求而异 </li>\n<li>只要指定的 PM 的剩余资源足够，<strong>模拟器</strong> 就会将 VM 分配到指定 PM ，VM 会在指定 PM 中创建 </li>\n<li>VM 的资源利用率动态变化，PM 的实时能耗将在 <strong>Runtime-Simulation（模拟器）</strong> 中被模拟出来</li>\n<li>VM 执行一段时间后完成其任务，<strong>模拟器</strong> 将释放分配给此 VM 的资源，并从 PM 中解除分配此 VM ，物理资源被释放，可以处理下一个 VM 请求</li>\n</ul>\n</li>\n</ul>\n<img src=\"/pictures/maro-vm-调度/2022.10.28.15.14.52.png\"/>\n\n\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-Request\"><a href=\"#VM-Request\" class=\"headerlink\" title=\"VM Request\"></a>VM Request</h3><ul>\n<li>MARO 和机器学习算法原理类似，需要 <strong>样本数据</strong> 训练出 <strong>模型（找出当前场景的规律）</strong>，再通过模型去 <strong>预测</strong> 怎样的行为更加正确符合实际</li>\n<li>VM scheduling 场景里面，<strong>样本数据</strong> 是 VM Request<strong>s</strong> ，样本数据从实际工作负荷中统一采样</li>\n<li>只要原始数据集足够大，采样率不太小，采样的 VM Requests<strong>（复数名词）</strong> 就可以被认为遵循与原始请求类似的分布</li>\n<li>一个 VM Request 包含 <strong>VM 信息</strong>（如 订阅 ID、部署 ID 和 VM 类别）、<strong>VM 的所需资源</strong>（包括所需的 CPU 核心数和内存）以及 <strong>剩余缓冲时间（remaining buffer time）</strong></li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-类型\"><a href=\"#VM-类型\" class=\"headerlink\" title=\"VM 类型\"></a>VM 类型</h3><ul>\n<li><p>交互式</p>\n<ul>\n<li>交互式 VM 通常需要较低的响应时间，因此设置此类 VM 只能分配给不可超额订阅的 PM 服务器</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>延迟不敏感</p>\n<ul>\n<li>不区分延迟的 VM 通常用于批处理任务或开发工作负荷，可以将此类 VM 分配给可过度订阅的 PM 服务器</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-分配\"><a href=\"#VM-分配\" class=\"headerlink\" title=\"VM 分配\"></a>VM 分配</h3><ul>\n<li><p>根据 <strong>有效的 PM 列表</strong> ，<strong>模拟器记录的历史信息</strong> 以及 <strong>VM 的详细所需资源</strong> ，<strong>VM 调度器（决策代理）</strong> 将根据其分配策略做出决策</p>\n</li>\n<li><p>两种有意义的操作</p>\n<ul>\n<li>将 <strong>有效的 PM ID</strong> 传送到模拟器</li>\n<li>推迟如果 <strong>剩余缓冲区时间</strong> 足够，则可以稍后将处理的 VM Request</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Oversubscription-超额订阅\"><a href=\"#Oversubscription-超额订阅\" class=\"headerlink\" title=\"Oversubscription 超额订阅\"></a>Oversubscription 超额订阅</h3><ul>\n<li><p>考虑到各种服务级别，将物理机分为可超额订阅和非超额订阅的</p>\n</li>\n<li><p>所谓超额，就比如 10 个 VM 实际上只使用 7 个 PM （就是厂商为了省钱）</p>\n</li>\n<li><p>对于超额订阅，可以在 <strong>config.yml</strong> 中设置参数</p>\n</li>\n<li><p>在此场景，有两个资源可能被超额订阅，CPU 和 内存，因可以设置这两个的最大超额订阅率</p>\n<ul>\n<li><p><strong>MAX_CPU_OVERSUBSCRIPTION_RATE</strong> ，CPU 的超额订阅率，默认设置为 1.15 ，意味着每个 PM 最多可以分配其资源容量的 1.15 倍 </p>\n</li>\n<li><p><strong>MAX_MEM_OVERSUBSCRIPTION_RATE</strong> ，内存的超额订阅率，与 CPU 的类似</p>\n</li>\n</ul>\n</li>\n<li><p>为了保护 PM 免受过载的影响，需要考虑 CPU 利用率 ，MAX_UTILIZATION_RATE 被用作安全机制</p>\n<ul>\n<li><strong>MAX_UTILIZATION_RATE</strong> ，默认设置为 1，这意味着在筛选有效 PM 时，允许的最大物理 CPU 使用率为 100%</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Runtime-Simulation\"><a href=\"#Runtime-Simulation\" class=\"headerlink\" title=\"Runtime Simulation\"></a>Runtime Simulation</h3><ul>\n<li><h4 id=\"动态利用率\"><a href=\"#动态利用率\" class=\"headerlink\" title=\"动态利用率\"></a>动态利用率</h4><ul>\n<li>为了使模拟环境最接近真实情况，MARO 模拟每个 VM 的资源利用率（当前仅为 CPU 利用率）</li>\n<li><strong>模拟的</strong> VM CPU 利用率根据<strong>实际的</strong> VM 工作负载读数而变化</li>\n<li>MARO 还将根据每个 PM 中的<strong>实时</strong> VM 定期更新<strong>实时</strong>资源利用率</li>\n</ul>\n</li>\n<li><h4 id=\"实时能耗\"><a href=\"#实时能耗\" class=\"headerlink\" title=\"实时能耗\"></a>实时能耗</h4><ul>\n<li><p>不同的 VM 分配会导致 PM 集群的能耗不同，MARO 还根据 CPU 利用率模拟（计算）能耗</p>\n<ul>\n<li><p>能耗曲线</p>\n<ul>\n<li>这个非线性曲线反映了 CPU 利用率 与 能耗 的关系，用于模拟（计算）能耗</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n  <img src=\"/pictures/maro-vm-调度/vm.energy_curve.svg\"/></li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Overload\"><a href=\"#Overload\" class=\"headerlink\" title=\"Overload\"></a>Overload</h3><ul>\n<li><p>由于 VM 的 CPU 使用率随时间而变化，因此在启用超额订阅时，VM 的 CPU 使用率之和可能会超过物理资源的容量，这种情况称为过载</p>\n<ul>\n<li><p>目前对于过载的情况，MARO 只支持<strong>静默（杀死）所有虚拟机</strong> 或 <strong>仅记录过载时间</strong>，在 config.yml 里面设置</p>\n<ul>\n<li><p><strong>KILL_ALL_VMS_IF_OVERLOAD</strong> </p>\n<ul>\n<li>如果启用此操作，则一旦发生重载，将解除分配位于重载 PM 的<strong>所有</strong> VM</li>\n<li>考虑到过载的影响，MARO 仍然会计算高利用率的能耗，静默行动对 PM 利用率的影响将反映在下一次 tick 中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>无论是否启用终止所有 VM，过载 PM 的数量和过载 VM 的数量都会被计算</li>\n<li>这两个指标是累积值，将被记录为环境指标</li>\n</ul>\n<h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"VM-解除分配\"><a href=\"#VM-解除分配\" class=\"headerlink\" title=\"VM 解除分配\"></a>VM 解除分配</h3><ul>\n<li>MARO 模拟器会定期检查每次 tick 中完成任务的虚拟机</li>\n<li>完成的 VM 意味着它经历了一个完整的生命周期，已准备好终止，它所占用的资源最终将再次可用</li>\n<li>然后，模拟器将释放已完成的 VM 的资源，并最终从 PM 中删除 VM</li>\n</ul>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h3><ul>\n<li><p>准备两个 csv 文件 vm_table 和 cpu_readings_file</p>\n<ul>\n<li><p>vm_table</p>\n<ul>\n<li><p><strong>vm_id</strong>:       int, 每个 vm 的id</p>\n</li>\n<li><p><strong>sub_id</strong>:      int, subscription id（每个 vm 的订阅 id）</p>\n</li>\n<li><p><strong>deploy_id</strong>:   int, 每个 vm 的部署 id</p>\n</li>\n<li><p><strong>timestamp</strong>:   int, 每个 vm 的创建时间</p>\n</li>\n<li><p><strong>vm_deleted</strong>:  int. 每个 vm 的删除时间</p>\n</li>\n<li><p><strong>vm_lifetime</strong>: int, 每个 vm 的生存时间，Lifetime &#x3D; deletion time - creation time (timestamp) + 1</p>\n</li>\n<li><p><strong>vm_category</strong>: int, 目前有三种类型</p>\n<ul>\n<li><p>Delay-Insensitive</p>\n<ul>\n<li>可能延迟的 VM 工作负荷，例如批处理任务或测试工作负荷</li>\n<li>可以将此类 VM 分配给可过度订阅的 PM</li>\n</ul>\n</li>\n<li><p>Interactive</p>\n<ul>\n<li>交互式 VM 工作负荷，需要用户及时响应</li>\n<li>此类 VM 只能分配给不可超额订阅的 PM</li>\n</ul>\n</li>\n<li><p>Unknown</p>\n<ul>\n<li>未知类型</li>\n<li>为避免过载，此类 VM 被视为交互式 VM，只能分配给不可超额订阅的 PM</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cpu_readings_file </p>\n<ul>\n<li><strong>timestamp</strong>:   int, 与 vm_table 中的 timestamp 匹配</li>\n<li><strong>vm_id</strong>: int, 与 vm_table 中的 vm_id 匹配</li>\n<li><strong>cpu_utilization</strong>: float, VM CPU 的利用率，以百分比单位 （%）存储</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"构建命令\"><a href=\"#构建命令\" class=\"headerlink\" title=\"构建命令\"></a>构建命令</h3><ul>\n<li><p>将 CSV 数据集构建为 MARO 模拟器可以使用的二进制文件</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># maro data build --meta $PATH_TO_META_FILE --file $PATH_TO_CSV_FILE  --output $PATH_TO_OUTPUT_FILE</span><br><span class=\"line\">maro data build --meta ~/.maro/data/vm_scheduling/meta/vmtable.yml  --file ~/.maro/data/vm_scheduling/.build/azure.2019.10k/vmtable.bin --output $PWD/vmtable.bin</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>–meta：必需，用于指定 meta file 的路径。默认情况下，meta file 位于</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.maro/data/vm_scheduling/meta/</span><br></pre></td></tr></table></figure></li>\n<li><p>–file：必需，用于指定源 CSV 数据文件的路径，如果需要多个源 CSV 数据文件，则可以在特定文件中列出源文件的所有完整路径，并使用 @ 符号指定这个特定文件</p>\n</li>\n<li><p>–output：必需，用于指定目标二进制文件的路径</p>\n</li>\n</ul>\n</li>\n<li><p>生成二进制文件之后，在 topologies 目录下的 config.yml 中指定 VM_TABLE 和 CPU_READINGS 的直接路径</p>\n</li>\n</ul>\n<h6 id=\"-12\"><a href=\"#-12\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Environment-Interface\"><a href=\"#Environment-Interface\" class=\"headerlink\" title=\"Environment Interface\"></a>Environment Interface</h3><ul>\n<li><h4 id=\"DecisionPayload\"><a href=\"#DecisionPayload\" class=\"headerlink\" title=\"DecisionPayload\"></a>DecisionPayload</h4><ul>\n<li><p>一旦环境需要代理的响应来促进模拟，它就会抛出一个带有 DecisionPayload 的 PendingDecision 事件</p>\n</li>\n<li><p>DecisionPayload 包含以下信息</p>\n<ul>\n<li><strong>valid_pms (List[int])</strong> ：被视为有效的 PM ID 列表（其 CPU 和内存资源足以满足传入的 VM 请求） </li>\n<li><strong>vm_id (int)</strong> ：传入的 VM Request（正在等待分配的 VM Request）的 vm_id ，</li>\n<li><strong>vm_cpu_cores_requirement (int)</strong> ：传入的 VM Request 的 CPU 内核数量</li>\n<li><strong>vm_memory_requirement (int)</strong> ：传入的 VM Request 请求的内存资源大小</li>\n<li><strong>remaining_buffer_time（int）</strong> ：当使用 remaining_buffer_time 时，VM Request 将被视为失败，可以在 config.yml 里面设置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><ul>\n<li><p>从环境中获取 PendingDecisionAction 事件后，代理应使用 Action 进行响应，以下是有效的 Action</p>\n<ul>\n<li><p><strong>None</strong>：除了忽略此 VM Request 之外什么都不执行</p>\n</li>\n<li><p><strong>AllocateAction</strong>：VM 的创建时间将固定在它收到这个 Request 的 tick 处，模拟器将更新目标 PM 的工作负载（CPU 核心数量，内存和能耗），这个 Action 包括:</p>\n<ul>\n<li>**vm_id(int)**：等待分配资源的 VM 的 ID</li>\n<li>**pm_id(int)**：计划将 VM 分配到的 PM 的 ID</li>\n</ul>\n</li>\n<li><p><strong>PostponeAction</strong>：计算 remaining buffer time，这个 Action 包括：</p>\n<ul>\n<li><strong>vm_id (int)</strong> ：等待分配的 VM 的 ID</li>\n<li><strong>postpone_step（int）</strong>：分配要推迟的次数，单位是 DELAY_DURATION ，1 表示延迟 1 DELAY_DURATION ，可以在 config.yml 中设置</li>\n<li>如果时间仍然足够，模拟器将重新生成一个新的请求事件，新需求事件的 仅在剩余缓冲时间上与旧事件不同</li>\n<li>如果时间用完，模拟器会将其记录为失败的分配</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-13\"><a href=\"#-13\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> maro.simulator <span class=\"keyword\">import</span> Env</span><br><span class=\"line\"><span class=\"keyword\">from</span> maro.simulator.scenarios.vm_scheduling <span class=\"keyword\">import</span> AllocateAction, DecisionPayload, PostponeAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Initialize an Env for vm_scheduling scenario</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化环境</span></span><br><span class=\"line\">env = Env(</span><br><span class=\"line\">  scenario=<span class=\"string\">&quot;vm_scheduling&quot;</span>,     </span><br><span class=\"line\">  topology=<span class=\"string\">&quot;azure.2019.10k&quot;</span>,    </span><br><span class=\"line\">  start_tick=<span class=\"number\">0</span>,                </span><br><span class=\"line\">  durations=<span class=\"number\">8638</span>,              </span><br><span class=\"line\">  snapshot_resolution=<span class=\"number\">1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化变量，声明类型，&quot;:&quot;用于声明类型</span></span><br><span class=\"line\">metrics: <span class=\"built_in\">object</span> = <span class=\"literal\">None</span></span><br><span class=\"line\">decision_event: DecisionPayload = <span class=\"literal\">None</span></span><br><span class=\"line\">is_done: <span class=\"built_in\">bool</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">action: AllocateAction = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Start the env with a None Action</span></span><br><span class=\"line\"><span class=\"comment\"># 开始模拟</span></span><br><span class=\"line\">metrics, decision_event, is_done = env.step(<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">not</span> is_done:</span><br><span class=\"line\">    valid_pm_num: <span class=\"built_in\">int</span> = <span class=\"built_in\">len</span>(decision_event.valid_pms)</span><br><span class=\"line\">\t<span class=\"comment\"># 作出决策</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> valid_pm_num &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># No valid PM now, postpone.</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 没有可用的 PM ，推迟分配</span></span><br><span class=\"line\">        action: PostponeAction = PostponeAction(</span><br><span class=\"line\">            vm_id=decision_event.vm_id,</span><br><span class=\"line\">            postpone_step=<span class=\"number\">1</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Randomly choose an available PM.</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 有可用的 PM ，随机选一个 PM 与 VM 绑定</span></span><br><span class=\"line\">        random_idx = random.randint(<span class=\"number\">0</span>, valid_pm_num - <span class=\"number\">1</span>)</span><br><span class=\"line\">        pm_id = decision_event.valid_pms[random_idx]</span><br><span class=\"line\">        action: AllocateAction = AllocateAction(</span><br><span class=\"line\">            vm_id=decision_event.vm_id,</span><br><span class=\"line\">            pm_id=pm_id</span><br><span class=\"line\">        )</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 采取行动</span></span><br><span class=\"line\">    metrics, decision_event, is_done = env.step(action)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[Random] Topology: azure.2019.10k. Total ticks: 8638. Start tick: 0&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(metrics)</span><br></pre></td></tr></table></figure>\n\n<br/>\n<h3>\n<div align=\"left\">\nPRE : <a href=\"/2022/11/04/MARO-Distibuted-toolkit/\" title=\"MARO Distibuted Toolkit\">MARO Distibuted toolkit</a>\n</div>\n</h3>\n"},{"title":"Markdown 对话框","date":"2022-11-05T12:43:19.000Z","_content":"\n### 1. 只有左右框\n<img src=\"/pictures/markdown-对话框/2022.11.05.21.09.58.png\"/>\n\n\n\n```html\n<div align=\"right\">\n<div style=\"width:47%; border-style:solid; border-width:1px; border-radius:15px\">\n<div style=\"text-align:center;margin:5%\">\n这是右边\n</div>\n</div>\n</div>\n\n###### \n\n<div align=\"left\">\n<div style=\"width:47%; border-style:solid; border-width:1px; border-radius:15px\">\n<div style=\"text-align:center;margin:5%\">\n这是左边\n</div>\n</div>\n</div>\n```\n\n\n<br/>\n\n### 2. 带有箭头的左右框\n<img src=\"/pictures/markdown-对话框/2022.11.07.17.19.38.png\"/>\n\n<br/>\n\n- 写法一\n\n\t```html\n\t<style type=\"text/css\">\n\t.div-diabox{\n\t    width: 60%;\n\t    border-style: solid;\n\t    border-width: 1px;\n\t    border-radius: 16px;\n\t    position: relative;\n\t    padding:30px;\n\t    text-align:center\n\t}\n\t\n\t.div-diabox .arrow-right-out{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent transparent transparent black;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    right: -20px;\n\t}\n\t.div-diabox .arrow-right-in{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent transparent transparent white;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    right: -19px;\n\t}\n\t.div-diabox .arrow-left-out{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent black transparent transparent;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    left: -20px;\n\t}\n\t.div-diabox .arrow-left-in{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent white transparent transparent;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    left: -19px;\n\t}\n\t</style>\n\t\n\t<div align=\"right\">\n\t<div class=\"div-diabox\">\n\t<span class=\"arrow-right-out\"></span>\n\t<span class=\"arrow-right-in\"></span>\n\t右边\n\t</div>\n\t</div>\n\t<br/>\n\t\n\t<div align=\"left\">\n\t<div class=\"div-diabox\">\n\t<span class=\"arrow-left-out\"/></span>\n\t<span class=\"arrow-left-in\"></span>\n\t左边\n\t</div>\n\t</div>\n\t<br/>\n\t```\n\n- 写法二\n\n\t```html\n\t<div align=\"right\">\n\t<div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\">\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span>\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n\t右边\n\t</div></div><br/>\n\t\n\t<div align=\"left\">\n\t<div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\">\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span>\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n\t左边\n\t</div></div><br/>\n\t\n\t```\n","source":"_posts/Markdown-对话框笔记.md","raw":"---\ntitle: Markdown 对话框\ndate: 2022-11-05 20:43:19\ntags:\n\t- Markdown\n---\n\n### 1. 只有左右框\n<img src=\"/pictures/markdown-对话框/2022.11.05.21.09.58.png\"/>\n\n\n\n```html\n<div align=\"right\">\n<div style=\"width:47%; border-style:solid; border-width:1px; border-radius:15px\">\n<div style=\"text-align:center;margin:5%\">\n这是右边\n</div>\n</div>\n</div>\n\n###### \n\n<div align=\"left\">\n<div style=\"width:47%; border-style:solid; border-width:1px; border-radius:15px\">\n<div style=\"text-align:center;margin:5%\">\n这是左边\n</div>\n</div>\n</div>\n```\n\n\n<br/>\n\n### 2. 带有箭头的左右框\n<img src=\"/pictures/markdown-对话框/2022.11.07.17.19.38.png\"/>\n\n<br/>\n\n- 写法一\n\n\t```html\n\t<style type=\"text/css\">\n\t.div-diabox{\n\t    width: 60%;\n\t    border-style: solid;\n\t    border-width: 1px;\n\t    border-radius: 16px;\n\t    position: relative;\n\t    padding:30px;\n\t    text-align:center\n\t}\n\t\n\t.div-diabox .arrow-right-out{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent transparent transparent black;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    right: -20px;\n\t}\n\t.div-diabox .arrow-right-in{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent transparent transparent white;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    right: -19px;\n\t}\n\t.div-diabox .arrow-left-out{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent black transparent transparent;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    left: -20px;\n\t}\n\t.div-diabox .arrow-left-in{\n\t    width: 0px;\n\t    height: 0px;\n\t    border-style: solid;\n\t    border-color: transparent white transparent transparent;\n\t    border-width: 10px;\n\t    position: absolute;\n\t    top: 10px;\n\t    left: -19px;\n\t}\n\t</style>\n\t\n\t<div align=\"right\">\n\t<div class=\"div-diabox\">\n\t<span class=\"arrow-right-out\"></span>\n\t<span class=\"arrow-right-in\"></span>\n\t右边\n\t</div>\n\t</div>\n\t<br/>\n\t\n\t<div align=\"left\">\n\t<div class=\"div-diabox\">\n\t<span class=\"arrow-left-out\"/></span>\n\t<span class=\"arrow-left-in\"></span>\n\t左边\n\t</div>\n\t</div>\n\t<br/>\n\t```\n\n- 写法二\n\n\t```html\n\t<div align=\"right\">\n\t<div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\">\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span>\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n\t右边\n\t</div></div><br/>\n\t\n\t<div align=\"left\">\n\t<div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\">\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span>\n\t<span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n\t左边\n\t</div></div><br/>\n\t\n\t```\n","slug":"Markdown-对话框笔记","published":1,"updated":"2022-11-22T12:45:44.008Z","_id":"cla6l8qht000fg7i52lkx3374","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-只有左右框\"><a href=\"#1-只有左右框\" class=\"headerlink\" title=\"1. 只有左右框\"></a>1. 只有左右框</h3><img src=\"/pictures/markdown-对话框/2022.11.05.21.09.58.png\"/>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:47%; border-style:solid; border-width:1px; border-radius:15px&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center;margin:5%&quot;</span>&gt;</span></span><br><span class=\"line\">这是右边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">###### </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:47%; border-style:solid; border-width:1px; border-radius:15px&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center;margin:5%&quot;</span>&gt;</span></span><br><span class=\"line\">这是左边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n<h3 id=\"2-带有箭头的左右框\"><a href=\"#2-带有箭头的左右框\" class=\"headerlink\" title=\"2. 带有箭头的左右框\"></a>2. 带有箭头的左右框</h3><img src=\"/pictures/markdown-对话框/2022.11.07.17.19.38.png\"/>\n\n<br/>\n\n<ul>\n<li><p>写法一</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">16px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>:<span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">text-align</span>:center</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-right-out</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent transparent transparent black;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">right</span>: -<span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-right-in</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent transparent transparent white;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">right</span>: -<span class=\"number\">19px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-left-out</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent black transparent transparent;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: -<span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-left-in</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent white transparent transparent;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: -<span class=\"number\">19px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div-diabox&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-right-out&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-right-in&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">右边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div-diabox&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-left-out&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-left-in&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">左边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写法二</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">右边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">左边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-只有左右框\"><a href=\"#1-只有左右框\" class=\"headerlink\" title=\"1. 只有左右框\"></a>1. 只有左右框</h3><img src=\"/pictures/markdown-对话框/2022.11.05.21.09.58.png\"/>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:47%; border-style:solid; border-width:1px; border-radius:15px&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center;margin:5%&quot;</span>&gt;</span></span><br><span class=\"line\">这是右边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">###### </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:47%; border-style:solid; border-width:1px; border-radius:15px&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center;margin:5%&quot;</span>&gt;</span></span><br><span class=\"line\">这是左边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n<h3 id=\"2-带有箭头的左右框\"><a href=\"#2-带有箭头的左右框\" class=\"headerlink\" title=\"2. 带有箭头的左右框\"></a>2. 带有箭头的左右框</h3><img src=\"/pictures/markdown-对话框/2022.11.07.17.19.38.png\"/>\n\n<br/>\n\n<ul>\n<li><p>写法一</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">16px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>:<span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">text-align</span>:center</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-right-out</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent transparent transparent black;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">right</span>: -<span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-right-in</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent transparent transparent white;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">right</span>: -<span class=\"number\">19px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-left-out</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent black transparent transparent;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: -<span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.div-diabox</span> <span class=\"selector-class\">.arrow-left-in</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-color</span>: transparent white transparent transparent;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: -<span class=\"number\">19px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div-diabox&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-right-out&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-right-in&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">右边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div-diabox&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-left-out&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow-left-in&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">左边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写法二</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">右边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">左边</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"MySQL 闲谈 1","date":"2022-11-05T14:00:29.000Z","_content":"\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n对MySQL InnoDB引擎的索引了解吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯啊，使用索引可以加快查询速度，其实就是将无序的数据变成有序（有序就能加快检索速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎中，索引的底层数据结构是B+树\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那为什么不使用红黑树或者B树呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n红黑树是「二叉查找树」的变种，一个Node节点只能存储一个Key和一个Value\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB和B+树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个Node节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低\n</div></div><br/>\n\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解了区别之后，其实就很容易发现，在数据不能一次加载至内存的场景下，数据需要被检索出来，选择B或B+树的理由就很充分了（一个Node节点存储信息更多（相较于二叉搜索树），树的高度更低，树的高度影响检索的速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB+树相对于B树而言，它又有两种特性\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、B+树非叶子节点不存储数据，在相同的数据量下，B+树更加矮壮。（这个应该不用多解释了，数据都存储在叶子节点上，非叶子节点的存储能存储更多的索引，所以整棵树就更加矮壮）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、B+树叶子节点之间组成一个链表，方便于遍历查询（遍历操作在MySQL中比较常见）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我稍微解释一下吧，你可以脑补下画面\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们在MySQL InnoDB引擎下，每创建一个索引，相当于生成了一颗B+树\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「聚集(聚簇)索引」，那当前B+树的叶子节点存储着「主键和当前行的数据」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「非聚簇索引」，那当前B+树的叶子节点存储着「主键和当前索引列值」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如写了一句sql：select * from user where id >=10，那只要定位到id为10的记录，然后在叶子节点之间通过遍历链表(叶子节点组成的链表)，即可以找到往后的记录了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n由于B树是会在非叶子节点也存储数据，要遍历的时候可能就得跨层检索，相对麻烦些\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n基于树的层级以及业务使用场景的特性，所以MySQL选择了B+树作为索引的底层数据结构\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于哈希结构，其实InnoDB引擎是「自适应」哈希索引的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，我们是干预不了）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯…那我了解了，顺便想问下，你知道什么叫做回表吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的回表其实就是，当我们使用索引查询数据时，检索出来的数据可能包含其他列，但走的索引树叶子节点只能查到当前列值以及主键ID，所以需要根据主键ID再去查一遍数据，得到SQL 所需的列\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我这边建了给订单号ID建了个索引，但我的SQL 是：select orderId,orderName from orderdetail where orderId = 123\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nSQL都订单ID索引，但在订单ID的索引树的叶子节点只有orderId和Id，而我们还想检索出orderName，所以MySQL 会拿到ID再去查出orderName给我们返回，这种操作就叫回表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n想要避免回表，也可以使用覆盖索引（能使用就使用，因为避免了回表操作）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的覆盖索引，实际上就是你想要查出的列刚好在叶子节点上都存在，比如我建了orderId和orderName联合索引，刚好我需要查询也是orderId和orderName，这些数据都存在索引树的叶子节点上，就不需要回表操作了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n既然你也提到了联合索引，我想问下你了解最左匹配原则吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，说明这个概念，还是举例子比较容易说明\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c>3 and d=4，则会在每个节点依次命中a、b、c，无法命中d\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n先匹配最左边的，索引只能用于查找key是否存在（相等），遇到范围查询 (>、<、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是最左匹配原则\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯嗯，我还想问下你们主键是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主键就自增的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那假设我不用MySQL自增的主键，你觉得会有什么问题呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先主键得保证它的唯一性和空间尽可能短吧，这两块是需要考虑的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n另外，由于索引的特性（有序），如果生成像uuid类似的主键，那插入的的性能是比自增的要差的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为生成的uuid，在插入时有可能需要移动磁盘块（比如，块内的空间在当前时刻已经存储满了，但新生成的uuid需要插入已满的块内，就需要移动块的数据）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\nOK…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg\"/>\n</div></div><br/>\n\n \n\n\n### Summary\n- **为什么B+树？**\n\n\t- 数据无法一次load到内存，B+树是多路搜索树，只有叶子节点才存储数据，叶子节点之间链表进行关联。（树矮，易遍历）\n\n\n###### \n\n- **什么是回表？**\n\n\t- 非聚簇索引在叶子节点只存储列值以及主键ID，有条件下尽可能用覆盖索引避免回表操作，提高查询速度\n\n\n###### \n\n- **什么是最左匹配原则？**\n\n\t- 从最左边为起点开始连续匹配，遇到范围查询终止\n\n\n###### \n\n- **主键非自增会有什么问题？**\n\n\t- 插入效率下降，存在移动块的数据问题\n","source":"_posts/MySQL-闲谈-1.md","raw":"---\ntitle: MySQL 闲谈 1\ndate: 2022-11-05 21:60:29\ntags:\n\t- 数据库\n\t- MySQL\n\t- 对话\n---\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n对MySQL InnoDB引擎的索引了解吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯啊，使用索引可以加快查询速度，其实就是将无序的数据变成有序（有序就能加快检索速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎中，索引的底层数据结构是B+树\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那为什么不使用红黑树或者B树呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n红黑树是「二叉查找树」的变种，一个Node节点只能存储一个Key和一个Value\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB和B+树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个Node节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低\n</div></div><br/>\n\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解了区别之后，其实就很容易发现，在数据不能一次加载至内存的场景下，数据需要被检索出来，选择B或B+树的理由就很充分了（一个Node节点存储信息更多（相较于二叉搜索树），树的高度更低，树的高度影响检索的速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB+树相对于B树而言，它又有两种特性\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、B+树非叶子节点不存储数据，在相同的数据量下，B+树更加矮壮。（这个应该不用多解释了，数据都存储在叶子节点上，非叶子节点的存储能存储更多的索引，所以整棵树就更加矮壮）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、B+树叶子节点之间组成一个链表，方便于遍历查询（遍历操作在MySQL中比较常见）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我稍微解释一下吧，你可以脑补下画面\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们在MySQL InnoDB引擎下，每创建一个索引，相当于生成了一颗B+树\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「聚集(聚簇)索引」，那当前B+树的叶子节点存储着「主键和当前行的数据」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「非聚簇索引」，那当前B+树的叶子节点存储着「主键和当前索引列值」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如写了一句sql：select * from user where id >=10，那只要定位到id为10的记录，然后在叶子节点之间通过遍历链表(叶子节点组成的链表)，即可以找到往后的记录了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n由于B树是会在非叶子节点也存储数据，要遍历的时候可能就得跨层检索，相对麻烦些\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n基于树的层级以及业务使用场景的特性，所以MySQL选择了B+树作为索引的底层数据结构\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于哈希结构，其实InnoDB引擎是「自适应」哈希索引的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，我们是干预不了）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯…那我了解了，顺便想问下，你知道什么叫做回表吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的回表其实就是，当我们使用索引查询数据时，检索出来的数据可能包含其他列，但走的索引树叶子节点只能查到当前列值以及主键ID，所以需要根据主键ID再去查一遍数据，得到SQL 所需的列\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我这边建了给订单号ID建了个索引，但我的SQL 是：select orderId,orderName from orderdetail where orderId = 123\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nSQL都订单ID索引，但在订单ID的索引树的叶子节点只有orderId和Id，而我们还想检索出orderName，所以MySQL 会拿到ID再去查出orderName给我们返回，这种操作就叫回表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n想要避免回表，也可以使用覆盖索引（能使用就使用，因为避免了回表操作）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的覆盖索引，实际上就是你想要查出的列刚好在叶子节点上都存在，比如我建了orderId和orderName联合索引，刚好我需要查询也是orderId和orderName，这些数据都存在索引树的叶子节点上，就不需要回表操作了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n既然你也提到了联合索引，我想问下你了解最左匹配原则吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，说明这个概念，还是举例子比较容易说明\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c>3 and d=4，则会在每个节点依次命中a、b、c，无法命中d\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n先匹配最左边的，索引只能用于查找key是否存在（相等），遇到范围查询 (>、<、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是最左匹配原则\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯嗯，我还想问下你们主键是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主键就自增的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那假设我不用MySQL自增的主键，你觉得会有什么问题呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先主键得保证它的唯一性和空间尽可能短吧，这两块是需要考虑的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n另外，由于索引的特性（有序），如果生成像uuid类似的主键，那插入的的性能是比自增的要差的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为生成的uuid，在插入时有可能需要移动磁盘块（比如，块内的空间在当前时刻已经存储满了，但新生成的uuid需要插入已满的块内，就需要移动块的数据）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\nOK…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg\"/>\n</div></div><br/>\n\n \n\n\n### Summary\n- **为什么B+树？**\n\n\t- 数据无法一次load到内存，B+树是多路搜索树，只有叶子节点才存储数据，叶子节点之间链表进行关联。（树矮，易遍历）\n\n\n###### \n\n- **什么是回表？**\n\n\t- 非聚簇索引在叶子节点只存储列值以及主键ID，有条件下尽可能用覆盖索引避免回表操作，提高查询速度\n\n\n###### \n\n- **什么是最左匹配原则？**\n\n\t- 从最左边为起点开始连续匹配，遇到范围查询终止\n\n\n###### \n\n- **主键非自增会有什么问题？**\n\n\t- 插入效率下降，存在移动块的数据问题\n","slug":"MySQL-闲谈-1","published":1,"updated":"2022-11-07T11:58:10.659Z","_id":"cla6l8qhu000gg7i57lno52h3","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n对MySQL InnoDB引擎的索引了解吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯啊，使用索引可以加快查询速度，其实就是将无序的数据变成有序（有序就能加快检索速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎中，索引的底层数据结构是B+树\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那为什么不使用红黑树或者B树呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n红黑树是「二叉查找树」的变种，一个Node节点只能存储一个Key和一个Value\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB和B+树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个Node节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低\n</div></div><br/>\n\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解了区别之后，其实就很容易发现，在数据不能一次加载至内存的场景下，数据需要被检索出来，选择B或B+树的理由就很充分了（一个Node节点存储信息更多（相较于二叉搜索树），树的高度更低，树的高度影响检索的速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB+树相对于B树而言，它又有两种特性\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、B+树非叶子节点不存储数据，在相同的数据量下，B+树更加矮壮。（这个应该不用多解释了，数据都存储在叶子节点上，非叶子节点的存储能存储更多的索引，所以整棵树就更加矮壮）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、B+树叶子节点之间组成一个链表，方便于遍历查询（遍历操作在MySQL中比较常见）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我稍微解释一下吧，你可以脑补下画面\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们在MySQL InnoDB引擎下，每创建一个索引，相当于生成了一颗B+树\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「聚集(聚簇)索引」，那当前B+树的叶子节点存储着「主键和当前行的数据」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「非聚簇索引」，那当前B+树的叶子节点存储着「主键和当前索引列值」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如写了一句sql：select * from user where id >=10，那只要定位到id为10的记录，然后在叶子节点之间通过遍历链表(叶子节点组成的链表)，即可以找到往后的记录了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n由于B树是会在非叶子节点也存储数据，要遍历的时候可能就得跨层检索，相对麻烦些\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n基于树的层级以及业务使用场景的特性，所以MySQL选择了B+树作为索引的底层数据结构\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于哈希结构，其实InnoDB引擎是「自适应」哈希索引的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，我们是干预不了）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯…那我了解了，顺便想问下，你知道什么叫做回表吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的回表其实就是，当我们使用索引查询数据时，检索出来的数据可能包含其他列，但走的索引树叶子节点只能查到当前列值以及主键ID，所以需要根据主键ID再去查一遍数据，得到SQL 所需的列\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我这边建了给订单号ID建了个索引，但我的SQL 是：select orderId,orderName from orderdetail where orderId = 123\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nSQL都订单ID索引，但在订单ID的索引树的叶子节点只有orderId和Id，而我们还想检索出orderName，所以MySQL 会拿到ID再去查出orderName给我们返回，这种操作就叫回表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n想要避免回表，也可以使用覆盖索引（能使用就使用，因为避免了回表操作）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的覆盖索引，实际上就是你想要查出的列刚好在叶子节点上都存在，比如我建了orderId和orderName联合索引，刚好我需要查询也是orderId和orderName，这些数据都存在索引树的叶子节点上，就不需要回表操作了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n既然你也提到了联合索引，我想问下你了解最左匹配原则吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，说明这个概念，还是举例子比较容易说明\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c>3 and d=4，则会在每个节点依次命中a、b、c，无法命中d\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n先匹配最左边的，索引只能用于查找key是否存在（相等），遇到范围查询 (>、<、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是最左匹配原则\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯嗯，我还想问下你们主键是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主键就自增的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那假设我不用MySQL自增的主键，你觉得会有什么问题呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先主键得保证它的唯一性和空间尽可能短吧，这两块是需要考虑的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n另外，由于索引的特性（有序），如果生成像uuid类似的主键，那插入的的性能是比自增的要差的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为生成的uuid，在插入时有可能需要移动磁盘块（比如，块内的空间在当前时刻已经存储满了，但新生成的uuid需要插入已满的块内，就需要移动块的数据）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\nOK…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg\"/>\n</div></div><br/>\n\n \n\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li><p><strong>为什么B+树？</strong></p>\n<ul>\n<li>数据无法一次load到内存，B+树是多路搜索树，只有叶子节点才存储数据，叶子节点之间链表进行关联。（树矮，易遍历）</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>什么是回表？</strong></p>\n<ul>\n<li>非聚簇索引在叶子节点只存储列值以及主键ID，有条件下尽可能用覆盖索引避免回表操作，提高查询速度</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>什么是最左匹配原则？</strong></p>\n<ul>\n<li>从最左边为起点开始连续匹配，遇到范围查询终止</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>主键非自增会有什么问题？</strong></p>\n<ul>\n<li>插入效率下降，存在移动块的数据问题</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n对MySQL InnoDB引擎的索引了解吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯啊，使用索引可以加快查询速度，其实就是将无序的数据变成有序（有序就能加快检索速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎中，索引的底层数据结构是B+树\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那为什么不使用红黑树或者B树呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n红黑树是「二叉查找树」的变种，一个Node节点只能存储一个Key和一个Value\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB和B+树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个Node节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低\n</div></div><br/>\n\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解了区别之后，其实就很容易发现，在数据不能一次加载至内存的场景下，数据需要被检索出来，选择B或B+树的理由就很充分了（一个Node节点存储信息更多（相较于二叉搜索树），树的高度更低，树的高度影响检索的速度）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nB+树相对于B树而言，它又有两种特性\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、B+树非叶子节点不存储数据，在相同的数据量下，B+树更加矮壮。（这个应该不用多解释了，数据都存储在叶子节点上，非叶子节点的存储能存储更多的索引，所以整棵树就更加矮壮）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、B+树叶子节点之间组成一个链表，方便于遍历查询（遍历操作在MySQL中比较常见）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我稍微解释一下吧，你可以脑补下画面\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们在MySQL InnoDB引擎下，每创建一个索引，相当于生成了一颗B+树\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「聚集(聚簇)索引」，那当前B+树的叶子节点存储着「主键和当前行的数据」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果该索引是「非聚簇索引」，那当前B+树的叶子节点存储着「主键和当前索引列值」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如写了一句sql：select * from user where id >=10，那只要定位到id为10的记录，然后在叶子节点之间通过遍历链表(叶子节点组成的链表)，即可以找到往后的记录了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n由于B树是会在非叶子节点也存储数据，要遍历的时候可能就得跨层检索，相对麻烦些\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n基于树的层级以及业务使用场景的特性，所以MySQL选择了B+树作为索引的底层数据结构\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于哈希结构，其实InnoDB引擎是「自适应」哈希索引的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，我们是干预不了）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯…那我了解了，顺便想问下，你知道什么叫做回表吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的回表其实就是，当我们使用索引查询数据时，检索出来的数据可能包含其他列，但走的索引树叶子节点只能查到当前列值以及主键ID，所以需要根据主键ID再去查一遍数据，得到SQL 所需的列\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我这边建了给订单号ID建了个索引，但我的SQL 是：select orderId,orderName from orderdetail where orderId = 123\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nSQL都订单ID索引，但在订单ID的索引树的叶子节点只有orderId和Id，而我们还想检索出orderName，所以MySQL 会拿到ID再去查出orderName给我们返回，这种操作就叫回表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n想要避免回表，也可以使用覆盖索引（能使用就使用，因为避免了回表操作）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所谓的覆盖索引，实际上就是你想要查出的列刚好在叶子节点上都存在，比如我建了orderId和orderName联合索引，刚好我需要查询也是orderId和orderName，这些数据都存在索引树的叶子节点上，就不需要回表操作了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n既然你也提到了联合索引，我想问下你了解最左匹配原则吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，说明这个概念，还是举例子比较容易说明\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c>3 and d=4，则会在每个节点依次命中a、b、c，无法命中d\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n先匹配最左边的，索引只能用于查找key是否存在（相等），遇到范围查询 (>、<、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是最左匹配原则\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n嗯嗯，我还想问下你们主键是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主键就自增的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span> \n那假设我不用MySQL自增的主键，你觉得会有什么问题呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先主键得保证它的唯一性和空间尽可能短吧，这两块是需要考虑的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n另外，由于索引的特性（有序），如果生成像uuid类似的主键，那插入的的性能是比自增的要差的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为生成的uuid，在插入时有可能需要移动磁盘块（比如，块内的空间在当前时刻已经存储满了，但新生成的uuid需要插入已满的块内，就需要移动块的数据）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\nOK…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg\"/>\n</div></div><br/>\n\n \n\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li><p><strong>为什么B+树？</strong></p>\n<ul>\n<li>数据无法一次load到内存，B+树是多路搜索树，只有叶子节点才存储数据，叶子节点之间链表进行关联。（树矮，易遍历）</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>什么是回表？</strong></p>\n<ul>\n<li>非聚簇索引在叶子节点只存储列值以及主键ID，有条件下尽可能用覆盖索引避免回表操作，提高查询速度</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>什么是最左匹配原则？</strong></p>\n<ul>\n<li>从最左边为起点开始连续匹配，遇到范围查询终止</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p><strong>主键非自增会有什么问题？</strong></p>\n<ul>\n<li>插入效率下降，存在移动块的数据问题</li>\n</ul>\n</li>\n</ul>\n"},{"title":"MySQL 闲谈 2","date":"2022-11-06T08:14:33.000Z","_content":"\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你是怎么理解InnoDB引擎中的事务的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n事务其目的是为了「保证数据最终的一致性」\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我给你发支付宝转了888块红包。那自然我的支付宝余额会扣减888块，你的支付宝余额会增加888块\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而事务就是保证我的余额扣减跟你的余额增添是同时成功或者同时失败的，这样这次转账就正常了\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那你了解事务的几大特性吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，就是ACID嘛，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n原子性指的是：当前事务的操作要么同时成功，要么同时失败。原子性由undo log日志来保证，因为undo log记载着数据修改前的信息\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如我们要 insert 一条数据了，那undo log 会记录的一条对应的 delete 日志。我们要 update 一条记录时，那undo log会记录之前的「旧值」的update记录\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果执行事务过程中出现异常的情况，那执行「回滚」。InnoDB引擎就是利用undo log记录下的数据，来将数据「恢复」到事务开始之前\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一致性我稍稍往后讲，我先来说下隔离性\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n隔离性指的是：在事务「并发」执行时，他们内部的操作不能互相干扰。如果多个事务可以同时操作一个数据，那么就会产生脏读、重复读、幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是，事务与事务之间需要存在「一定」的隔离，在InnoDB引擎中，定义了四种隔离级别供我们使用\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别是：read uncommit(读未提交)、read commit (读已提交)、repeatable read (可重复复读)、serializable (串行)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的隔离级别对事务之间的隔离性是不一样的（级别越高事务隔离性越好，但性能就越低），而隔离性是由MySQL的各种锁来实现的，只是它屏蔽了加锁的细节\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n持久性指的就是：一旦提交了事务，它对数据库的改变就应该是永久性的。说白了就是，会将数据持久化在硬盘上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而持久性由redo log 日志来保证，当我们要修改数据时，MySQL是先把这条记录所在的「页」找到，然后把该页加载到内存中，将对应记录进行修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n为了防止内存修改完了，MySQL就挂掉了（如果内存改完，直接挂掉，那这次的修改相当于就丢失了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL引入了redo log，内存写完了，然后会写一份redo log，这份redo log记载着这次在某个页上做了什么修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n即便MySQL在中途挂了，我们还可以根据redo log来对数据进行恢复\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nredo log 是顺序写的，写入速度很快。并且它记录的是物理修改（xxxx页做了xxx修改），文件的体积很小，恢复速度也很快\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回头再来讲一致性，「一致性」可以理解为我们使用事务的「目的」，而「隔离性」「原子性」「持久性」均是为了保障「一致性」的手段，保证一致性需要由应用程序代码来保证\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，如果事务在发生的过程中，出现了异常情况，此时你就得回滚事务，而不是强行提交事务来导致数据不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，挺好的，讲了蛮多的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，为了讲清楚隔离级别，我顺带来说下MySQL锁相关的知识吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下，按锁的粒度分类，可以简单分为行锁和表锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n行锁实际上是作用在索引之上的（索引上次已经说过了，这里就不赘述了）。当我们的SQL命中了索引，那锁住的就是命中条件内的索引节点（这种就是行锁），如果没有命中索引，那我们锁的就是整个索引树（表锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说就是：锁住的是整棵树还是某几个节点，完全取决于SQL条件是否有命中到对应的索引节点\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而行锁又可以简单分为读锁（共享锁、S锁）和写锁（排它锁、X锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n读锁是共享的，多个事务可以同时读取同一个资源，但不允许其他事务修改。写锁是排他的，写锁会阻塞其他的写锁和读锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我现在就再回到隔离级别上吧，就直接以例子来说明啦\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先来说下read uncommit(读未提交)。比如说：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单的定义就是：事务B读取到了事务A还没提交的数据，这种用专业术语来说叫做「脏读」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于锁的维度而言，其实就是在read uncommit隔离级别下，读不会加任何锁，而写会加排他锁。读什么锁都不加，这就让排他锁无法排它了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而我们又知道，对于更新操作而言，InnoDB是肯定会加写锁的（数据库是不可能允许在同一时间，更新同一条记录的）。而读操作，如果不加任何锁，那就会造成上面的脏读\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n脏读在生产环境下肯定是无法接受的，那如果读加锁的话，那意味着：当更新数据的时，就没办法读取了，这会极大地降低数据库性能\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MySQL InnoDB引擎层面，又有新的解决方案（解决加锁后读写性能问题），叫做MVCC(Multi-Version Concurrency Control)多版本并发控制\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MVCC下，就可以做到读写不阻塞，且避免了类似脏读这样的问题\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那MVCC是怎么做的呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC通过生成数据快照（Snapshot)，并用这个快照来提供一定级别（语句级或事务级）的一致性读取\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回到事务隔离级别下，针对于 read commit (读已提交) 隔离级别，它生成的就是语句级快照，而针对于repeatable read (可重复读)，它生成的就是事务级的快照\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n前面提到过read uncommit隔离级别下会产生脏读，而read commit (读已提交) 隔离级别解决了脏读。思想其实很简单：在读取的时候生成一个”版本号”，等到其他事务commit了之后，才会读取最新已commit的”版本号”数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：事务A读取了记录(生成版本号)，事务B修改了记录(此时加了写锁)，事务A再读取的时候，是依据最新的版本号来读取的(当事务B执行commit了之后，会生成一个新的版本号)，如果事务B还没有commit，那事务A读取的还是之前版本号的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n通过「版本」的概念，这样就解决了脏读的问题，而「版本」其实就是对应快照的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nread commit (读已提交) 解决了脏读，但也会有其他并发的问题。「不可重复读」：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不可重复读的例子：A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的】\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解MVCC基础之后，就很容易想到repeatable read (可重复复读)隔离级别是怎么避免不可重复读的问题了（前面也提到了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nrepeatable read (可重复复读)隔离级别是「事务级别」的快照！每次读取的都是「当前事务的版本」，即使当前数据被其他事务修改了(commit)，也只会读取当前事务版本的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而repeatable read (可重复复读)隔离级别会存在幻读的问题，「幻读」指的是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下的的repeatable read (可重复复读)隔离级别下，快照读MVCC影响下，已经解决了幻读的问题（因为它是读历史版本的数据）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而如果是当前读（指的是 select * from table for update），则需要配合间隙锁来解决幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n剩下的就是serializable (串行)隔离级别了，它的最高的隔离级别，相当于不允许事务的并发，事务与事务之间执行是串行的，它的效率最低，但同时也是最安全的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，不妨来说下MVCC的原理？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC的主要是通过read view和undo log来实现的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nundo log前面也提到了，它会记录修改数据之前的信息，事务中的原子性就是通过undo log来实现的。所以，有undo log可以帮我们找到「版本」的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而read view 实际上就是在查询时，InnoDB会生成一个read view，read view 有几个重要的字段，分别是：trx_ids（尚未提交commit的事务版本号集合），up_limit_id（下一次要生成的事务ID值），low_limit_id（尚未提交版本号的事务ID最小值）以及creator_trx_id（当前的事务版本号）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在每行数据有两列隐藏的字段，分别是DB_TRX_ID（记录着当前ID）以及DB_ROLL_PTR（指向上一个版本数据在undo log 里的位置指针）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n铺垫到这了，很容易就发现，MVCC其实就是靠「比对版本」来实现读写不阻塞，而版本的数据存在于undo log中\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而针对于不同的隔离级别（read commit和repeatable read），无非就是read commit隔离级别下，每次都获取一个新的read view，repeatable read隔离级别则每次事务只获取一个read view\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，OK的。细节就不考究了，今天就到这里吧\n</div></div><br/>\n\n\n \n\n\n\n### Summary\n\n- 事务为了保证数据的最终一致性\n\n###### \n\n\n- 事务有四大特性，分别是原子性、一致性、隔离性、持久性\n\t\n\t- 原子性由undo log保证\n\t- 持久性由redo log 保证\n\t- 隔离性由数据库隔离级别供我们选择，分别有read uncommit,read commit,repeatable read,serializable\n\t- 一致性是事务的目的，一致性由应用程序来保证\n\n###### \n\n- 事务并发会存在各种问题，分别有脏读、重复读、幻读问题，上面的不同隔离级别可以解决掉由于并发事务所造成的问题，而隔离级别实际上就是由MySQL锁来实现的\n\n\n###### \n\n- 频繁加锁会导致数据库性能低下，引入了MVCC多版本控制来实现读写不阻塞，提高数据库性能\n\n\n###### \n\n- MVCC原理即通过read view 以及undo log来实现\n","source":"_posts/MySQL-闲谈-2.md","raw":"---\ntitle: MySQL 闲谈 2\ndate: 2022-11-06 16:14:33\ntags:\n\t- 数据库\n\t- MySQL\n\t- 对话\n---\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你是怎么理解InnoDB引擎中的事务的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n事务其目的是为了「保证数据最终的一致性」\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我给你发支付宝转了888块红包。那自然我的支付宝余额会扣减888块，你的支付宝余额会增加888块\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而事务就是保证我的余额扣减跟你的余额增添是同时成功或者同时失败的，这样这次转账就正常了\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那你了解事务的几大特性吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，就是ACID嘛，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n原子性指的是：当前事务的操作要么同时成功，要么同时失败。原子性由undo log日志来保证，因为undo log记载着数据修改前的信息\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如我们要 insert 一条数据了，那undo log 会记录的一条对应的 delete 日志。我们要 update 一条记录时，那undo log会记录之前的「旧值」的update记录\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果执行事务过程中出现异常的情况，那执行「回滚」。InnoDB引擎就是利用undo log记录下的数据，来将数据「恢复」到事务开始之前\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一致性我稍稍往后讲，我先来说下隔离性\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n隔离性指的是：在事务「并发」执行时，他们内部的操作不能互相干扰。如果多个事务可以同时操作一个数据，那么就会产生脏读、重复读、幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是，事务与事务之间需要存在「一定」的隔离，在InnoDB引擎中，定义了四种隔离级别供我们使用\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别是：read uncommit(读未提交)、read commit (读已提交)、repeatable read (可重复复读)、serializable (串行)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的隔离级别对事务之间的隔离性是不一样的（级别越高事务隔离性越好，但性能就越低），而隔离性是由MySQL的各种锁来实现的，只是它屏蔽了加锁的细节\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n持久性指的就是：一旦提交了事务，它对数据库的改变就应该是永久性的。说白了就是，会将数据持久化在硬盘上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而持久性由redo log 日志来保证，当我们要修改数据时，MySQL是先把这条记录所在的「页」找到，然后把该页加载到内存中，将对应记录进行修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n为了防止内存修改完了，MySQL就挂掉了（如果内存改完，直接挂掉，那这次的修改相当于就丢失了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL引入了redo log，内存写完了，然后会写一份redo log，这份redo log记载着这次在某个页上做了什么修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n即便MySQL在中途挂了，我们还可以根据redo log来对数据进行恢复\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nredo log 是顺序写的，写入速度很快。并且它记录的是物理修改（xxxx页做了xxx修改），文件的体积很小，恢复速度也很快\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回头再来讲一致性，「一致性」可以理解为我们使用事务的「目的」，而「隔离性」「原子性」「持久性」均是为了保障「一致性」的手段，保证一致性需要由应用程序代码来保证\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，如果事务在发生的过程中，出现了异常情况，此时你就得回滚事务，而不是强行提交事务来导致数据不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，挺好的，讲了蛮多的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，为了讲清楚隔离级别，我顺带来说下MySQL锁相关的知识吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下，按锁的粒度分类，可以简单分为行锁和表锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n行锁实际上是作用在索引之上的（索引上次已经说过了，这里就不赘述了）。当我们的SQL命中了索引，那锁住的就是命中条件内的索引节点（这种就是行锁），如果没有命中索引，那我们锁的就是整个索引树（表锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说就是：锁住的是整棵树还是某几个节点，完全取决于SQL条件是否有命中到对应的索引节点\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而行锁又可以简单分为读锁（共享锁、S锁）和写锁（排它锁、X锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n读锁是共享的，多个事务可以同时读取同一个资源，但不允许其他事务修改。写锁是排他的，写锁会阻塞其他的写锁和读锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我现在就再回到隔离级别上吧，就直接以例子来说明啦\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先来说下read uncommit(读未提交)。比如说：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单的定义就是：事务B读取到了事务A还没提交的数据，这种用专业术语来说叫做「脏读」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于锁的维度而言，其实就是在read uncommit隔离级别下，读不会加任何锁，而写会加排他锁。读什么锁都不加，这就让排他锁无法排它了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而我们又知道，对于更新操作而言，InnoDB是肯定会加写锁的（数据库是不可能允许在同一时间，更新同一条记录的）。而读操作，如果不加任何锁，那就会造成上面的脏读\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n脏读在生产环境下肯定是无法接受的，那如果读加锁的话，那意味着：当更新数据的时，就没办法读取了，这会极大地降低数据库性能\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MySQL InnoDB引擎层面，又有新的解决方案（解决加锁后读写性能问题），叫做MVCC(Multi-Version Concurrency Control)多版本并发控制\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MVCC下，就可以做到读写不阻塞，且避免了类似脏读这样的问题\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那MVCC是怎么做的呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC通过生成数据快照（Snapshot)，并用这个快照来提供一定级别（语句级或事务级）的一致性读取\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回到事务隔离级别下，针对于 read commit (读已提交) 隔离级别，它生成的就是语句级快照，而针对于repeatable read (可重复读)，它生成的就是事务级的快照\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n前面提到过read uncommit隔离级别下会产生脏读，而read commit (读已提交) 隔离级别解决了脏读。思想其实很简单：在读取的时候生成一个”版本号”，等到其他事务commit了之后，才会读取最新已commit的”版本号”数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：事务A读取了记录(生成版本号)，事务B修改了记录(此时加了写锁)，事务A再读取的时候，是依据最新的版本号来读取的(当事务B执行commit了之后，会生成一个新的版本号)，如果事务B还没有commit，那事务A读取的还是之前版本号的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n通过「版本」的概念，这样就解决了脏读的问题，而「版本」其实就是对应快照的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nread commit (读已提交) 解决了脏读，但也会有其他并发的问题。「不可重复读」：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不可重复读的例子：A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的】\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解MVCC基础之后，就很容易想到repeatable read (可重复复读)隔离级别是怎么避免不可重复读的问题了（前面也提到了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nrepeatable read (可重复复读)隔离级别是「事务级别」的快照！每次读取的都是「当前事务的版本」，即使当前数据被其他事务修改了(commit)，也只会读取当前事务版本的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而repeatable read (可重复复读)隔离级别会存在幻读的问题，「幻读」指的是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下的的repeatable read (可重复复读)隔离级别下，快照读MVCC影响下，已经解决了幻读的问题（因为它是读历史版本的数据）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而如果是当前读（指的是 select * from table for update），则需要配合间隙锁来解决幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n剩下的就是serializable (串行)隔离级别了，它的最高的隔离级别，相当于不允许事务的并发，事务与事务之间执行是串行的，它的效率最低，但同时也是最安全的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，不妨来说下MVCC的原理？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC的主要是通过read view和undo log来实现的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nundo log前面也提到了，它会记录修改数据之前的信息，事务中的原子性就是通过undo log来实现的。所以，有undo log可以帮我们找到「版本」的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而read view 实际上就是在查询时，InnoDB会生成一个read view，read view 有几个重要的字段，分别是：trx_ids（尚未提交commit的事务版本号集合），up_limit_id（下一次要生成的事务ID值），low_limit_id（尚未提交版本号的事务ID最小值）以及creator_trx_id（当前的事务版本号）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在每行数据有两列隐藏的字段，分别是DB_TRX_ID（记录着当前ID）以及DB_ROLL_PTR（指向上一个版本数据在undo log 里的位置指针）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n铺垫到这了，很容易就发现，MVCC其实就是靠「比对版本」来实现读写不阻塞，而版本的数据存在于undo log中\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而针对于不同的隔离级别（read commit和repeatable read），无非就是read commit隔离级别下，每次都获取一个新的read view，repeatable read隔离级别则每次事务只获取一个read view\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，OK的。细节就不考究了，今天就到这里吧\n</div></div><br/>\n\n\n \n\n\n\n### Summary\n\n- 事务为了保证数据的最终一致性\n\n###### \n\n\n- 事务有四大特性，分别是原子性、一致性、隔离性、持久性\n\t\n\t- 原子性由undo log保证\n\t- 持久性由redo log 保证\n\t- 隔离性由数据库隔离级别供我们选择，分别有read uncommit,read commit,repeatable read,serializable\n\t- 一致性是事务的目的，一致性由应用程序来保证\n\n###### \n\n- 事务并发会存在各种问题，分别有脏读、重复读、幻读问题，上面的不同隔离级别可以解决掉由于并发事务所造成的问题，而隔离级别实际上就是由MySQL锁来实现的\n\n\n###### \n\n- 频繁加锁会导致数据库性能低下，引入了MVCC多版本控制来实现读写不阻塞，提高数据库性能\n\n\n###### \n\n- MVCC原理即通过read view 以及undo log来实现\n","slug":"MySQL-闲谈-2","published":1,"updated":"2022-11-07T08:54:14.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhv000jg7i5gb94fqno","content":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你是怎么理解InnoDB引擎中的事务的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n事务其目的是为了「保证数据最终的一致性」\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我给你发支付宝转了888块红包。那自然我的支付宝余额会扣减888块，你的支付宝余额会增加888块\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而事务就是保证我的余额扣减跟你的余额增添是同时成功或者同时失败的，这样这次转账就正常了\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那你了解事务的几大特性吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，就是ACID嘛，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n原子性指的是：当前事务的操作要么同时成功，要么同时失败。原子性由undo log日志来保证，因为undo log记载着数据修改前的信息\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如我们要 insert 一条数据了，那undo log 会记录的一条对应的 delete 日志。我们要 update 一条记录时，那undo log会记录之前的「旧值」的update记录\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果执行事务过程中出现异常的情况，那执行「回滚」。InnoDB引擎就是利用undo log记录下的数据，来将数据「恢复」到事务开始之前\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一致性我稍稍往后讲，我先来说下隔离性\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n隔离性指的是：在事务「并发」执行时，他们内部的操作不能互相干扰。如果多个事务可以同时操作一个数据，那么就会产生脏读、重复读、幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是，事务与事务之间需要存在「一定」的隔离，在InnoDB引擎中，定义了四种隔离级别供我们使用\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别是：read uncommit(读未提交)、read commit (读已提交)、repeatable read (可重复复读)、serializable (串行)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的隔离级别对事务之间的隔离性是不一样的（级别越高事务隔离性越好，但性能就越低），而隔离性是由MySQL的各种锁来实现的，只是它屏蔽了加锁的细节\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n持久性指的就是：一旦提交了事务，它对数据库的改变就应该是永久性的。说白了就是，会将数据持久化在硬盘上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而持久性由redo log 日志来保证，当我们要修改数据时，MySQL是先把这条记录所在的「页」找到，然后把该页加载到内存中，将对应记录进行修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n为了防止内存修改完了，MySQL就挂掉了（如果内存改完，直接挂掉，那这次的修改相当于就丢失了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL引入了redo log，内存写完了，然后会写一份redo log，这份redo log记载着这次在某个页上做了什么修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n即便MySQL在中途挂了，我们还可以根据redo log来对数据进行恢复\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nredo log 是顺序写的，写入速度很快。并且它记录的是物理修改（xxxx页做了xxx修改），文件的体积很小，恢复速度也很快\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回头再来讲一致性，「一致性」可以理解为我们使用事务的「目的」，而「隔离性」「原子性」「持久性」均是为了保障「一致性」的手段，保证一致性需要由应用程序代码来保证\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，如果事务在发生的过程中，出现了异常情况，此时你就得回滚事务，而不是强行提交事务来导致数据不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，挺好的，讲了蛮多的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，为了讲清楚隔离级别，我顺带来说下MySQL锁相关的知识吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下，按锁的粒度分类，可以简单分为行锁和表锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n行锁实际上是作用在索引之上的（索引上次已经说过了，这里就不赘述了）。当我们的SQL命中了索引，那锁住的就是命中条件内的索引节点（这种就是行锁），如果没有命中索引，那我们锁的就是整个索引树（表锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说就是：锁住的是整棵树还是某几个节点，完全取决于SQL条件是否有命中到对应的索引节点\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而行锁又可以简单分为读锁（共享锁、S锁）和写锁（排它锁、X锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n读锁是共享的，多个事务可以同时读取同一个资源，但不允许其他事务修改。写锁是排他的，写锁会阻塞其他的写锁和读锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我现在就再回到隔离级别上吧，就直接以例子来说明啦\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先来说下read uncommit(读未提交)。比如说：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单的定义就是：事务B读取到了事务A还没提交的数据，这种用专业术语来说叫做「脏读」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于锁的维度而言，其实就是在read uncommit隔离级别下，读不会加任何锁，而写会加排他锁。读什么锁都不加，这就让排他锁无法排它了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而我们又知道，对于更新操作而言，InnoDB是肯定会加写锁的（数据库是不可能允许在同一时间，更新同一条记录的）。而读操作，如果不加任何锁，那就会造成上面的脏读\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n脏读在生产环境下肯定是无法接受的，那如果读加锁的话，那意味着：当更新数据的时，就没办法读取了，这会极大地降低数据库性能\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MySQL InnoDB引擎层面，又有新的解决方案（解决加锁后读写性能问题），叫做MVCC(Multi-Version Concurrency Control)多版本并发控制\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MVCC下，就可以做到读写不阻塞，且避免了类似脏读这样的问题\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那MVCC是怎么做的呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC通过生成数据快照（Snapshot)，并用这个快照来提供一定级别（语句级或事务级）的一致性读取\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回到事务隔离级别下，针对于 read commit (读已提交) 隔离级别，它生成的就是语句级快照，而针对于repeatable read (可重复读)，它生成的就是事务级的快照\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n前面提到过read uncommit隔离级别下会产生脏读，而read commit (读已提交) 隔离级别解决了脏读。思想其实很简单：在读取的时候生成一个”版本号”，等到其他事务commit了之后，才会读取最新已commit的”版本号”数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：事务A读取了记录(生成版本号)，事务B修改了记录(此时加了写锁)，事务A再读取的时候，是依据最新的版本号来读取的(当事务B执行commit了之后，会生成一个新的版本号)，如果事务B还没有commit，那事务A读取的还是之前版本号的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n通过「版本」的概念，这样就解决了脏读的问题，而「版本」其实就是对应快照的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nread commit (读已提交) 解决了脏读，但也会有其他并发的问题。「不可重复读」：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不可重复读的例子：A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的】\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解MVCC基础之后，就很容易想到repeatable read (可重复复读)隔离级别是怎么避免不可重复读的问题了（前面也提到了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nrepeatable read (可重复复读)隔离级别是「事务级别」的快照！每次读取的都是「当前事务的版本」，即使当前数据被其他事务修改了(commit)，也只会读取当前事务版本的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而repeatable read (可重复复读)隔离级别会存在幻读的问题，「幻读」指的是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下的的repeatable read (可重复复读)隔离级别下，快照读MVCC影响下，已经解决了幻读的问题（因为它是读历史版本的数据）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而如果是当前读（指的是 select * from table for update），则需要配合间隙锁来解决幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n剩下的就是serializable (串行)隔离级别了，它的最高的隔离级别，相当于不允许事务的并发，事务与事务之间执行是串行的，它的效率最低，但同时也是最安全的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，不妨来说下MVCC的原理？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC的主要是通过read view和undo log来实现的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nundo log前面也提到了，它会记录修改数据之前的信息，事务中的原子性就是通过undo log来实现的。所以，有undo log可以帮我们找到「版本」的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而read view 实际上就是在查询时，InnoDB会生成一个read view，read view 有几个重要的字段，分别是：trx_ids（尚未提交commit的事务版本号集合），up_limit_id（下一次要生成的事务ID值），low_limit_id（尚未提交版本号的事务ID最小值）以及creator_trx_id（当前的事务版本号）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在每行数据有两列隐藏的字段，分别是DB_TRX_ID（记录着当前ID）以及DB_ROLL_PTR（指向上一个版本数据在undo log 里的位置指针）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n铺垫到这了，很容易就发现，MVCC其实就是靠「比对版本」来实现读写不阻塞，而版本的数据存在于undo log中\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而针对于不同的隔离级别（read commit和repeatable read），无非就是read commit隔离级别下，每次都获取一个新的read view，repeatable read隔离级别则每次事务只获取一个read view\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，OK的。细节就不考究了，今天就到这里吧\n</div></div><br/>\n\n\n \n\n\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>事务为了保证数据的最终一致性</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>事务有四大特性，分别是原子性、一致性、隔离性、持久性</p>\n<ul>\n<li>原子性由undo log保证</li>\n<li>持久性由redo log 保证</li>\n<li>隔离性由数据库隔离级别供我们选择，分别有read uncommit,read commit,repeatable read,serializable</li>\n<li>一致性是事务的目的，一致性由应用程序来保证</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>事务并发会存在各种问题，分别有脏读、重复读、幻读问题，上面的不同隔离级别可以解决掉由于并发事务所造成的问题，而隔离级别实际上就是由MySQL锁来实现的</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>频繁加锁会导致数据库性能低下，引入了MVCC多版本控制来实现读写不阻塞，提高数据库性能</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>MVCC原理即通过read view 以及undo log来实现</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你是怎么理解InnoDB引擎中的事务的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n事务其目的是为了「保证数据最终的一致性」\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n举个例子，我给你发支付宝转了888块红包。那自然我的支付宝余额会扣减888块，你的支付宝余额会增加888块\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而事务就是保证我的余额扣减跟你的余额增添是同时成功或者同时失败的，这样这次转账就正常了\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那你了解事务的几大特性吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，就是ACID嘛，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n原子性指的是：当前事务的操作要么同时成功，要么同时失败。原子性由undo log日志来保证，因为undo log记载着数据修改前的信息\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如我们要 insert 一条数据了，那undo log 会记录的一条对应的 delete 日志。我们要 update 一条记录时，那undo log会记录之前的「旧值」的update记录\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果执行事务过程中出现异常的情况，那执行「回滚」。InnoDB引擎就是利用undo log记录下的数据，来将数据「恢复」到事务开始之前\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一致性我稍稍往后讲，我先来说下隔离性\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n隔离性指的是：在事务「并发」执行时，他们内部的操作不能互相干扰。如果多个事务可以同时操作一个数据，那么就会产生脏读、重复读、幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是，事务与事务之间需要存在「一定」的隔离，在InnoDB引擎中，定义了四种隔离级别供我们使用\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别是：read uncommit(读未提交)、read commit (读已提交)、repeatable read (可重复复读)、serializable (串行)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的隔离级别对事务之间的隔离性是不一样的（级别越高事务隔离性越好，但性能就越低），而隔离性是由MySQL的各种锁来实现的，只是它屏蔽了加锁的细节\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n持久性指的就是：一旦提交了事务，它对数据库的改变就应该是永久性的。说白了就是，会将数据持久化在硬盘上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而持久性由redo log 日志来保证，当我们要修改数据时，MySQL是先把这条记录所在的「页」找到，然后把该页加载到内存中，将对应记录进行修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n为了防止内存修改完了，MySQL就挂掉了（如果内存改完，直接挂掉，那这次的修改相当于就丢失了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL引入了redo log，内存写完了，然后会写一份redo log，这份redo log记载着这次在某个页上做了什么修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n即便MySQL在中途挂了，我们还可以根据redo log来对数据进行恢复\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nredo log 是顺序写的，写入速度很快。并且它记录的是物理修改（xxxx页做了xxx修改），文件的体积很小，恢复速度也很快\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回头再来讲一致性，「一致性」可以理解为我们使用事务的「目的」，而「隔离性」「原子性」「持久性」均是为了保障「一致性」的手段，保证一致性需要由应用程序代码来保证\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，如果事务在发生的过程中，出现了异常情况，此时你就得回滚事务，而不是强行提交事务来导致数据不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，挺好的，讲了蛮多的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，为了讲清楚隔离级别，我顺带来说下MySQL锁相关的知识吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下，按锁的粒度分类，可以简单分为行锁和表锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n行锁实际上是作用在索引之上的（索引上次已经说过了，这里就不赘述了）。当我们的SQL命中了索引，那锁住的就是命中条件内的索引节点（这种就是行锁），如果没有命中索引，那我们锁的就是整个索引树（表锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说就是：锁住的是整棵树还是某几个节点，完全取决于SQL条件是否有命中到对应的索引节点\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而行锁又可以简单分为读锁（共享锁、S锁）和写锁（排它锁、X锁）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n读锁是共享的，多个事务可以同时读取同一个资源，但不允许其他事务修改。写锁是排他的，写锁会阻塞其他的写锁和读锁\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我现在就再回到隔离级别上吧，就直接以例子来说明啦\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先来说下read uncommit(读未提交)。比如说：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单的定义就是：事务B读取到了事务A还没提交的数据，这种用专业术语来说叫做「脏读」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于锁的维度而言，其实就是在read uncommit隔离级别下，读不会加任何锁，而写会加排他锁。读什么锁都不加，这就让排他锁无法排它了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而我们又知道，对于更新操作而言，InnoDB是肯定会加写锁的（数据库是不可能允许在同一时间，更新同一条记录的）。而读操作，如果不加任何锁，那就会造成上面的脏读\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n脏读在生产环境下肯定是无法接受的，那如果读加锁的话，那意味着：当更新数据的时，就没办法读取了，这会极大地降低数据库性能\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MySQL InnoDB引擎层面，又有新的解决方案（解决加锁后读写性能问题），叫做MVCC(Multi-Version Concurrency Control)多版本并发控制\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在MVCC下，就可以做到读写不阻塞，且避免了类似脏读这样的问题\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那MVCC是怎么做的呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC通过生成数据快照（Snapshot)，并用这个快照来提供一定级别（语句级或事务级）的一致性读取\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n回到事务隔离级别下，针对于 read commit (读已提交) 隔离级别，它生成的就是语句级快照，而针对于repeatable read (可重复读)，它生成的就是事务级的快照\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n前面提到过read uncommit隔离级别下会产生脏读，而read commit (读已提交) 隔离级别解决了脏读。思想其实很简单：在读取的时候生成一个”版本号”，等到其他事务commit了之后，才会读取最新已commit的”版本号”数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：事务A读取了记录(生成版本号)，事务B修改了记录(此时加了写锁)，事务A再读取的时候，是依据最新的版本号来读取的(当事务B执行commit了之后，会生成一个新的版本号)，如果事务B还没有commit，那事务A读取的还是之前版本号的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n通过「版本」的概念，这样就解决了脏读的问题，而「版本」其实就是对应快照的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nread commit (读已提交) 解决了脏读，但也会有其他并发的问题。「不可重复读」：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不可重复读的例子：A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的】\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n了解MVCC基础之后，就很容易想到repeatable read (可重复复读)隔离级别是怎么避免不可重复读的问题了（前面也提到了）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nrepeatable read (可重复复读)隔离级别是「事务级别」的快照！每次读取的都是「当前事务的版本」，即使当前数据被其他事务修改了(commit)，也只会读取当前事务版本的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而repeatable read (可重复复读)隔离级别会存在幻读的问题，「幻读」指的是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在InnoDB引擎下的的repeatable read (可重复复读)隔离级别下，快照读MVCC影响下，已经解决了幻读的问题（因为它是读历史版本的数据）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而如果是当前读（指的是 select * from table for update），则需要配合间隙锁来解决幻读的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n剩下的就是serializable (串行)隔离级别了，它的最高的隔离级别，相当于不允许事务的并发，事务与事务之间执行是串行的，它的效率最低，但同时也是最安全的\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，不妨来说下MVCC的原理？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMVCC的主要是通过read view和undo log来实现的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nundo log前面也提到了，它会记录修改数据之前的信息，事务中的原子性就是通过undo log来实现的。所以，有undo log可以帮我们找到「版本」的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而read view 实际上就是在查询时，InnoDB会生成一个read view，read view 有几个重要的字段，分别是：trx_ids（尚未提交commit的事务版本号集合），up_limit_id（下一次要生成的事务ID值），low_limit_id（尚未提交版本号的事务ID最小值）以及creator_trx_id（当前的事务版本号）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在每行数据有两列隐藏的字段，分别是DB_TRX_ID（记录着当前ID）以及DB_ROLL_PTR（指向上一个版本数据在undo log 里的位置指针）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n铺垫到这了，很容易就发现，MVCC其实就是靠「比对版本」来实现读写不阻塞，而版本的数据存在于undo log中\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而针对于不同的隔离级别（read commit和repeatable read），无非就是read commit隔离级别下，每次都获取一个新的read view，repeatable read隔离级别则每次事务只获取一个read view\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，OK的。细节就不考究了，今天就到这里吧\n</div></div><br/>\n\n\n \n\n\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>事务为了保证数据的最终一致性</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>事务有四大特性，分别是原子性、一致性、隔离性、持久性</p>\n<ul>\n<li>原子性由undo log保证</li>\n<li>持久性由redo log 保证</li>\n<li>隔离性由数据库隔离级别供我们选择，分别有read uncommit,read commit,repeatable read,serializable</li>\n<li>一致性是事务的目的，一致性由应用程序来保证</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>事务并发会存在各种问题，分别有脏读、重复读、幻读问题，上面的不同隔离级别可以解决掉由于并发事务所造成的问题，而隔离级别实际上就是由MySQL锁来实现的</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>频繁加锁会导致数据库性能低下，引入了MVCC多版本控制来实现读写不阻塞，提高数据库性能</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>MVCC原理即通过read view 以及undo log来实现</li>\n</ul>\n"},{"title":"The First Blog","date":"2022-10-22T13:16:22.000Z","_content":"\n\n\"开始记录进步与欢乐！\"\n","source":"_posts/The-First-Blog.md","raw":"---\ntitle: The First Blog\ndate: 2022-10-22 21:16:22\ntags:\n---\n\n\n\"开始记录进步与欢乐！\"\n","slug":"The-First-Blog","published":1,"updated":"2022-10-22T13:16:58.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhv000lg7i55lhd1jh8","content":"<p>“开始记录进步与欢乐！”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“开始记录进步与欢乐！”</p>\n"},{"title":"MySQL 闲谈 3","date":"2022-11-06T08:20:23.000Z","_content":"\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n要不你来讲讲你们对MySQL是怎么调优的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点一般是在「开发规范」、「数据库索引」又或者说解决线上慢查询上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而对于MySQL内部的参数调优，由专业的DBA来搞\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n扯了这么多，你就是想表达你不会MySQL参数调优，对吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n草，被发现了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，首先，我们在生产环境下，创建数据库表，都是在工单系统下完成的（那就自然需要DBA审批）。如果在创建表时检测到没有创建索引，那就会直接提示warning（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n理论上来说，如果表有一定的数据量，那就应该要创建对应的索引。从数据库查询数据需要注意的地方还是蛮多的，其中很多都是平时积累来的。比如说：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n1. 是否能使用「覆盖索引」，减少「回表」所消耗的时间。意味着，我们在select 的时候，一定要指明对应的列，而不是select *\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n2. 考虑是否组建「联合索引」，如果组建「联合索引」，尽量将区分度最高的放在最左边，并且需要考虑「最左匹配原则」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n3.对索引进行函数操作或者表达式计算会导致索引失效\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n4.利用子查询优化超多分页场景。比如 limit offset , n 在MySQL是获取 offset + n的记录，再返回n条。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n5.通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过show profile 来查看SQL对系统资源的损耗情况（不过一般还是比较少用到的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n6.在开启事务后，在事务内尽可能只操作数据库，并有意识地减少锁的持有时间（比如在事务内需要插入&&修改数据，那可以先插入后修改。因为修改是更新操作，会加行锁。如果先更新，那并发下可能会导致多个事务的请求等待行锁释放）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，我们这边用的是Read Commit（读已提交），MySQL默认用的是Repeatable read（可重复读）。选用什么隔离级别，主要看应用场景嘛，因为隔离级别越低，事务并发性能越高\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一般互联网公司都选择Read Commit作为主要的隔离级别）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Repeatable read（可重复读）隔离级别，就有可能因为「间隙锁」导致的死锁问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n但可能你已经知道，MySQL默认的隔离级别为Repeatable read。很大一部分原因是在最开始的时候，MySQL的binlog没有row模式，在read commit隔离级别下会存在「主从数据不一致」的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nbinlog记录了数据库表结构和表数据「变更」，比如update/delete/insert/truncate/create。在MySQL中，主从同步实际上就是应用了binlog来实现的（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n有了该历史原因，所以MySQL就将默认的隔离级别设置为Repeatable read\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯嗯，当然遇到过了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你们是怎么做的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果走对了索引，但查询还是慢，那一般来说就是表的数据量实在是太大了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，考虑能不能把「旧的数据」给”删掉”，对于我们公司而言，我们都会把数据同步到Hive，说明已经离线存储了一份了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那如果「旧的数据」已经没有查询的业务了，那最简单的办法肯定是”删掉”部分数据咯。数据量降低了，那自然，检索速度就快了…\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，但一般不会删的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n没错，只有极少部分业务可以删掉数据（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n随后，就考虑另一种情况，能不能在查询之前，直接走一层缓存（Redis）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而走缓存的话，又要看业务能不能忍受读取的「非真正实时」的数据（毕竟Redis和MySQL的数据一致性需要保证），如果查询条件相对复杂且多变的话（涉及各种group by 和sum），那走缓存也不是一种好的办法，维护起来就不方便了…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n再看看是不是有「字符串」检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走Elasticsearch了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL->Elasticsearch需要有对应的同步程序(一般就是监听MySQL的binlog，解析binlog后导入到Elasticsearch)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果还不是的话，那考虑要不要根据查询条件的维度，做相对应的聚合表，线上的请求就查询聚合表的数据，不走原表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，用户下单后，有一份订单明细，而订单明细表的量级太大。但在产品侧(前台)透出的查询功能是以「天」维度来展示的，那就可以将每个用户的每天数据聚合起来，在聚合表就是一个用户一天只有一条汇总后的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n查询走聚合后的表，那速度肯定杠杠的（聚合后的表数据量肯定比原始表要少很多）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n思路大致的就是「以空间换时间」，相同的数据换别的地方也存储一份，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n你说到这个，我就不困了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在MySQL读写都有瓶颈，那首先看下目前MySQL的架构是怎么样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果是单库的，那是不是可以考虑升级至主从架构，实现读写分离\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单理解就是：主库接收写请求，从库接收读请求。从库的数据由主库发送的binlog进而更新，实现主从数据一致（在一般场景下，主从的数据是通过异步来保证最终一致性的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在主从架构下，读写仍存在瓶颈，那就要考虑是否要分库分表了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至少在我前公司的架构下，业务是区分的。流量有流量数据库，广告有广告的数据库，商品有商品的数据库。所以，我这里讲的分库分表的含义是：在原来的某个库的某个表进而拆分\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，现在我有一张业务订单表，这张订单表在广告库中，假定这张业务订单表已经有1亿数据量了，现在我要分库分表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那就会将这张表的数据分至多个广告库以及多张表中（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分库分表的最明显的好处就是把请求进行均摊（本来单个库单个表有一亿的数据，那假设我分开8个库，那每个库1200+W的数据量，每个库下分8张表，那每张表就150W的数据量）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你们是以什么来作为分库键的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n按照我们这边的经验，一般来说是按照userId的（因为按照用户的维度查询比较多），如果要按照其他的维度进行查询，那还是参照上面的的思路（以空间换时间）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那分库分表后的ID是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就涉及到分布式ID生成的方式了，思路有很多。有借助MySQL自增的，有借助Redis自增的，有基于「雪花算法」自增的。具体使用哪种方式，那就看公司的技术栈了，一般使用Redis和基于「雪花算法」实现用得比较多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于为什么强调自增（还是跟索引是有序有关，前面已经讲过了，你应该还记得）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那如果我要分库分表了，迁移的过程是怎么样的呢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们一般采取「双写」的方式来进行迁移，大致步骤就是\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、增量的消息各自往新表和旧表写一份\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、将旧表的数据迁移至新库\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、迟早新表的数据都会追得上旧表（在某个节点上数据是同步的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四、校验新表和老表的数据是否正常（主要看能不能对得上）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n五、开启双读（一部分流量走新表，一部分流量走老表），相当于灰度上线的过程\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n六、读流量全部切新表，停止老表的写入\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n七、提前准备回滚机制，临时切换失败能恢复正常业务以及有修数据的相关程序\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…今天就到这吧\n</div></div><br/>\n\n \n\n### Summary\n\n- 数据库表存在一定数据量，就需要有对应的索引\n\n###### \n\n\n- 发现慢查询时，检查是否走对索引，是否能用更好的索引进行优化查询速度，查看使用索引的姿势有没有问题\n\n###### \n\n\t\n- 当索引解决不了慢查询时，一般由于业务表的数据量太大导致，利用空间换时间的思想\n\n###### \n\n\n- 当读写性能均遇到瓶颈时，先考虑能否升级数据库架构即可解决问题，若不能则需要考虑分库分表\n\n###### \n\n\t\n- 分库分表虽然能解决掉读写瓶颈，但同时会带来各种问题，需要提前调研解决方案和踩坑\n","source":"_posts/MySQL-闲谈-3.md","raw":"---\ntitle: MySQL 闲谈 3\ndate: 2022-11-06 16:20:23\ntags:\n\t- 数据库\n\t- MySQL\n\t- 对话\n---\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n要不你来讲讲你们对MySQL是怎么调优的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点一般是在「开发规范」、「数据库索引」又或者说解决线上慢查询上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而对于MySQL内部的参数调优，由专业的DBA来搞\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n扯了这么多，你就是想表达你不会MySQL参数调优，对吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n草，被发现了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，首先，我们在生产环境下，创建数据库表，都是在工单系统下完成的（那就自然需要DBA审批）。如果在创建表时检测到没有创建索引，那就会直接提示warning（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n理论上来说，如果表有一定的数据量，那就应该要创建对应的索引。从数据库查询数据需要注意的地方还是蛮多的，其中很多都是平时积累来的。比如说：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n1. 是否能使用「覆盖索引」，减少「回表」所消耗的时间。意味着，我们在select 的时候，一定要指明对应的列，而不是select *\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n2. 考虑是否组建「联合索引」，如果组建「联合索引」，尽量将区分度最高的放在最左边，并且需要考虑「最左匹配原则」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n3.对索引进行函数操作或者表达式计算会导致索引失效\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n4.利用子查询优化超多分页场景。比如 limit offset , n 在MySQL是获取 offset + n的记录，再返回n条。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n5.通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过show profile 来查看SQL对系统资源的损耗情况（不过一般还是比较少用到的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n6.在开启事务后，在事务内尽可能只操作数据库，并有意识地减少锁的持有时间（比如在事务内需要插入&&修改数据，那可以先插入后修改。因为修改是更新操作，会加行锁。如果先更新，那并发下可能会导致多个事务的请求等待行锁释放）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，我们这边用的是Read Commit（读已提交），MySQL默认用的是Repeatable read（可重复读）。选用什么隔离级别，主要看应用场景嘛，因为隔离级别越低，事务并发性能越高\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一般互联网公司都选择Read Commit作为主要的隔离级别）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Repeatable read（可重复读）隔离级别，就有可能因为「间隙锁」导致的死锁问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n但可能你已经知道，MySQL默认的隔离级别为Repeatable read。很大一部分原因是在最开始的时候，MySQL的binlog没有row模式，在read commit隔离级别下会存在「主从数据不一致」的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nbinlog记录了数据库表结构和表数据「变更」，比如update/delete/insert/truncate/create。在MySQL中，主从同步实际上就是应用了binlog来实现的（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n有了该历史原因，所以MySQL就将默认的隔离级别设置为Repeatable read\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯嗯，当然遇到过了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你们是怎么做的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果走对了索引，但查询还是慢，那一般来说就是表的数据量实在是太大了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，考虑能不能把「旧的数据」给”删掉”，对于我们公司而言，我们都会把数据同步到Hive，说明已经离线存储了一份了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那如果「旧的数据」已经没有查询的业务了，那最简单的办法肯定是”删掉”部分数据咯。数据量降低了，那自然，检索速度就快了…\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，但一般不会删的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n没错，只有极少部分业务可以删掉数据（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n随后，就考虑另一种情况，能不能在查询之前，直接走一层缓存（Redis）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而走缓存的话，又要看业务能不能忍受读取的「非真正实时」的数据（毕竟Redis和MySQL的数据一致性需要保证），如果查询条件相对复杂且多变的话（涉及各种group by 和sum），那走缓存也不是一种好的办法，维护起来就不方便了…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n再看看是不是有「字符串」检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走Elasticsearch了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL->Elasticsearch需要有对应的同步程序(一般就是监听MySQL的binlog，解析binlog后导入到Elasticsearch)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果还不是的话，那考虑要不要根据查询条件的维度，做相对应的聚合表，线上的请求就查询聚合表的数据，不走原表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，用户下单后，有一份订单明细，而订单明细表的量级太大。但在产品侧(前台)透出的查询功能是以「天」维度来展示的，那就可以将每个用户的每天数据聚合起来，在聚合表就是一个用户一天只有一条汇总后的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n查询走聚合后的表，那速度肯定杠杠的（聚合后的表数据量肯定比原始表要少很多）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n思路大致的就是「以空间换时间」，相同的数据换别的地方也存储一份，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n你说到这个，我就不困了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在MySQL读写都有瓶颈，那首先看下目前MySQL的架构是怎么样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果是单库的，那是不是可以考虑升级至主从架构，实现读写分离\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单理解就是：主库接收写请求，从库接收读请求。从库的数据由主库发送的binlog进而更新，实现主从数据一致（在一般场景下，主从的数据是通过异步来保证最终一致性的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在主从架构下，读写仍存在瓶颈，那就要考虑是否要分库分表了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至少在我前公司的架构下，业务是区分的。流量有流量数据库，广告有广告的数据库，商品有商品的数据库。所以，我这里讲的分库分表的含义是：在原来的某个库的某个表进而拆分\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，现在我有一张业务订单表，这张订单表在广告库中，假定这张业务订单表已经有1亿数据量了，现在我要分库分表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那就会将这张表的数据分至多个广告库以及多张表中（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分库分表的最明显的好处就是把请求进行均摊（本来单个库单个表有一亿的数据，那假设我分开8个库，那每个库1200+W的数据量，每个库下分8张表，那每张表就150W的数据量）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你们是以什么来作为分库键的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n按照我们这边的经验，一般来说是按照userId的（因为按照用户的维度查询比较多），如果要按照其他的维度进行查询，那还是参照上面的的思路（以空间换时间）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那分库分表后的ID是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就涉及到分布式ID生成的方式了，思路有很多。有借助MySQL自增的，有借助Redis自增的，有基于「雪花算法」自增的。具体使用哪种方式，那就看公司的技术栈了，一般使用Redis和基于「雪花算法」实现用得比较多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于为什么强调自增（还是跟索引是有序有关，前面已经讲过了，你应该还记得）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那如果我要分库分表了，迁移的过程是怎么样的呢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们一般采取「双写」的方式来进行迁移，大致步骤就是\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、增量的消息各自往新表和旧表写一份\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、将旧表的数据迁移至新库\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、迟早新表的数据都会追得上旧表（在某个节点上数据是同步的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四、校验新表和老表的数据是否正常（主要看能不能对得上）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n五、开启双读（一部分流量走新表，一部分流量走老表），相当于灰度上线的过程\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n六、读流量全部切新表，停止老表的写入\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n七、提前准备回滚机制，临时切换失败能恢复正常业务以及有修数据的相关程序\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…今天就到这吧\n</div></div><br/>\n\n \n\n### Summary\n\n- 数据库表存在一定数据量，就需要有对应的索引\n\n###### \n\n\n- 发现慢查询时，检查是否走对索引，是否能用更好的索引进行优化查询速度，查看使用索引的姿势有没有问题\n\n###### \n\n\t\n- 当索引解决不了慢查询时，一般由于业务表的数据量太大导致，利用空间换时间的思想\n\n###### \n\n\n- 当读写性能均遇到瓶颈时，先考虑能否升级数据库架构即可解决问题，若不能则需要考虑分库分表\n\n###### \n\n\t\n- 分库分表虽然能解决掉读写瓶颈，但同时会带来各种问题，需要提前调研解决方案和踩坑\n","slug":"MySQL-闲谈-3","published":1,"updated":"2022-11-07T08:54:14.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhw000pg7i53bhg2ba3","content":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n要不你来讲讲你们对MySQL是怎么调优的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点一般是在「开发规范」、「数据库索引」又或者说解决线上慢查询上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而对于MySQL内部的参数调优，由专业的DBA来搞\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n扯了这么多，你就是想表达你不会MySQL参数调优，对吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n草，被发现了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，首先，我们在生产环境下，创建数据库表，都是在工单系统下完成的（那就自然需要DBA审批）。如果在创建表时检测到没有创建索引，那就会直接提示warning（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n理论上来说，如果表有一定的数据量，那就应该要创建对应的索引。从数据库查询数据需要注意的地方还是蛮多的，其中很多都是平时积累来的。比如说：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n1. 是否能使用「覆盖索引」，减少「回表」所消耗的时间。意味着，我们在select 的时候，一定要指明对应的列，而不是select *\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n2. 考虑是否组建「联合索引」，如果组建「联合索引」，尽量将区分度最高的放在最左边，并且需要考虑「最左匹配原则」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n3.对索引进行函数操作或者表达式计算会导致索引失效\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n4.利用子查询优化超多分页场景。比如 limit offset , n 在MySQL是获取 offset + n的记录，再返回n条。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n5.通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过show profile 来查看SQL对系统资源的损耗情况（不过一般还是比较少用到的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n6.在开启事务后，在事务内尽可能只操作数据库，并有意识地减少锁的持有时间（比如在事务内需要插入&&修改数据，那可以先插入后修改。因为修改是更新操作，会加行锁。如果先更新，那并发下可能会导致多个事务的请求等待行锁释放）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，我们这边用的是Read Commit（读已提交），MySQL默认用的是Repeatable read（可重复读）。选用什么隔离级别，主要看应用场景嘛，因为隔离级别越低，事务并发性能越高\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一般互联网公司都选择Read Commit作为主要的隔离级别）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Repeatable read（可重复读）隔离级别，就有可能因为「间隙锁」导致的死锁问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n但可能你已经知道，MySQL默认的隔离级别为Repeatable read。很大一部分原因是在最开始的时候，MySQL的binlog没有row模式，在read commit隔离级别下会存在「主从数据不一致」的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nbinlog记录了数据库表结构和表数据「变更」，比如update/delete/insert/truncate/create。在MySQL中，主从同步实际上就是应用了binlog来实现的（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n有了该历史原因，所以MySQL就将默认的隔离级别设置为Repeatable read\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯嗯，当然遇到过了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你们是怎么做的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果走对了索引，但查询还是慢，那一般来说就是表的数据量实在是太大了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，考虑能不能把「旧的数据」给”删掉”，对于我们公司而言，我们都会把数据同步到Hive，说明已经离线存储了一份了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那如果「旧的数据」已经没有查询的业务了，那最简单的办法肯定是”删掉”部分数据咯。数据量降低了，那自然，检索速度就快了…\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，但一般不会删的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n没错，只有极少部分业务可以删掉数据（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n随后，就考虑另一种情况，能不能在查询之前，直接走一层缓存（Redis）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而走缓存的话，又要看业务能不能忍受读取的「非真正实时」的数据（毕竟Redis和MySQL的数据一致性需要保证），如果查询条件相对复杂且多变的话（涉及各种group by 和sum），那走缓存也不是一种好的办法，维护起来就不方便了…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n再看看是不是有「字符串」检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走Elasticsearch了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL->Elasticsearch需要有对应的同步程序(一般就是监听MySQL的binlog，解析binlog后导入到Elasticsearch)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果还不是的话，那考虑要不要根据查询条件的维度，做相对应的聚合表，线上的请求就查询聚合表的数据，不走原表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，用户下单后，有一份订单明细，而订单明细表的量级太大。但在产品侧(前台)透出的查询功能是以「天」维度来展示的，那就可以将每个用户的每天数据聚合起来，在聚合表就是一个用户一天只有一条汇总后的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n查询走聚合后的表，那速度肯定杠杠的（聚合后的表数据量肯定比原始表要少很多）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n思路大致的就是「以空间换时间」，相同的数据换别的地方也存储一份，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n你说到这个，我就不困了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在MySQL读写都有瓶颈，那首先看下目前MySQL的架构是怎么样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果是单库的，那是不是可以考虑升级至主从架构，实现读写分离\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单理解就是：主库接收写请求，从库接收读请求。从库的数据由主库发送的binlog进而更新，实现主从数据一致（在一般场景下，主从的数据是通过异步来保证最终一致性的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在主从架构下，读写仍存在瓶颈，那就要考虑是否要分库分表了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至少在我前公司的架构下，业务是区分的。流量有流量数据库，广告有广告的数据库，商品有商品的数据库。所以，我这里讲的分库分表的含义是：在原来的某个库的某个表进而拆分\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，现在我有一张业务订单表，这张订单表在广告库中，假定这张业务订单表已经有1亿数据量了，现在我要分库分表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那就会将这张表的数据分至多个广告库以及多张表中（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分库分表的最明显的好处就是把请求进行均摊（本来单个库单个表有一亿的数据，那假设我分开8个库，那每个库1200+W的数据量，每个库下分8张表，那每张表就150W的数据量）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你们是以什么来作为分库键的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n按照我们这边的经验，一般来说是按照userId的（因为按照用户的维度查询比较多），如果要按照其他的维度进行查询，那还是参照上面的的思路（以空间换时间）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那分库分表后的ID是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就涉及到分布式ID生成的方式了，思路有很多。有借助MySQL自增的，有借助Redis自增的，有基于「雪花算法」自增的。具体使用哪种方式，那就看公司的技术栈了，一般使用Redis和基于「雪花算法」实现用得比较多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于为什么强调自增（还是跟索引是有序有关，前面已经讲过了，你应该还记得）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那如果我要分库分表了，迁移的过程是怎么样的呢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们一般采取「双写」的方式来进行迁移，大致步骤就是\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、增量的消息各自往新表和旧表写一份\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、将旧表的数据迁移至新库\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、迟早新表的数据都会追得上旧表（在某个节点上数据是同步的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四、校验新表和老表的数据是否正常（主要看能不能对得上）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n五、开启双读（一部分流量走新表，一部分流量走老表），相当于灰度上线的过程\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n六、读流量全部切新表，停止老表的写入\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n七、提前准备回滚机制，临时切换失败能恢复正常业务以及有修数据的相关程序\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…今天就到这吧\n</div></div><br/>\n\n \n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>数据库表存在一定数据量，就需要有对应的索引</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>发现慢查询时，检查是否走对索引，是否能用更好的索引进行优化查询速度，查看使用索引的姿势有没有问题</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>当索引解决不了慢查询时，一般由于业务表的数据量太大导致，利用空间换时间的思想</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>当读写性能均遇到瓶颈时，先考虑能否升级数据库架构即可解决问题，若不能则需要考虑分库分表</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>分库分表虽然能解决掉读写瓶颈，但同时会带来各种问题，需要提前调研解决方案和踩坑</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n要不你来讲讲你们对MySQL是怎么调优的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点一般是在「开发规范」、「数据库索引」又或者说解决线上慢查询上\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而对于MySQL内部的参数调优，由专业的DBA来搞\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n扯了这么多，你就是想表达你不会MySQL参数调优，对吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n草，被发现了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧\n</div></div><br/>\n\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，首先，我们在生产环境下，创建数据库表，都是在工单系统下完成的（那就自然需要DBA审批）。如果在创建表时检测到没有创建索引，那就会直接提示warning（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n理论上来说，如果表有一定的数据量，那就应该要创建对应的索引。从数据库查询数据需要注意的地方还是蛮多的，其中很多都是平时积累来的。比如说：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n1. 是否能使用「覆盖索引」，减少「回表」所消耗的时间。意味着，我们在select 的时候，一定要指明对应的列，而不是select *\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n2. 考虑是否组建「联合索引」，如果组建「联合索引」，尽量将区分度最高的放在最左边，并且需要考虑「最左匹配原则」\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n3.对索引进行函数操作或者表达式计算会导致索引失效\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n4.利用子查询优化超多分页场景。比如 limit offset , n 在MySQL是获取 offset + n的记录，再返回n条。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n5.通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过show profile 来查看SQL对系统资源的损耗情况（不过一般还是比较少用到的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n6.在开启事务后，在事务内尽可能只操作数据库，并有意识地减少锁的持有时间（比如在事务内需要插入&&修改数据，那可以先插入后修改。因为修改是更新操作，会加行锁。如果先更新，那并发下可能会导致多个事务的请求等待行锁释放）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，我们这边用的是Read Commit（读已提交），MySQL默认用的是Repeatable read（可重复读）。选用什么隔离级别，主要看应用场景嘛，因为隔离级别越低，事务并发性能越高\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一般互联网公司都选择Read Commit作为主要的隔离级别）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Repeatable read（可重复读）隔离级别，就有可能因为「间隙锁」导致的死锁问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n但可能你已经知道，MySQL默认的隔离级别为Repeatable read。很大一部分原因是在最开始的时候，MySQL的binlog没有row模式，在read commit隔离级别下会存在「主从数据不一致」的问题\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nbinlog记录了数据库表结构和表数据「变更」，比如update/delete/insert/truncate/create。在MySQL中，主从同步实际上就是应用了binlog来实现的（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n有了该历史原因，所以MySQL就将默认的隔离级别设置为Repeatable read\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg\"/>\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯嗯，当然遇到过了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那你们是怎么做的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果走对了索引，但查询还是慢，那一般来说就是表的数据量实在是太大了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，考虑能不能把「旧的数据」给”删掉”，对于我们公司而言，我们都会把数据同步到Hive，说明已经离线存储了一份了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那如果「旧的数据」已经没有查询的业务了，那最简单的办法肯定是”删掉”部分数据咯。数据量降低了，那自然，检索速度就快了…\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，但一般不会删的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n没错，只有极少部分业务可以删掉数据（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n随后，就考虑另一种情况，能不能在查询之前，直接走一层缓存（Redis）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而走缓存的话，又要看业务能不能忍受读取的「非真正实时」的数据（毕竟Redis和MySQL的数据一致性需要保证），如果查询条件相对复杂且多变的话（涉及各种group by 和sum），那走缓存也不是一种好的办法，维护起来就不方便了…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n再看看是不是有「字符串」检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走Elasticsearch了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nMySQL->Elasticsearch需要有对应的同步程序(一般就是监听MySQL的binlog，解析binlog后导入到Elasticsearch)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果还不是的话，那考虑要不要根据查询条件的维度，做相对应的聚合表，线上的请求就查询聚合表的数据，不走原表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，用户下单后，有一份订单明细，而订单明细表的量级太大。但在产品侧(前台)透出的查询功能是以「天」维度来展示的，那就可以将每个用户的每天数据聚合起来，在聚合表就是一个用户一天只有一条汇总后的数据\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n查询走聚合后的表，那速度肯定杠杠的（聚合后的表数据量肯定比原始表要少很多）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n思路大致的就是「以空间换时间」，相同的数据换别的地方也存储一份，提高查询效率\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n你说到这个，我就不困了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在MySQL读写都有瓶颈，那首先看下目前MySQL的架构是怎么样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果是单库的，那是不是可以考虑升级至主从架构，实现读写分离\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单理解就是：主库接收写请求，从库接收读请求。从库的数据由主库发送的binlog进而更新，实现主从数据一致（在一般场景下，主从的数据是通过异步来保证最终一致性的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果在主从架构下，读写仍存在瓶颈，那就要考虑是否要分库分表了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至少在我前公司的架构下，业务是区分的。流量有流量数据库，广告有广告的数据库，商品有商品的数据库。所以，我这里讲的分库分表的含义是：在原来的某个库的某个表进而拆分\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如，现在我有一张业务订单表，这张订单表在广告库中，假定这张业务订单表已经有1亿数据量了，现在我要分库分表\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那就会将这张表的数据分至多个广告库以及多张表中（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分库分表的最明显的好处就是把请求进行均摊（本来单个库单个表有一亿的数据，那假设我分开8个库，那每个库1200+W的数据量，每个库下分8张表，那每张表就150W的数据量）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你们是以什么来作为分库键的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n按照我们这边的经验，一般来说是按照userId的（因为按照用户的维度查询比较多），如果要按照其他的维度进行查询，那还是参照上面的的思路（以空间换时间）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那分库分表后的ID是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就涉及到分布式ID生成的方式了，思路有很多。有借助MySQL自增的，有借助Redis自增的，有基于「雪花算法」自增的。具体使用哪种方式，那就看公司的技术栈了，一般使用Redis和基于「雪花算法」实现用得比较多\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于为什么强调自增（还是跟索引是有序有关，前面已经讲过了，你应该还记得）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，那如果我要分库分表了，迁移的过程是怎么样的呢\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我们一般采取「双写」的方式来进行迁移，大致步骤就是\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、增量的消息各自往新表和旧表写一份\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、将旧表的数据迁移至新库\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、迟早新表的数据都会追得上旧表（在某个节点上数据是同步的）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四、校验新表和老表的数据是否正常（主要看能不能对得上）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n五、开启双读（一部分流量走新表，一部分流量走老表），相当于灰度上线的过程\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n六、读流量全部切新表，停止老表的写入\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n七、提前准备回滚机制，临时切换失败能恢复正常业务以及有修数据的相关程序\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯…今天就到这吧\n</div></div><br/>\n\n \n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>数据库表存在一定数据量，就需要有对应的索引</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>发现慢查询时，检查是否走对索引，是否能用更好的索引进行优化查询速度，查看使用索引的姿势有没有问题</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>当索引解决不了慢查询时，一般由于业务表的数据量太大导致，利用空间换时间的思想</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>当读写性能均遇到瓶颈时，先考虑能否升级数据库架构即可解决问题，若不能则需要考虑分库分表</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>分库分表虽然能解决掉读写瓶颈，但同时会带来各种问题，需要提前调研解决方案和踩坑</li>\n</ul>\n"},{"title":"TCP Shakes/Waves Hands 闲谈","date":"2022-11-07T05:58:17.000Z","_content":"\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n面试官你好，请问面试可以开始了吗\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，开始吧\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天来聊聊TCP吧，TCP的各个状态还有印象吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n还有些许印象的，要不我就来简单说下TCP的三次握手和四次挥手的流程吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n说完这两个流程，就能把TCP的状态给涵盖上了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n可以\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在说TCP的三次握手和四次挥手之前，我先给你画下TCP的头部格式呗（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于TCP三次握手和四次挥手，我们最主要的就是关注TCP头部的序列号、确认号以及几个标记位（SYN/FIN/ACK/RST）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号：在初次建立连接的时候，客户端和服务端都会为「本次的连接」随机初始化一个序列号。（纵观整个TCP流程中，序列号可以用来解决网络包乱序的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n确认号：该字段表示「接收端」告诉「发送端」对上一个数据包已经成功接收（确认号可以⽤来解决网络包丢失的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而标记位就很好理解啦。SYN为1时，表示希望创建连接。ACK为1时，确认号字段有效。FIN为1时，表示希望断开连接。RST为1时，表示TCP连接出现异常，需要断开\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n下面就先从三次握手开始吧，期间我也会在三次握手中涉及到的TCP状态也说下的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nTCP三次握手的过程其实就是在：确认通信双方（客户端和服务端）的序列号\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n它的过程是这样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在最开始的时候，客户端和服务端都处于 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务器主动监听某个端口，处于 LISTEN 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端会随机生成出序列号（这里的序列号一般叫做client_isn），并且把标志位设置为SYN（意味着要连接），然后把该报文发送给服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端发送完SYN报文以后，自己便进入了 SYN_SEND 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端接收到了客户端的请求之后，自己也初始化对应的序列号（这里的序列号一般叫做 server_isn）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在「确认号」字段里填上client_isn + 1（相当于告诉客户端，已经收到了发送过来的序列号了） ，并且把 SYN 和 ACK 标记位都点亮(置为1)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n把该报文发送客户端，服务端的状态变成 SYN-REVD 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端发送的报文后，就知道服务端已经接收到了自己的序列号（通过确认号就可以知道），并且接收到了服务端的序列号(server_isn)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n此时，客户端需要告诉服务端自己已经接收到了他发送过来的序列号，所以在「确认号」字段上填上server_isn+1，，并且标记位 ACK 为1\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在发送报文之后，进入 ESTABLISHED 状态，而服务端接收到客户端的报文之后，也进入 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是三次握手的过程以及涉及到的TCP状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n总结下来，就是双方都把自身的序列号发给对方，看对方能不能接收到。如果「确认可以」，那就可以正常通信。（三次握手这个过程就可以看到双方都有接收和发送的能力）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那两次握手行吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n两次握手只能保证客户端的序列号成功被服务端接收，而服务端是无法确认自己的序列号是否被客户端成功接收。所以是不行的（：\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解了，那我想问问序列号为什么是随机的？以及序列号是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一方面为了安全性（随机ISN能避免非同一网络的攻击），另一方面可以让通信双方能够根据序号将「不属于」本连接的报文段丢弃\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号怎么生成的？这…随便猜下就应该跟「时钟」和TCP头部的某些属性做运算生成的吧，类似于雪花算法（：具体我忘了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n既然网络是不可靠的，那建立连接不是会经过三次握手吗？那要是在中途丢了，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第一个包丢了，客户端发送给服务端的 SYN 包丢了（简而要之就是服务端没接收到客户端的SYN包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端迟迟收不到服务端的ACK包，那会周期性超时重传，直到收到服务端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第二个包丢了，服务端发送的SYN+ACK包丢了（简而要之就是客户端没接收到服务端的SYN+ACK包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端迟迟收不到客户端的ACK包，那会周期性超时重传，直到收到客户端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第三个包丢了（ACK包），客户端发送完第三个包后单方面进入了 ESTABLISHED 状态，而服务端也认为此时连接是正常的，但第三个包没到达服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、如果此时客户端与服务端都还没数据发送，那服务端会认为自己发送的SYN+ACK的包没发送至客户端，所以会超时重传自己的SYN+ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、如果这时候客户端已经要发送数据了，服务端接收到了ACK + Data数据包，那自然就切换到 ESTABLISHED 状态下，并且接收客户端的Data数据包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、如果此时服务端要发送数据了，但发送不了，会一直周期性超时重传SYN + ACK，直到接收到客户端的ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，是不是要讲下四次挥手了？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，在建立完连接之后，客户端和服务端双方都处于 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n断开连接双方都有权利的，下面我还是以客户端主动断开为例好啦\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端打算关闭连接，会发 FIN 报文给服务端（其实就是把标志位 FIN 点亮），客户端发送完之后，就进入FIN_WAIT_1状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到 FIN 报文之后，回复 ACK 报文给客户端（表示已经收到了），服务端发送完之后，就进入 CLOSE_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端接收到服务端的 ACK 报文，就进入了 FIN_WAIT_2 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这时候，服务器可能还有数据要发送给客户端，等服务端确认自己已经没有数据返回给客户端之后，就发送FIN报文给客户端了，自己进入 LAST_ACK 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端的FIN报文之后，回应ACK报文，自己进入 TIME_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到客户端的ACK报文之后，服务端就进入 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在TIME_WAIT等到2MSL，也进入了 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四次挥手的流程到这里就结束了，结合三次握手，TCP的各个状态也已经说完了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯嗯，刚聊完四次挥手嘛，那你觉得为什么是四次呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实很好理解，当客户端第一次发送 FIN 报文之后，只是代表着客户端不再发送数据给服务端，但此时客户端还是有接收数据的能力的。而服务端收到FIN报文的时候，可能还有数据要传输给客户端，所以只能先回复 ACK给客户端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n等到服务端不再有数据发送给客户端时，才发送 FIN 报文给客户端，表示可以关闭了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所以，一来一回就四次了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n从四次挥手的流程上来看，有个 TIME_WAIT 状态，你知道这个状态干什么用的吗？（等待 2MSL）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主要有两个原因吧。1.保证最后的 ACK 报文 「接收方」一定能收到（如果收不到，对方会 重发 FIN 报文）2. 确保在创建新连接时，先前网络中残余的数据都丢失了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实也比较好理解的。就正如我们重启服务器一样，会先优雅关闭各种资源，再留有一段时间，希望在这段时间内，资源是正常关闭的，这样重启服务器（或者发布）就基本认为不会影响到线上运行了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n假设 TIME_WAIT 状态多过会有什么危害？怎么解决呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n从流程上看， TIME_WAIT 状态 只会出现在 主动发起 关闭连接的一方。危害就是会占用内存资源和端口呗（毕竟在等待嘛），解决的话，有Linux参数可以设置，具体忘了额\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天最后再问个问题吧，我们常说TCP连接，那这个连接到底是什么？你是怎么理解的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实从三次握手可以发现的是，TCP建立连接无非就是交换了双方的状态（比如序列号）。然后就没有然后了…连接本质上「只是互相维持一个状态，有连接特性」\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n好吧\n</div></div><br/>\n","source":"_posts/TCP-Shakes-and-Waves-hands-闲聊.md","raw":"---\ntitle: TCP Shakes/Waves Hands 闲谈\ndate: 2022-11-07 13:58:17\ntags:\n\t- 网络\n\t- TCP\n\t- 对话\n---\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n面试官你好，请问面试可以开始了吗\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，开始吧\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天来聊聊TCP吧，TCP的各个状态还有印象吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n还有些许印象的，要不我就来简单说下TCP的三次握手和四次挥手的流程吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n说完这两个流程，就能把TCP的状态给涵盖上了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n可以\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在说TCP的三次握手和四次挥手之前，我先给你画下TCP的头部格式呗（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于TCP三次握手和四次挥手，我们最主要的就是关注TCP头部的序列号、确认号以及几个标记位（SYN/FIN/ACK/RST）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号：在初次建立连接的时候，客户端和服务端都会为「本次的连接」随机初始化一个序列号。（纵观整个TCP流程中，序列号可以用来解决网络包乱序的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n确认号：该字段表示「接收端」告诉「发送端」对上一个数据包已经成功接收（确认号可以⽤来解决网络包丢失的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而标记位就很好理解啦。SYN为1时，表示希望创建连接。ACK为1时，确认号字段有效。FIN为1时，表示希望断开连接。RST为1时，表示TCP连接出现异常，需要断开\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n下面就先从三次握手开始吧，期间我也会在三次握手中涉及到的TCP状态也说下的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nTCP三次握手的过程其实就是在：确认通信双方（客户端和服务端）的序列号\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n它的过程是这样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在最开始的时候，客户端和服务端都处于 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务器主动监听某个端口，处于 LISTEN 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端会随机生成出序列号（这里的序列号一般叫做client_isn），并且把标志位设置为SYN（意味着要连接），然后把该报文发送给服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端发送完SYN报文以后，自己便进入了 SYN_SEND 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端接收到了客户端的请求之后，自己也初始化对应的序列号（这里的序列号一般叫做 server_isn）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在「确认号」字段里填上client_isn + 1（相当于告诉客户端，已经收到了发送过来的序列号了） ，并且把 SYN 和 ACK 标记位都点亮(置为1)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n把该报文发送客户端，服务端的状态变成 SYN-REVD 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端发送的报文后，就知道服务端已经接收到了自己的序列号（通过确认号就可以知道），并且接收到了服务端的序列号(server_isn)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n此时，客户端需要告诉服务端自己已经接收到了他发送过来的序列号，所以在「确认号」字段上填上server_isn+1，，并且标记位 ACK 为1\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在发送报文之后，进入 ESTABLISHED 状态，而服务端接收到客户端的报文之后，也进入 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是三次握手的过程以及涉及到的TCP状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n总结下来，就是双方都把自身的序列号发给对方，看对方能不能接收到。如果「确认可以」，那就可以正常通信。（三次握手这个过程就可以看到双方都有接收和发送的能力）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那两次握手行吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n两次握手只能保证客户端的序列号成功被服务端接收，而服务端是无法确认自己的序列号是否被客户端成功接收。所以是不行的（：\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解了，那我想问问序列号为什么是随机的？以及序列号是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一方面为了安全性（随机ISN能避免非同一网络的攻击），另一方面可以让通信双方能够根据序号将「不属于」本连接的报文段丢弃\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号怎么生成的？这…随便猜下就应该跟「时钟」和TCP头部的某些属性做运算生成的吧，类似于雪花算法（：具体我忘了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n既然网络是不可靠的，那建立连接不是会经过三次握手吗？那要是在中途丢了，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第一个包丢了，客户端发送给服务端的 SYN 包丢了（简而要之就是服务端没接收到客户端的SYN包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端迟迟收不到服务端的ACK包，那会周期性超时重传，直到收到服务端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第二个包丢了，服务端发送的SYN+ACK包丢了（简而要之就是客户端没接收到服务端的SYN+ACK包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端迟迟收不到客户端的ACK包，那会周期性超时重传，直到收到客户端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第三个包丢了（ACK包），客户端发送完第三个包后单方面进入了 ESTABLISHED 状态，而服务端也认为此时连接是正常的，但第三个包没到达服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、如果此时客户端与服务端都还没数据发送，那服务端会认为自己发送的SYN+ACK的包没发送至客户端，所以会超时重传自己的SYN+ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、如果这时候客户端已经要发送数据了，服务端接收到了ACK + Data数据包，那自然就切换到 ESTABLISHED 状态下，并且接收客户端的Data数据包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、如果此时服务端要发送数据了，但发送不了，会一直周期性超时重传SYN + ACK，直到接收到客户端的ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，是不是要讲下四次挥手了？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，在建立完连接之后，客户端和服务端双方都处于 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n断开连接双方都有权利的，下面我还是以客户端主动断开为例好啦\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端打算关闭连接，会发 FIN 报文给服务端（其实就是把标志位 FIN 点亮），客户端发送完之后，就进入FIN_WAIT_1状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到 FIN 报文之后，回复 ACK 报文给客户端（表示已经收到了），服务端发送完之后，就进入 CLOSE_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端接收到服务端的 ACK 报文，就进入了 FIN_WAIT_2 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这时候，服务器可能还有数据要发送给客户端，等服务端确认自己已经没有数据返回给客户端之后，就发送FIN报文给客户端了，自己进入 LAST_ACK 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端的FIN报文之后，回应ACK报文，自己进入 TIME_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到客户端的ACK报文之后，服务端就进入 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在TIME_WAIT等到2MSL，也进入了 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四次挥手的流程到这里就结束了，结合三次握手，TCP的各个状态也已经说完了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯嗯，刚聊完四次挥手嘛，那你觉得为什么是四次呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实很好理解，当客户端第一次发送 FIN 报文之后，只是代表着客户端不再发送数据给服务端，但此时客户端还是有接收数据的能力的。而服务端收到FIN报文的时候，可能还有数据要传输给客户端，所以只能先回复 ACK给客户端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n等到服务端不再有数据发送给客户端时，才发送 FIN 报文给客户端，表示可以关闭了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所以，一来一回就四次了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n从四次挥手的流程上来看，有个 TIME_WAIT 状态，你知道这个状态干什么用的吗？（等待 2MSL）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主要有两个原因吧。1.保证最后的 ACK 报文 「接收方」一定能收到（如果收不到，对方会 重发 FIN 报文）2. 确保在创建新连接时，先前网络中残余的数据都丢失了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实也比较好理解的。就正如我们重启服务器一样，会先优雅关闭各种资源，再留有一段时间，希望在这段时间内，资源是正常关闭的，这样重启服务器（或者发布）就基本认为不会影响到线上运行了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n假设 TIME_WAIT 状态多过会有什么危害？怎么解决呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n从流程上看， TIME_WAIT 状态 只会出现在 主动发起 关闭连接的一方。危害就是会占用内存资源和端口呗（毕竟在等待嘛），解决的话，有Linux参数可以设置，具体忘了额\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天最后再问个问题吧，我们常说TCP连接，那这个连接到底是什么？你是怎么理解的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实从三次握手可以发现的是，TCP建立连接无非就是交换了双方的状态（比如序列号）。然后就没有然后了…连接本质上「只是互相维持一个状态，有连接特性」\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n好吧\n</div></div><br/>\n","slug":"TCP-Shakes-and-Waves-hands-闲聊","published":1,"updated":"2022-11-07T09:22:44.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhx000rg7i5ao4j1gix","content":"<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n面试官你好，请问面试可以开始了吗\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，开始吧\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天来聊聊TCP吧，TCP的各个状态还有印象吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n还有些许印象的，要不我就来简单说下TCP的三次握手和四次挥手的流程吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n说完这两个流程，就能把TCP的状态给涵盖上了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n可以\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在说TCP的三次握手和四次挥手之前，我先给你画下TCP的头部格式呗（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于TCP三次握手和四次挥手，我们最主要的就是关注TCP头部的序列号、确认号以及几个标记位（SYN/FIN/ACK/RST）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号：在初次建立连接的时候，客户端和服务端都会为「本次的连接」随机初始化一个序列号。（纵观整个TCP流程中，序列号可以用来解决网络包乱序的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n确认号：该字段表示「接收端」告诉「发送端」对上一个数据包已经成功接收（确认号可以⽤来解决网络包丢失的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而标记位就很好理解啦。SYN为1时，表示希望创建连接。ACK为1时，确认号字段有效。FIN为1时，表示希望断开连接。RST为1时，表示TCP连接出现异常，需要断开\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n下面就先从三次握手开始吧，期间我也会在三次握手中涉及到的TCP状态也说下的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nTCP三次握手的过程其实就是在：确认通信双方（客户端和服务端）的序列号\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n它的过程是这样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在最开始的时候，客户端和服务端都处于 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务器主动监听某个端口，处于 LISTEN 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端会随机生成出序列号（这里的序列号一般叫做client_isn），并且把标志位设置为SYN（意味着要连接），然后把该报文发送给服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端发送完SYN报文以后，自己便进入了 SYN_SEND 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端接收到了客户端的请求之后，自己也初始化对应的序列号（这里的序列号一般叫做 server_isn）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在「确认号」字段里填上client_isn + 1（相当于告诉客户端，已经收到了发送过来的序列号了） ，并且把 SYN 和 ACK 标记位都点亮(置为1)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n把该报文发送客户端，服务端的状态变成 SYN-REVD 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端发送的报文后，就知道服务端已经接收到了自己的序列号（通过确认号就可以知道），并且接收到了服务端的序列号(server_isn)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n此时，客户端需要告诉服务端自己已经接收到了他发送过来的序列号，所以在「确认号」字段上填上server_isn+1，，并且标记位 ACK 为1\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在发送报文之后，进入 ESTABLISHED 状态，而服务端接收到客户端的报文之后，也进入 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是三次握手的过程以及涉及到的TCP状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n总结下来，就是双方都把自身的序列号发给对方，看对方能不能接收到。如果「确认可以」，那就可以正常通信。（三次握手这个过程就可以看到双方都有接收和发送的能力）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那两次握手行吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n两次握手只能保证客户端的序列号成功被服务端接收，而服务端是无法确认自己的序列号是否被客户端成功接收。所以是不行的（：\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解了，那我想问问序列号为什么是随机的？以及序列号是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一方面为了安全性（随机ISN能避免非同一网络的攻击），另一方面可以让通信双方能够根据序号将「不属于」本连接的报文段丢弃\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号怎么生成的？这…随便猜下就应该跟「时钟」和TCP头部的某些属性做运算生成的吧，类似于雪花算法（：具体我忘了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n既然网络是不可靠的，那建立连接不是会经过三次握手吗？那要是在中途丢了，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第一个包丢了，客户端发送给服务端的 SYN 包丢了（简而要之就是服务端没接收到客户端的SYN包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端迟迟收不到服务端的ACK包，那会周期性超时重传，直到收到服务端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第二个包丢了，服务端发送的SYN+ACK包丢了（简而要之就是客户端没接收到服务端的SYN+ACK包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端迟迟收不到客户端的ACK包，那会周期性超时重传，直到收到客户端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第三个包丢了（ACK包），客户端发送完第三个包后单方面进入了 ESTABLISHED 状态，而服务端也认为此时连接是正常的，但第三个包没到达服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、如果此时客户端与服务端都还没数据发送，那服务端会认为自己发送的SYN+ACK的包没发送至客户端，所以会超时重传自己的SYN+ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、如果这时候客户端已经要发送数据了，服务端接收到了ACK + Data数据包，那自然就切换到 ESTABLISHED 状态下，并且接收客户端的Data数据包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、如果此时服务端要发送数据了，但发送不了，会一直周期性超时重传SYN + ACK，直到接收到客户端的ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，是不是要讲下四次挥手了？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，在建立完连接之后，客户端和服务端双方都处于 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n断开连接双方都有权利的，下面我还是以客户端主动断开为例好啦\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端打算关闭连接，会发 FIN 报文给服务端（其实就是把标志位 FIN 点亮），客户端发送完之后，就进入FIN_WAIT_1状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到 FIN 报文之后，回复 ACK 报文给客户端（表示已经收到了），服务端发送完之后，就进入 CLOSE_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端接收到服务端的 ACK 报文，就进入了 FIN_WAIT_2 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这时候，服务器可能还有数据要发送给客户端，等服务端确认自己已经没有数据返回给客户端之后，就发送FIN报文给客户端了，自己进入 LAST_ACK 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端的FIN报文之后，回应ACK报文，自己进入 TIME_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到客户端的ACK报文之后，服务端就进入 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在TIME_WAIT等到2MSL，也进入了 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四次挥手的流程到这里就结束了，结合三次握手，TCP的各个状态也已经说完了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯嗯，刚聊完四次挥手嘛，那你觉得为什么是四次呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实很好理解，当客户端第一次发送 FIN 报文之后，只是代表着客户端不再发送数据给服务端，但此时客户端还是有接收数据的能力的。而服务端收到FIN报文的时候，可能还有数据要传输给客户端，所以只能先回复 ACK给客户端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n等到服务端不再有数据发送给客户端时，才发送 FIN 报文给客户端，表示可以关闭了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所以，一来一回就四次了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n从四次挥手的流程上来看，有个 TIME_WAIT 状态，你知道这个状态干什么用的吗？（等待 2MSL）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主要有两个原因吧。1.保证最后的 ACK 报文 「接收方」一定能收到（如果收不到，对方会 重发 FIN 报文）2. 确保在创建新连接时，先前网络中残余的数据都丢失了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实也比较好理解的。就正如我们重启服务器一样，会先优雅关闭各种资源，再留有一段时间，希望在这段时间内，资源是正常关闭的，这样重启服务器（或者发布）就基本认为不会影响到线上运行了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n假设 TIME_WAIT 状态多过会有什么危害？怎么解决呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n从流程上看， TIME_WAIT 状态 只会出现在 主动发起 关闭连接的一方。危害就是会占用内存资源和端口呗（毕竟在等待嘛），解决的话，有Linux参数可以设置，具体忘了额\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天最后再问个问题吧，我们常说TCP连接，那这个连接到底是什么？你是怎么理解的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实从三次握手可以发现的是，TCP建立连接无非就是交换了双方的状态（比如序列号）。然后就没有然后了…连接本质上「只是互相维持一个状态，有连接特性」\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n好吧\n</div></div><br/>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n面试官你好，请问面试可以开始了吗\n</div></div><br/>\n\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，开始吧\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天来聊聊TCP吧，TCP的各个状态还有印象吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n还有些许印象的，要不我就来简单说下TCP的三次握手和四次挥手的流程吧\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n说完这两个流程，就能把TCP的状态给涵盖上了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n可以\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在说TCP的三次握手和四次挥手之前，我先给你画下TCP的头部格式呗（：\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对于TCP三次握手和四次挥手，我们最主要的就是关注TCP头部的序列号、确认号以及几个标记位（SYN/FIN/ACK/RST）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号：在初次建立连接的时候，客户端和服务端都会为「本次的连接」随机初始化一个序列号。（纵观整个TCP流程中，序列号可以用来解决网络包乱序的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n确认号：该字段表示「接收端」告诉「发送端」对上一个数据包已经成功接收（确认号可以⽤来解决网络包丢失的问题）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n而标记位就很好理解啦。SYN为1时，表示希望创建连接。ACK为1时，确认号字段有效。FIN为1时，表示希望断开连接。RST为1时，表示TCP连接出现异常，需要断开\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n下面就先从三次握手开始吧，期间我也会在三次握手中涉及到的TCP状态也说下的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nTCP三次握手的过程其实就是在：确认通信双方（客户端和服务端）的序列号\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n它的过程是这样的\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在最开始的时候，客户端和服务端都处于 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务器主动监听某个端口，处于 LISTEN 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端会随机生成出序列号（这里的序列号一般叫做client_isn），并且把标志位设置为SYN（意味着要连接），然后把该报文发送给服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端发送完SYN报文以后，自己便进入了 SYN_SEND 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端接收到了客户端的请求之后，自己也初始化对应的序列号（这里的序列号一般叫做 server_isn）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在「确认号」字段里填上client_isn + 1（相当于告诉客户端，已经收到了发送过来的序列号了） ，并且把 SYN 和 ACK 标记位都点亮(置为1)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n把该报文发送客户端，服务端的状态变成 SYN-REVD 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端发送的报文后，就知道服务端已经接收到了自己的序列号（通过确认号就可以知道），并且接收到了服务端的序列号(server_isn)\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n此时，客户端需要告诉服务端自己已经接收到了他发送过来的序列号，所以在「确认号」字段上填上server_isn+1，，并且标记位 ACK 为1\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在发送报文之后，进入 ESTABLISHED 状态，而服务端接收到客户端的报文之后，也进入 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就是三次握手的过程以及涉及到的TCP状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n总结下来，就是双方都把自身的序列号发给对方，看对方能不能接收到。如果「确认可以」，那就可以正常通信。（三次握手这个过程就可以看到双方都有接收和发送的能力）\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n那两次握手行吗？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n两次握手只能保证客户端的序列号成功被服务端接收，而服务端是无法确认自己的序列号是否被客户端成功接收。所以是不行的（：\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解了，那我想问问序列号为什么是随机的？以及序列号是怎么生成的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一方面为了安全性（随机ISN能避免非同一网络的攻击），另一方面可以让通信双方能够根据序号将「不属于」本连接的报文段丢弃\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n序列号怎么生成的？这…随便猜下就应该跟「时钟」和TCP头部的某些属性做运算生成的吧，类似于雪花算法（：具体我忘了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n既然网络是不可靠的，那建立连接不是会经过三次握手吗？那要是在中途丢了，怎么办？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第一个包丢了，客户端发送给服务端的 SYN 包丢了（简而要之就是服务端没接收到客户端的SYN包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端迟迟收不到服务端的ACK包，那会周期性超时重传，直到收到服务端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第二个包丢了，服务端发送的SYN+ACK包丢了（简而要之就是客户端没接收到服务端的SYN+ACK包）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端迟迟收不到客户端的ACK包，那会周期性超时重传，直到收到客户端的ACK\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n假设第三个包丢了（ACK包），客户端发送完第三个包后单方面进入了 ESTABLISHED 状态，而服务端也认为此时连接是正常的，但第三个包没到达服务端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n一、如果此时客户端与服务端都还没数据发送，那服务端会认为自己发送的SYN+ACK的包没发送至客户端，所以会超时重传自己的SYN+ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n二、如果这时候客户端已经要发送数据了，服务端接收到了ACK + Data数据包，那自然就切换到 ESTABLISHED 状态下，并且接收客户端的Data数据包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n三、如果此时服务端要发送数据了，但发送不了，会一直周期性超时重传SYN + ACK，直到接收到客户端的ACK包\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯，是不是要讲下四次挥手了？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，在建立完连接之后，客户端和服务端双方都处于 ESTABLISHED 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n断开连接双方都有权利的，下面我还是以客户端主动断开为例好啦\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端打算关闭连接，会发 FIN 报文给服务端（其实就是把标志位 FIN 点亮），客户端发送完之后，就进入FIN_WAIT_1状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到 FIN 报文之后，回复 ACK 报文给客户端（表示已经收到了），服务端发送完之后，就进入 CLOSE_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端接收到服务端的 ACK 报文，就进入了 FIN_WAIT_2 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这时候，服务器可能还有数据要发送给客户端，等服务端确认自己已经没有数据返回给客户端之后，就发送FIN报文给客户端了，自己进入 LAST_ACK 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端收到服务端的FIN报文之后，回应ACK报文，自己进入 TIME_WAIT 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n服务端收到客户端的ACK报文之后，服务端就进入 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n客户端在TIME_WAIT等到2MSL，也进入了 CLOSE 状态\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n四次挥手的流程到这里就结束了，结合三次握手，TCP的各个状态也已经说完了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯嗯，刚聊完四次挥手嘛，那你觉得为什么是四次呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实很好理解，当客户端第一次发送 FIN 报文之后，只是代表着客户端不再发送数据给服务端，但此时客户端还是有接收数据的能力的。而服务端收到FIN报文的时候，可能还有数据要传输给客户端，所以只能先回复 ACK给客户端\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n等到服务端不再有数据发送给客户端时，才发送 FIN 报文给客户端，表示可以关闭了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n所以，一来一回就四次了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg\"/>\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n从四次挥手的流程上来看，有个 TIME_WAIT 状态，你知道这个状态干什么用的吗？（等待 2MSL）\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n主要有两个原因吧。1.保证最后的 ACK 报文 「接收方」一定能收到（如果收不到，对方会 重发 FIN 报文）2. 确保在创建新连接时，先前网络中残余的数据都丢失了\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实也比较好理解的。就正如我们重启服务器一样，会先优雅关闭各种资源，再留有一段时间，希望在这段时间内，资源是正常关闭的，这样重启服务器（或者发布）就基本认为不会影响到线上运行了\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n假设 TIME_WAIT 状态多过会有什么危害？怎么解决呢？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n从流程上看， TIME_WAIT 状态 只会出现在 主动发起 关闭连接的一方。危害就是会占用内存资源和端口呗（毕竟在等待嘛），解决的话，有Linux参数可以设置，具体忘了额\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天最后再问个问题吧，我们常说TCP连接，那这个连接到底是什么？你是怎么理解的？\n</div></div><br/>\n\n \n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实从三次握手可以发现的是，TCP建立连接无非就是交换了双方的状态（比如序列号）。然后就没有然后了…连接本质上「只是互相维持一个状态，有连接特性」\n</div></div><br/>\n\n \n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n好吧\n</div></div><br/>\n"},{"title":"VIM 配置","date":"2022-10-29T06:31:55.000Z","_content":"\n### VIM 配置说明\n\n1. 安装 neovim 可以直接从 github 下载 appimage\n\n2. 配置 neovim 首次启动使用 :checkhealth 查看配置的路径等信息\n\n3. coc.nvim 的 LSP 服务需要 npm （ node.js ）提供支持，npm 安装的时候可以从官方网站那里下载然后安装到指定 path，之后的 -g 安装 npm 包的时候包会安装在安装 npm 的目录下面\n\n4. 注意这个 coc-setting.json 这个在安装了 coc.nvim 之后可以 :CocConfig 来进行编辑，json 里面这一句话一定要加上，解决了初次 tab 选中的问题\n\n5. 配置文件 init.vim 位于 /home/asleep/.config/nvim 下，coc-settings.json 也是在这个路径下面\n\n6. vimplug 管理插件，这里有点特殊，这里我将其他插件安装在与 vimplug 的 plug.vim 同一个目录下面，即  /home/asleep/.local/share/nvim/site/autoload\n\n7. 安装各种插件之前，应该要了解各个插件的依赖\n\n8. 至于 vimplug 的安装，只需要把 github 上面的那个 plug.vim 文件弄下来放在上面说的那个 path 下面就可以调用 :PlugInstall，不用整个仓库弄下来\n\n9. 至于 coc 的插件，coc.nvim 是一个插件管理器，coc.nvim 管理的插件在 /home/asleep/.config/coc/extensions 下面\n\n10. 综上所述，如果要迁移 nvim 及其配置，只需要复制\n\n    ```\n    /home/asleep/.config/coc/extensions   “coc-extensions”\n    \n    /home/asleep/.config/nvim   “coc-settings.json”  “init.vim“\n    \n    /home/asleep/.local/share/nvim/site/autoload   “plug.vim” “vim-plug extensions”\n    ```\n\n11. 这三个路径下的文件就可以完成迁移 \n\n12. 每次修改 init.vim 之后，都要 :so % 即 :source init.vim 生效\n\n\n###### \n\n### coc-setting.json\n\n```\n{\n    \"suggest.noselect\": true,\n}\n```\n\n###### \n\n### init.vim 已启用的配置\n\n\n```\n\" -------------------------------------------------------------------------------------------------------------\n\" ---------------------------------------------common-start----------------------------------------------------\n\" -------------------------------------------------------------------------------------------------------------\n\nset number\nset mouse=c\nset tabstop=4\nset autoindent\nset backspace=indent,eol,start\nset hlsearch\nset clipboard+=unnamedplus\nset foldmethod=syntax\nset nofoldenable\n\" 自动同步\nset autoread\nset fillchars=eob:\\ \n\n\" Vim jump to the last position when reopening a file\nif has(\"autocmd\")\n  au BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif\nendif\n\n\nfunction! ESC_IMAP()\n    let l:frontChar = getline('.')[col('.') - 2]\n    if l:frontChar == \";\" \n        call feedkeys(\"\\<BS>\\<BS>\\<ESC>\", 'n')\n    else\n        call feedkeys(\"\\<BS>\\;\", 'n')\n    endif\nendfunction\ninoremap <expr> ; ESC_IMAP()\n\nset timeoutlen=200\n\nnnoremap ;; <ESC>\nvnoremap ;; <ESC>\nsnoremap ;; <ESC>\nxnoremap ;; <ESC>\ncnoremap ;; <ESC>\nonoremap ;; <ESC>\n\n\" exit windows\ntnoremap ;; <C-\\><C-n>\n\n\" switch windows\nnnoremap <TAB> <C-w>w\nnnoremap vv <C-v>\n\necho expand(\"%:p:h\")\n\ncnoreabbrev fd echo expand(\"%:p:h\")\ncnoreabbrev vst vs<ENTER>:term\ncnoreabbrev spt sp<ENTER>:term\n\n\n\" -------------------------------------------------------------------------------------------------------------\n\"-----------------------------------------------common-end----------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\"\n\"\n\"\n\"-------------------------------------------------------------------------------------------------------------\n\"--------------------------------------------vim-plug-start---------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\n\n\ncall plug#begin('/home/asleep/.local/share/nvim/site/autoload')\nPlug 'itchyny/lightline.vim'\nPlug 'joshdick/onedark.vim'\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\nPlug 'jiangmiao/auto-pairs'\nPlug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}\nPlug 'sheerun/vim-polyglot'\nPlug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }\nPlug 'tpope/vim-fugitive'\nPlug 'sbdchd/neoformat'\nPlug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }\ncall plug#end()\n\n\"有些插件需要安装 nerd fonts！\n\"nerd fonts 包括了 powerline fonts！\n\"建议安装 DejaVuSansMonoNerd！\n\n\"这个是 LeaderF 的设置\nlet g:Lf_WindowPosition = 'popup'\ncnoreabbrev ff LeaderfFile\n\n\ncnoreabbrev fm Neoformat\n\ncnoreabbrev mt MarkdownPreviewToggle\nlet g:mkdp_theme = \"light\"\n\n\"这个是 chadtree 的设置\n\"明确指定绑定的键之后，就不会使用默认的键\nlet g:chadtree_settings = {\n  \\ 'keymap.change_focus_up': [\"..\"],\n  \\ 'keymap.secondary': [\"<2-leftmouse>\"]\n\\}\n\nnnoremap <F2> :CHADopen<CR>\n\nlet g:onedark_terminal_italics=1\nautocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE \ncolorscheme onedark\n\n\nlet g:lightline = {\n      \\'colorscheme' : 'onedark',\n      \\ 'separator': { 'left': '', 'right': '' },\n      \\ 'subseparator': { 'left': '', 'right': '' },\n      \\ 'component': {\n            \\ 'lineinfo': ' %3l / %L : %-2v',\n            \\ }, \n      \\ }\n\n\n\"-------------------------------------------------------------------------------------------------------------\n\"-----------------------------------------------vim-plug-end--------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\n\n\n\"-------------------------------------------------------------------------------------------------------------\n\"------------------------------------------------coc-start----------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\ninoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#next(1) :\"\\<Tab>\" \n\nnnoremap gd <Plug>(coc-definition)\nnnoremap gt <Plug>(coc-type-definition)\nnnoremap gi <Plug>(coc-implementation)\nnnoremap gr <Plug>(coc-references)\n\n\" Use K to show documentation in preview window.\nfunction! ShowDocumentation()\n  if CocAction('hasProvider', 'hover')\n    call CocActionAsync('doHover')\n  else\n    call feedkeys('K', 'in')\n  endif\nendfunction\nnnoremap <silent> K :call ShowDocumentation()<CR>\n\n\" Highlight the symbol and its references when holding the cursor.\nautocmd CursorHold * silent call CocActionAsync('highlight')\n\n\" Symbol renaming.\nnnoremap <space>r <Plug>(coc-rename)\n\n\" Show all diagnostics.\nnnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>\n\n\" Manage extensions.\nnnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>\n\n\" Find symbol of current document.\nnnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>\n\n\n\"-------------------------------------------------------------------------------------------------------------\n\"-------------------------------------------------coc-end-----------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n```\n\n###### \n\n### init.vim 未启用的配置\n\n```\n\"\"-------------------------------------------------------------------------------------------------------------\n\"\"----------------------------------------------netrw_start----------------------------------------------------\n\"\"-------------------------------------------------------------------------------------------------------------\n\n\n\"\"\n\"\"let g:netrw_banner = 0\n\"\"let g:netrw_liststyle = 3\n\"\"let g:netrw_browse_split = 4\n\"\"let g:netrw_altv = 1\n\"\"let g:netrw_winsize = 15\n\"\"\n\"\"set autochdir\n\"\"\n\"\"\" Toggle Vexplore with <F2>\n\"\"function! ToggleVExplorer()\n\"\"    if exists(\"t:expl_buf_num\")\n\"\"        let expl_win_num = bufwinnr(t:expl_buf_num)\n\"\"        let cur_win_num = winnr()\n\"\"\n\"\"        if expl_win_num != -1\n\"\"            while expl_win_num != cur_win_num\n\"\"                exec \"wincmd w\"\n\"\"                let cur_win_num = winnr()\n\"\"            endwhile\n\"\"\n\"\"            close\n\"\"        endif\n\"\"\n\"\"        unlet t:expl_buf_num\n\"\"    else\n\"\"         Vexplore\n\"\"         let t:expl_buf_num = bufnr(\"%\")\n\"\"    endif\n\"\"endfunction\n\"\"\n\"\"map <F2> :call ToggleVExplorer()<CR>\n\"\"\n\n\n\n\"\" 状态栏无插件设置\n\"\"hi VertSplit ctermfg=NONE ctermbg=NONE cterm=NONE\n\"\"set fillchars=vert:\\ \n\"\"\"\"set fillchars=vert:\\│\n\"\"set statusline=%*\\ %.50F\\               \"显示文件名和文件路径\n\"\"set statusline+=%=%y%m%r%h%w\\ %*        \"显示文件类型及文件状态\n\"\"set statusline+=%{&ff}\\[%{&fenc}]\\ %*   \"显示文件编码类型\n\"\"set statusline+=%l/%L,%c\\ %*            \"显示光标所在行和列\n\"\"set statusline+=%3p%%                   \"显示光标前文本所占总文本的比例\n\"\"\n\"\"\n\"\"hi Statusline ctermfg=NONE ctermbg=NONE cterm=bold \n\"\"hi StatuslineNC ctermfg=NONE ctermbg=NONE cterm=NONE\n\n\n\n\n\n\"\"-------------------------------------------------------------------------------------------------------------\n\"\"-----------------------------------------------netrw-end-----------------------------------------------------\n\"\"-------------------------------------------------------------------------------------------------------------\n```\n","source":"_posts/VIM-配置.md","raw":"---\ntitle: VIM 配置\ndate: 2022-10-29 14:31:55\ntags:\n\t- VIM\n---\n\n### VIM 配置说明\n\n1. 安装 neovim 可以直接从 github 下载 appimage\n\n2. 配置 neovim 首次启动使用 :checkhealth 查看配置的路径等信息\n\n3. coc.nvim 的 LSP 服务需要 npm （ node.js ）提供支持，npm 安装的时候可以从官方网站那里下载然后安装到指定 path，之后的 -g 安装 npm 包的时候包会安装在安装 npm 的目录下面\n\n4. 注意这个 coc-setting.json 这个在安装了 coc.nvim 之后可以 :CocConfig 来进行编辑，json 里面这一句话一定要加上，解决了初次 tab 选中的问题\n\n5. 配置文件 init.vim 位于 /home/asleep/.config/nvim 下，coc-settings.json 也是在这个路径下面\n\n6. vimplug 管理插件，这里有点特殊，这里我将其他插件安装在与 vimplug 的 plug.vim 同一个目录下面，即  /home/asleep/.local/share/nvim/site/autoload\n\n7. 安装各种插件之前，应该要了解各个插件的依赖\n\n8. 至于 vimplug 的安装，只需要把 github 上面的那个 plug.vim 文件弄下来放在上面说的那个 path 下面就可以调用 :PlugInstall，不用整个仓库弄下来\n\n9. 至于 coc 的插件，coc.nvim 是一个插件管理器，coc.nvim 管理的插件在 /home/asleep/.config/coc/extensions 下面\n\n10. 综上所述，如果要迁移 nvim 及其配置，只需要复制\n\n    ```\n    /home/asleep/.config/coc/extensions   “coc-extensions”\n    \n    /home/asleep/.config/nvim   “coc-settings.json”  “init.vim“\n    \n    /home/asleep/.local/share/nvim/site/autoload   “plug.vim” “vim-plug extensions”\n    ```\n\n11. 这三个路径下的文件就可以完成迁移 \n\n12. 每次修改 init.vim 之后，都要 :so % 即 :source init.vim 生效\n\n\n###### \n\n### coc-setting.json\n\n```\n{\n    \"suggest.noselect\": true,\n}\n```\n\n###### \n\n### init.vim 已启用的配置\n\n\n```\n\" -------------------------------------------------------------------------------------------------------------\n\" ---------------------------------------------common-start----------------------------------------------------\n\" -------------------------------------------------------------------------------------------------------------\n\nset number\nset mouse=c\nset tabstop=4\nset autoindent\nset backspace=indent,eol,start\nset hlsearch\nset clipboard+=unnamedplus\nset foldmethod=syntax\nset nofoldenable\n\" 自动同步\nset autoread\nset fillchars=eob:\\ \n\n\" Vim jump to the last position when reopening a file\nif has(\"autocmd\")\n  au BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif\nendif\n\n\nfunction! ESC_IMAP()\n    let l:frontChar = getline('.')[col('.') - 2]\n    if l:frontChar == \";\" \n        call feedkeys(\"\\<BS>\\<BS>\\<ESC>\", 'n')\n    else\n        call feedkeys(\"\\<BS>\\;\", 'n')\n    endif\nendfunction\ninoremap <expr> ; ESC_IMAP()\n\nset timeoutlen=200\n\nnnoremap ;; <ESC>\nvnoremap ;; <ESC>\nsnoremap ;; <ESC>\nxnoremap ;; <ESC>\ncnoremap ;; <ESC>\nonoremap ;; <ESC>\n\n\" exit windows\ntnoremap ;; <C-\\><C-n>\n\n\" switch windows\nnnoremap <TAB> <C-w>w\nnnoremap vv <C-v>\n\necho expand(\"%:p:h\")\n\ncnoreabbrev fd echo expand(\"%:p:h\")\ncnoreabbrev vst vs<ENTER>:term\ncnoreabbrev spt sp<ENTER>:term\n\n\n\" -------------------------------------------------------------------------------------------------------------\n\"-----------------------------------------------common-end----------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\"\n\"\n\"\n\"-------------------------------------------------------------------------------------------------------------\n\"--------------------------------------------vim-plug-start---------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\n\n\ncall plug#begin('/home/asleep/.local/share/nvim/site/autoload')\nPlug 'itchyny/lightline.vim'\nPlug 'joshdick/onedark.vim'\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\nPlug 'jiangmiao/auto-pairs'\nPlug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}\nPlug 'sheerun/vim-polyglot'\nPlug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }\nPlug 'tpope/vim-fugitive'\nPlug 'sbdchd/neoformat'\nPlug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }\ncall plug#end()\n\n\"有些插件需要安装 nerd fonts！\n\"nerd fonts 包括了 powerline fonts！\n\"建议安装 DejaVuSansMonoNerd！\n\n\"这个是 LeaderF 的设置\nlet g:Lf_WindowPosition = 'popup'\ncnoreabbrev ff LeaderfFile\n\n\ncnoreabbrev fm Neoformat\n\ncnoreabbrev mt MarkdownPreviewToggle\nlet g:mkdp_theme = \"light\"\n\n\"这个是 chadtree 的设置\n\"明确指定绑定的键之后，就不会使用默认的键\nlet g:chadtree_settings = {\n  \\ 'keymap.change_focus_up': [\"..\"],\n  \\ 'keymap.secondary': [\"<2-leftmouse>\"]\n\\}\n\nnnoremap <F2> :CHADopen<CR>\n\nlet g:onedark_terminal_italics=1\nautocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE \ncolorscheme onedark\n\n\nlet g:lightline = {\n      \\'colorscheme' : 'onedark',\n      \\ 'separator': { 'left': '', 'right': '' },\n      \\ 'subseparator': { 'left': '', 'right': '' },\n      \\ 'component': {\n            \\ 'lineinfo': ' %3l / %L : %-2v',\n            \\ }, \n      \\ }\n\n\n\"-------------------------------------------------------------------------------------------------------------\n\"-----------------------------------------------vim-plug-end--------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\n\n\n\"-------------------------------------------------------------------------------------------------------------\n\"------------------------------------------------coc-start----------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n\ninoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#next(1) :\"\\<Tab>\" \n\nnnoremap gd <Plug>(coc-definition)\nnnoremap gt <Plug>(coc-type-definition)\nnnoremap gi <Plug>(coc-implementation)\nnnoremap gr <Plug>(coc-references)\n\n\" Use K to show documentation in preview window.\nfunction! ShowDocumentation()\n  if CocAction('hasProvider', 'hover')\n    call CocActionAsync('doHover')\n  else\n    call feedkeys('K', 'in')\n  endif\nendfunction\nnnoremap <silent> K :call ShowDocumentation()<CR>\n\n\" Highlight the symbol and its references when holding the cursor.\nautocmd CursorHold * silent call CocActionAsync('highlight')\n\n\" Symbol renaming.\nnnoremap <space>r <Plug>(coc-rename)\n\n\" Show all diagnostics.\nnnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>\n\n\" Manage extensions.\nnnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>\n\n\" Find symbol of current document.\nnnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>\n\n\n\"-------------------------------------------------------------------------------------------------------------\n\"-------------------------------------------------coc-end-----------------------------------------------------\n\"-------------------------------------------------------------------------------------------------------------\n```\n\n###### \n\n### init.vim 未启用的配置\n\n```\n\"\"-------------------------------------------------------------------------------------------------------------\n\"\"----------------------------------------------netrw_start----------------------------------------------------\n\"\"-------------------------------------------------------------------------------------------------------------\n\n\n\"\"\n\"\"let g:netrw_banner = 0\n\"\"let g:netrw_liststyle = 3\n\"\"let g:netrw_browse_split = 4\n\"\"let g:netrw_altv = 1\n\"\"let g:netrw_winsize = 15\n\"\"\n\"\"set autochdir\n\"\"\n\"\"\" Toggle Vexplore with <F2>\n\"\"function! ToggleVExplorer()\n\"\"    if exists(\"t:expl_buf_num\")\n\"\"        let expl_win_num = bufwinnr(t:expl_buf_num)\n\"\"        let cur_win_num = winnr()\n\"\"\n\"\"        if expl_win_num != -1\n\"\"            while expl_win_num != cur_win_num\n\"\"                exec \"wincmd w\"\n\"\"                let cur_win_num = winnr()\n\"\"            endwhile\n\"\"\n\"\"            close\n\"\"        endif\n\"\"\n\"\"        unlet t:expl_buf_num\n\"\"    else\n\"\"         Vexplore\n\"\"         let t:expl_buf_num = bufnr(\"%\")\n\"\"    endif\n\"\"endfunction\n\"\"\n\"\"map <F2> :call ToggleVExplorer()<CR>\n\"\"\n\n\n\n\"\" 状态栏无插件设置\n\"\"hi VertSplit ctermfg=NONE ctermbg=NONE cterm=NONE\n\"\"set fillchars=vert:\\ \n\"\"\"\"set fillchars=vert:\\│\n\"\"set statusline=%*\\ %.50F\\               \"显示文件名和文件路径\n\"\"set statusline+=%=%y%m%r%h%w\\ %*        \"显示文件类型及文件状态\n\"\"set statusline+=%{&ff}\\[%{&fenc}]\\ %*   \"显示文件编码类型\n\"\"set statusline+=%l/%L,%c\\ %*            \"显示光标所在行和列\n\"\"set statusline+=%3p%%                   \"显示光标前文本所占总文本的比例\n\"\"\n\"\"\n\"\"hi Statusline ctermfg=NONE ctermbg=NONE cterm=bold \n\"\"hi StatuslineNC ctermfg=NONE ctermbg=NONE cterm=NONE\n\n\n\n\n\n\"\"-------------------------------------------------------------------------------------------------------------\n\"\"-----------------------------------------------netrw-end-----------------------------------------------------\n\"\"-------------------------------------------------------------------------------------------------------------\n```\n","slug":"VIM-配置","published":1,"updated":"2022-10-29T07:19:56.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhy000tg7i5cvlv6lol","content":"<h3 id=\"VIM-配置说明\"><a href=\"#VIM-配置说明\" class=\"headerlink\" title=\"VIM 配置说明\"></a>VIM 配置说明</h3><ol>\n<li><p>安装 neovim 可以直接从 github 下载 appimage</p>\n</li>\n<li><p>配置 neovim 首次启动使用 :checkhealth 查看配置的路径等信息</p>\n</li>\n<li><p>coc.nvim 的 LSP 服务需要 npm （ node.js ）提供支持，npm 安装的时候可以从官方网站那里下载然后安装到指定 path，之后的 -g 安装 npm 包的时候包会安装在安装 npm 的目录下面</p>\n</li>\n<li><p>注意这个 coc-setting.json 这个在安装了 coc.nvim 之后可以 :CocConfig 来进行编辑，json 里面这一句话一定要加上，解决了初次 tab 选中的问题</p>\n</li>\n<li><p>配置文件 init.vim 位于 &#x2F;home&#x2F;asleep&#x2F;.config&#x2F;nvim 下，coc-settings.json 也是在这个路径下面</p>\n</li>\n<li><p>vimplug 管理插件，这里有点特殊，这里我将其他插件安装在与 vimplug 的 plug.vim 同一个目录下面，即  &#x2F;home&#x2F;asleep&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;autoload</p>\n</li>\n<li><p>安装各种插件之前，应该要了解各个插件的依赖</p>\n</li>\n<li><p>至于 vimplug 的安装，只需要把 github 上面的那个 plug.vim 文件弄下来放在上面说的那个 path 下面就可以调用 :PlugInstall，不用整个仓库弄下来</p>\n</li>\n<li><p>至于 coc 的插件，coc.nvim 是一个插件管理器，coc.nvim 管理的插件在 &#x2F;home&#x2F;asleep&#x2F;.config&#x2F;coc&#x2F;extensions 下面</p>\n</li>\n<li><p>综上所述，如果要迁移 nvim 及其配置，只需要复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/asleep/.config/coc/extensions   “coc-extensions”</span><br><span class=\"line\"></span><br><span class=\"line\">/home/asleep/.config/nvim   “coc-settings.json”  “init.vim“</span><br><span class=\"line\"></span><br><span class=\"line\">/home/asleep/.local/share/nvim/site/autoload   “plug.vim” “vim-plug extensions”</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这三个路径下的文件就可以完成迁移 </p>\n</li>\n<li><p>每次修改 init.vim 之后，都要 :so % 即 :source init.vim 生效</p>\n</li>\n</ol>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"coc-setting-json\"><a href=\"#coc-setting-json\" class=\"headerlink\" title=\"coc-setting.json\"></a>coc-setting.json</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;suggest.noselect&quot;: true,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"init-vim-已启用的配置\"><a href=\"#init-vim-已启用的配置\" class=\"headerlink\" title=\"init.vim 已启用的配置\"></a>init.vim 已启用的配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot; ---------------------------------------------common-start----------------------------------------------------</span><br><span class=\"line\">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">set number</span><br><span class=\"line\">set mouse=c</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\">set autoindent</span><br><span class=\"line\">set backspace=indent,eol,start</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">set clipboard+=unnamedplus</span><br><span class=\"line\">set foldmethod=syntax</span><br><span class=\"line\">set nofoldenable</span><br><span class=\"line\">&quot; 自动同步</span><br><span class=\"line\">set autoread</span><br><span class=\"line\">set fillchars=eob:\\ </span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Vim jump to the last position when reopening a file</span><br><span class=\"line\">if has(&quot;autocmd&quot;)</span><br><span class=\"line\">  au BufReadPost * if line(&quot;&#x27;\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#x27;\\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&#x27;\\&quot;&quot; | endif</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function! ESC_IMAP()</span><br><span class=\"line\">    let l:frontChar = getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 2]</span><br><span class=\"line\">    if l:frontChar == &quot;;&quot; </span><br><span class=\"line\">        call feedkeys(&quot;\\&lt;BS&gt;\\&lt;BS&gt;\\&lt;ESC&gt;&quot;, &#x27;n&#x27;)</span><br><span class=\"line\">    else</span><br><span class=\"line\">        call feedkeys(&quot;\\&lt;BS&gt;\\;&quot;, &#x27;n&#x27;)</span><br><span class=\"line\">    endif</span><br><span class=\"line\">endfunction</span><br><span class=\"line\">inoremap &lt;expr&gt; ; ESC_IMAP()</span><br><span class=\"line\"></span><br><span class=\"line\">set timeoutlen=200</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">vnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">snoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">xnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">cnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">onoremap ;; &lt;ESC&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; exit windows</span><br><span class=\"line\">tnoremap ;; &lt;C-\\&gt;&lt;C-n&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; switch windows</span><br><span class=\"line\">nnoremap &lt;TAB&gt; &lt;C-w&gt;w</span><br><span class=\"line\">nnoremap vv &lt;C-v&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">echo expand(&quot;%:p:h&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">cnoreabbrev fd echo expand(&quot;%:p:h&quot;)</span><br><span class=\"line\">cnoreabbrev vst vs&lt;ENTER&gt;:term</span><br><span class=\"line\">cnoreabbrev spt sp&lt;ENTER&gt;:term</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;-----------------------------------------------common-end----------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;--------------------------------------------vim-plug-start---------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">call plug#begin(&#x27;/home/asleep/.local/share/nvim/site/autoload&#x27;)</span><br><span class=\"line\">Plug &#x27;itchyny/lightline.vim&#x27;</span><br><span class=\"line\">Plug &#x27;joshdick/onedark.vim&#x27;</span><br><span class=\"line\">Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class=\"line\">Plug &#x27;jiangmiao/auto-pairs&#x27;</span><br><span class=\"line\">Plug &#x27;ms-jpq/chadtree&#x27;, &#123;&#x27;branch&#x27;: &#x27;chad&#x27;, &#x27;do&#x27;: &#x27;python3 -m chadtree deps&#x27;&#125;</span><br><span class=\"line\">Plug &#x27;sheerun/vim-polyglot&#x27;</span><br><span class=\"line\">Plug &#x27;Yggdroot/LeaderF&#x27;, &#123; &#x27;do&#x27;: &#x27;:LeaderfInstallCExtension&#x27; &#125;</span><br><span class=\"line\">Plug &#x27;tpope/vim-fugitive&#x27;</span><br><span class=\"line\">Plug &#x27;sbdchd/neoformat&#x27;</span><br><span class=\"line\">Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#x27;cd app &amp;&amp; yarn install&#x27; &#125;</span><br><span class=\"line\">call plug#end()</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;有些插件需要安装 nerd fonts！</span><br><span class=\"line\">&quot;nerd fonts 包括了 powerline fonts！</span><br><span class=\"line\">&quot;建议安装 DejaVuSansMonoNerd！</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;这个是 LeaderF 的设置</span><br><span class=\"line\">let g:Lf_WindowPosition = &#x27;popup&#x27;</span><br><span class=\"line\">cnoreabbrev ff LeaderfFile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cnoreabbrev fm Neoformat</span><br><span class=\"line\"></span><br><span class=\"line\">cnoreabbrev mt MarkdownPreviewToggle</span><br><span class=\"line\">let g:mkdp_theme = &quot;light&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;这个是 chadtree 的设置</span><br><span class=\"line\">&quot;明确指定绑定的键之后，就不会使用默认的键</span><br><span class=\"line\">let g:chadtree_settings = &#123;</span><br><span class=\"line\">  \\ &#x27;keymap.change_focus_up&#x27;: [&quot;..&quot;],</span><br><span class=\"line\">  \\ &#x27;keymap.secondary&#x27;: [&quot;&lt;2-leftmouse&gt;&quot;]</span><br><span class=\"line\">\\&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap &lt;F2&gt; :CHADopen&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">let g:onedark_terminal_italics=1</span><br><span class=\"line\">autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE </span><br><span class=\"line\">colorscheme onedark</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let g:lightline = &#123;</span><br><span class=\"line\">      \\&#x27;colorscheme&#x27; : &#x27;onedark&#x27;,</span><br><span class=\"line\">      \\ &#x27;separator&#x27;: &#123; &#x27;left&#x27;: &#x27;&#x27;, &#x27;right&#x27;: &#x27;&#x27; &#125;,</span><br><span class=\"line\">      \\ &#x27;subseparator&#x27;: &#123; &#x27;left&#x27;: &#x27;&#x27;, &#x27;right&#x27;: &#x27;&#x27; &#125;,</span><br><span class=\"line\">      \\ &#x27;component&#x27;: &#123;</span><br><span class=\"line\">            \\ &#x27;lineinfo&#x27;: &#x27; %3l / %L : %-2v&#x27;,</span><br><span class=\"line\">            \\ &#125;, </span><br><span class=\"line\">      \\ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;-----------------------------------------------vim-plug-end--------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;------------------------------------------------coc-start----------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt; coc#pum#visible() ? coc#pum#next(1) :&quot;\\&lt;Tab&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap gd &lt;Plug&gt;(coc-definition)</span><br><span class=\"line\">nnoremap gt &lt;Plug&gt;(coc-type-definition)</span><br><span class=\"line\">nnoremap gi &lt;Plug&gt;(coc-implementation)</span><br><span class=\"line\">nnoremap gr &lt;Plug&gt;(coc-references)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use K to show documentation in preview window.</span><br><span class=\"line\">function! ShowDocumentation()</span><br><span class=\"line\">  if CocAction(&#x27;hasProvider&#x27;, &#x27;hover&#x27;)</span><br><span class=\"line\">    call CocActionAsync(&#x27;doHover&#x27;)</span><br><span class=\"line\">  else</span><br><span class=\"line\">    call feedkeys(&#x27;K&#x27;, &#x27;in&#x27;)</span><br><span class=\"line\">  endif</span><br><span class=\"line\">endfunction</span><br><span class=\"line\">nnoremap &lt;silent&gt; K :call ShowDocumentation()&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Highlight the symbol and its references when holding the cursor.</span><br><span class=\"line\">autocmd CursorHold * silent call CocActionAsync(&#x27;highlight&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Symbol renaming.</span><br><span class=\"line\">nnoremap &lt;space&gt;r &lt;Plug&gt;(coc-rename)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Show all diagnostics.</span><br><span class=\"line\">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Manage extensions.</span><br><span class=\"line\">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Find symbol of current document.</span><br><span class=\"line\">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------coc-end-----------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"init-vim-未启用的配置\"><a href=\"#init-vim-未启用的配置\" class=\"headerlink\" title=\"init.vim 未启用的配置\"></a>init.vim 未启用的配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;&quot;----------------------------------------------netrw_start----------------------------------------------------</span><br><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;let g:netrw_banner = 0</span><br><span class=\"line\">&quot;&quot;let g:netrw_liststyle = 3</span><br><span class=\"line\">&quot;&quot;let g:netrw_browse_split = 4</span><br><span class=\"line\">&quot;&quot;let g:netrw_altv = 1</span><br><span class=\"line\">&quot;&quot;let g:netrw_winsize = 15</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;set autochdir</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot; Toggle Vexplore with &lt;F2&gt;</span><br><span class=\"line\">&quot;&quot;function! ToggleVExplorer()</span><br><span class=\"line\">&quot;&quot;    if exists(&quot;t:expl_buf_num&quot;)</span><br><span class=\"line\">&quot;&quot;        let expl_win_num = bufwinnr(t:expl_buf_num)</span><br><span class=\"line\">&quot;&quot;        let cur_win_num = winnr()</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;        if expl_win_num != -1</span><br><span class=\"line\">&quot;&quot;            while expl_win_num != cur_win_num</span><br><span class=\"line\">&quot;&quot;                exec &quot;wincmd w&quot;</span><br><span class=\"line\">&quot;&quot;                let cur_win_num = winnr()</span><br><span class=\"line\">&quot;&quot;            endwhile</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;            close</span><br><span class=\"line\">&quot;&quot;        endif</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;        unlet t:expl_buf_num</span><br><span class=\"line\">&quot;&quot;    else</span><br><span class=\"line\">&quot;&quot;         Vexplore</span><br><span class=\"line\">&quot;&quot;         let t:expl_buf_num = bufnr(&quot;%&quot;)</span><br><span class=\"line\">&quot;&quot;    endif</span><br><span class=\"line\">&quot;&quot;endfunction</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;map &lt;F2&gt; :call ToggleVExplorer()&lt;CR&gt;</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot; 状态栏无插件设置</span><br><span class=\"line\">&quot;&quot;hi VertSplit ctermfg=NONE ctermbg=NONE cterm=NONE</span><br><span class=\"line\">&quot;&quot;set fillchars=vert:\\ </span><br><span class=\"line\">&quot;&quot;&quot;&quot;set fillchars=vert:\\│</span><br><span class=\"line\">&quot;&quot;set statusline=%*\\ %.50F\\               &quot;显示文件名和文件路径</span><br><span class=\"line\">&quot;&quot;set statusline+=%=%y%m%r%h%w\\ %*        &quot;显示文件类型及文件状态</span><br><span class=\"line\">&quot;&quot;set statusline+=%&#123;&amp;ff&#125;\\[%&#123;&amp;fenc&#125;]\\ %*   &quot;显示文件编码类型</span><br><span class=\"line\">&quot;&quot;set statusline+=%l/%L,%c\\ %*            &quot;显示光标所在行和列</span><br><span class=\"line\">&quot;&quot;set statusline+=%3p%%                   &quot;显示光标前文本所占总文本的比例</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;hi Statusline ctermfg=NONE ctermbg=NONE cterm=bold </span><br><span class=\"line\">&quot;&quot;hi StatuslineNC ctermfg=NONE ctermbg=NONE cterm=NONE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;&quot;-----------------------------------------------netrw-end-----------------------------------------------------</span><br><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"VIM-配置说明\"><a href=\"#VIM-配置说明\" class=\"headerlink\" title=\"VIM 配置说明\"></a>VIM 配置说明</h3><ol>\n<li><p>安装 neovim 可以直接从 github 下载 appimage</p>\n</li>\n<li><p>配置 neovim 首次启动使用 :checkhealth 查看配置的路径等信息</p>\n</li>\n<li><p>coc.nvim 的 LSP 服务需要 npm （ node.js ）提供支持，npm 安装的时候可以从官方网站那里下载然后安装到指定 path，之后的 -g 安装 npm 包的时候包会安装在安装 npm 的目录下面</p>\n</li>\n<li><p>注意这个 coc-setting.json 这个在安装了 coc.nvim 之后可以 :CocConfig 来进行编辑，json 里面这一句话一定要加上，解决了初次 tab 选中的问题</p>\n</li>\n<li><p>配置文件 init.vim 位于 &#x2F;home&#x2F;asleep&#x2F;.config&#x2F;nvim 下，coc-settings.json 也是在这个路径下面</p>\n</li>\n<li><p>vimplug 管理插件，这里有点特殊，这里我将其他插件安装在与 vimplug 的 plug.vim 同一个目录下面，即  &#x2F;home&#x2F;asleep&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;autoload</p>\n</li>\n<li><p>安装各种插件之前，应该要了解各个插件的依赖</p>\n</li>\n<li><p>至于 vimplug 的安装，只需要把 github 上面的那个 plug.vim 文件弄下来放在上面说的那个 path 下面就可以调用 :PlugInstall，不用整个仓库弄下来</p>\n</li>\n<li><p>至于 coc 的插件，coc.nvim 是一个插件管理器，coc.nvim 管理的插件在 &#x2F;home&#x2F;asleep&#x2F;.config&#x2F;coc&#x2F;extensions 下面</p>\n</li>\n<li><p>综上所述，如果要迁移 nvim 及其配置，只需要复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/asleep/.config/coc/extensions   “coc-extensions”</span><br><span class=\"line\"></span><br><span class=\"line\">/home/asleep/.config/nvim   “coc-settings.json”  “init.vim“</span><br><span class=\"line\"></span><br><span class=\"line\">/home/asleep/.local/share/nvim/site/autoload   “plug.vim” “vim-plug extensions”</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这三个路径下的文件就可以完成迁移 </p>\n</li>\n<li><p>每次修改 init.vim 之后，都要 :so % 即 :source init.vim 生效</p>\n</li>\n</ol>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"coc-setting-json\"><a href=\"#coc-setting-json\" class=\"headerlink\" title=\"coc-setting.json\"></a>coc-setting.json</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;suggest.noselect&quot;: true,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"init-vim-已启用的配置\"><a href=\"#init-vim-已启用的配置\" class=\"headerlink\" title=\"init.vim 已启用的配置\"></a>init.vim 已启用的配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot; ---------------------------------------------common-start----------------------------------------------------</span><br><span class=\"line\">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">set number</span><br><span class=\"line\">set mouse=c</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\">set autoindent</span><br><span class=\"line\">set backspace=indent,eol,start</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">set clipboard+=unnamedplus</span><br><span class=\"line\">set foldmethod=syntax</span><br><span class=\"line\">set nofoldenable</span><br><span class=\"line\">&quot; 自动同步</span><br><span class=\"line\">set autoread</span><br><span class=\"line\">set fillchars=eob:\\ </span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Vim jump to the last position when reopening a file</span><br><span class=\"line\">if has(&quot;autocmd&quot;)</span><br><span class=\"line\">  au BufReadPost * if line(&quot;&#x27;\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#x27;\\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&#x27;\\&quot;&quot; | endif</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function! ESC_IMAP()</span><br><span class=\"line\">    let l:frontChar = getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 2]</span><br><span class=\"line\">    if l:frontChar == &quot;;&quot; </span><br><span class=\"line\">        call feedkeys(&quot;\\&lt;BS&gt;\\&lt;BS&gt;\\&lt;ESC&gt;&quot;, &#x27;n&#x27;)</span><br><span class=\"line\">    else</span><br><span class=\"line\">        call feedkeys(&quot;\\&lt;BS&gt;\\;&quot;, &#x27;n&#x27;)</span><br><span class=\"line\">    endif</span><br><span class=\"line\">endfunction</span><br><span class=\"line\">inoremap &lt;expr&gt; ; ESC_IMAP()</span><br><span class=\"line\"></span><br><span class=\"line\">set timeoutlen=200</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">vnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">snoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">xnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">cnoremap ;; &lt;ESC&gt;</span><br><span class=\"line\">onoremap ;; &lt;ESC&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; exit windows</span><br><span class=\"line\">tnoremap ;; &lt;C-\\&gt;&lt;C-n&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; switch windows</span><br><span class=\"line\">nnoremap &lt;TAB&gt; &lt;C-w&gt;w</span><br><span class=\"line\">nnoremap vv &lt;C-v&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">echo expand(&quot;%:p:h&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">cnoreabbrev fd echo expand(&quot;%:p:h&quot;)</span><br><span class=\"line\">cnoreabbrev vst vs&lt;ENTER&gt;:term</span><br><span class=\"line\">cnoreabbrev spt sp&lt;ENTER&gt;:term</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;-----------------------------------------------common-end----------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;--------------------------------------------vim-plug-start---------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">call plug#begin(&#x27;/home/asleep/.local/share/nvim/site/autoload&#x27;)</span><br><span class=\"line\">Plug &#x27;itchyny/lightline.vim&#x27;</span><br><span class=\"line\">Plug &#x27;joshdick/onedark.vim&#x27;</span><br><span class=\"line\">Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class=\"line\">Plug &#x27;jiangmiao/auto-pairs&#x27;</span><br><span class=\"line\">Plug &#x27;ms-jpq/chadtree&#x27;, &#123;&#x27;branch&#x27;: &#x27;chad&#x27;, &#x27;do&#x27;: &#x27;python3 -m chadtree deps&#x27;&#125;</span><br><span class=\"line\">Plug &#x27;sheerun/vim-polyglot&#x27;</span><br><span class=\"line\">Plug &#x27;Yggdroot/LeaderF&#x27;, &#123; &#x27;do&#x27;: &#x27;:LeaderfInstallCExtension&#x27; &#125;</span><br><span class=\"line\">Plug &#x27;tpope/vim-fugitive&#x27;</span><br><span class=\"line\">Plug &#x27;sbdchd/neoformat&#x27;</span><br><span class=\"line\">Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#x27;cd app &amp;&amp; yarn install&#x27; &#125;</span><br><span class=\"line\">call plug#end()</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;有些插件需要安装 nerd fonts！</span><br><span class=\"line\">&quot;nerd fonts 包括了 powerline fonts！</span><br><span class=\"line\">&quot;建议安装 DejaVuSansMonoNerd！</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;这个是 LeaderF 的设置</span><br><span class=\"line\">let g:Lf_WindowPosition = &#x27;popup&#x27;</span><br><span class=\"line\">cnoreabbrev ff LeaderfFile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cnoreabbrev fm Neoformat</span><br><span class=\"line\"></span><br><span class=\"line\">cnoreabbrev mt MarkdownPreviewToggle</span><br><span class=\"line\">let g:mkdp_theme = &quot;light&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;这个是 chadtree 的设置</span><br><span class=\"line\">&quot;明确指定绑定的键之后，就不会使用默认的键</span><br><span class=\"line\">let g:chadtree_settings = &#123;</span><br><span class=\"line\">  \\ &#x27;keymap.change_focus_up&#x27;: [&quot;..&quot;],</span><br><span class=\"line\">  \\ &#x27;keymap.secondary&#x27;: [&quot;&lt;2-leftmouse&gt;&quot;]</span><br><span class=\"line\">\\&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap &lt;F2&gt; :CHADopen&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">let g:onedark_terminal_italics=1</span><br><span class=\"line\">autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE </span><br><span class=\"line\">colorscheme onedark</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let g:lightline = &#123;</span><br><span class=\"line\">      \\&#x27;colorscheme&#x27; : &#x27;onedark&#x27;,</span><br><span class=\"line\">      \\ &#x27;separator&#x27;: &#123; &#x27;left&#x27;: &#x27;&#x27;, &#x27;right&#x27;: &#x27;&#x27; &#125;,</span><br><span class=\"line\">      \\ &#x27;subseparator&#x27;: &#123; &#x27;left&#x27;: &#x27;&#x27;, &#x27;right&#x27;: &#x27;&#x27; &#125;,</span><br><span class=\"line\">      \\ &#x27;component&#x27;: &#123;</span><br><span class=\"line\">            \\ &#x27;lineinfo&#x27;: &#x27; %3l / %L : %-2v&#x27;,</span><br><span class=\"line\">            \\ &#125;, </span><br><span class=\"line\">      \\ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;-----------------------------------------------vim-plug-end--------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;------------------------------------------------coc-start----------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt; coc#pum#visible() ? coc#pum#next(1) :&quot;\\&lt;Tab&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap gd &lt;Plug&gt;(coc-definition)</span><br><span class=\"line\">nnoremap gt &lt;Plug&gt;(coc-type-definition)</span><br><span class=\"line\">nnoremap gi &lt;Plug&gt;(coc-implementation)</span><br><span class=\"line\">nnoremap gr &lt;Plug&gt;(coc-references)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use K to show documentation in preview window.</span><br><span class=\"line\">function! ShowDocumentation()</span><br><span class=\"line\">  if CocAction(&#x27;hasProvider&#x27;, &#x27;hover&#x27;)</span><br><span class=\"line\">    call CocActionAsync(&#x27;doHover&#x27;)</span><br><span class=\"line\">  else</span><br><span class=\"line\">    call feedkeys(&#x27;K&#x27;, &#x27;in&#x27;)</span><br><span class=\"line\">  endif</span><br><span class=\"line\">endfunction</span><br><span class=\"line\">nnoremap &lt;silent&gt; K :call ShowDocumentation()&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Highlight the symbol and its references when holding the cursor.</span><br><span class=\"line\">autocmd CursorHold * silent call CocActionAsync(&#x27;highlight&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Symbol renaming.</span><br><span class=\"line\">nnoremap &lt;space&gt;r &lt;Plug&gt;(coc-rename)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Show all diagnostics.</span><br><span class=\"line\">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Manage extensions.</span><br><span class=\"line\">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Find symbol of current document.</span><br><span class=\"line\">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------coc-end-----------------------------------------------------</span><br><span class=\"line\">&quot;-------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><h3 id=\"init-vim-未启用的配置\"><a href=\"#init-vim-未启用的配置\" class=\"headerlink\" title=\"init.vim 未启用的配置\"></a>init.vim 未启用的配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;&quot;----------------------------------------------netrw_start----------------------------------------------------</span><br><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;let g:netrw_banner = 0</span><br><span class=\"line\">&quot;&quot;let g:netrw_liststyle = 3</span><br><span class=\"line\">&quot;&quot;let g:netrw_browse_split = 4</span><br><span class=\"line\">&quot;&quot;let g:netrw_altv = 1</span><br><span class=\"line\">&quot;&quot;let g:netrw_winsize = 15</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;set autochdir</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot; Toggle Vexplore with &lt;F2&gt;</span><br><span class=\"line\">&quot;&quot;function! ToggleVExplorer()</span><br><span class=\"line\">&quot;&quot;    if exists(&quot;t:expl_buf_num&quot;)</span><br><span class=\"line\">&quot;&quot;        let expl_win_num = bufwinnr(t:expl_buf_num)</span><br><span class=\"line\">&quot;&quot;        let cur_win_num = winnr()</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;        if expl_win_num != -1</span><br><span class=\"line\">&quot;&quot;            while expl_win_num != cur_win_num</span><br><span class=\"line\">&quot;&quot;                exec &quot;wincmd w&quot;</span><br><span class=\"line\">&quot;&quot;                let cur_win_num = winnr()</span><br><span class=\"line\">&quot;&quot;            endwhile</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;            close</span><br><span class=\"line\">&quot;&quot;        endif</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;        unlet t:expl_buf_num</span><br><span class=\"line\">&quot;&quot;    else</span><br><span class=\"line\">&quot;&quot;         Vexplore</span><br><span class=\"line\">&quot;&quot;         let t:expl_buf_num = bufnr(&quot;%&quot;)</span><br><span class=\"line\">&quot;&quot;    endif</span><br><span class=\"line\">&quot;&quot;endfunction</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;map &lt;F2&gt; :call ToggleVExplorer()&lt;CR&gt;</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot; 状态栏无插件设置</span><br><span class=\"line\">&quot;&quot;hi VertSplit ctermfg=NONE ctermbg=NONE cterm=NONE</span><br><span class=\"line\">&quot;&quot;set fillchars=vert:\\ </span><br><span class=\"line\">&quot;&quot;&quot;&quot;set fillchars=vert:\\│</span><br><span class=\"line\">&quot;&quot;set statusline=%*\\ %.50F\\               &quot;显示文件名和文件路径</span><br><span class=\"line\">&quot;&quot;set statusline+=%=%y%m%r%h%w\\ %*        &quot;显示文件类型及文件状态</span><br><span class=\"line\">&quot;&quot;set statusline+=%&#123;&amp;ff&#125;\\[%&#123;&amp;fenc&#125;]\\ %*   &quot;显示文件编码类型</span><br><span class=\"line\">&quot;&quot;set statusline+=%l/%L,%c\\ %*            &quot;显示光标所在行和列</span><br><span class=\"line\">&quot;&quot;set statusline+=%3p%%                   &quot;显示光标前文本所占总文本的比例</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;</span><br><span class=\"line\">&quot;&quot;hi Statusline ctermfg=NONE ctermbg=NONE cterm=bold </span><br><span class=\"line\">&quot;&quot;hi StatuslineNC ctermfg=NONE ctermbg=NONE cterm=NONE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">&quot;&quot;-----------------------------------------------netrw-end-----------------------------------------------------</span><br><span class=\"line\">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n"},{"title":"VLC Linux 安装在自定义目录","date":"2022-11-05T07:16:56.000Z","_content":"\napt 只下载包及其依赖而不安装\n\n```\n# sudo apt-get install -d <软件包>\nsudo apt-get install -d vlc\n```\n\n这将会下载到这个目录\n\n```\n/var/cache/apt/archives/\n```\n\n为了只是获得想要的包和依赖，应该先清空这个目录再下载\n\n将 **/var/cache/apt/archives/** 的包以及依赖移到某一个目录保存\n\n然后把这些包安装到指定目录\n\n```\nfor file in packagesPath:\ndo \n\techo $file\n\tsudo dpkg -x $file customInstallPath\ndone\n```\n\n在 customInstallPath 下编写一个启动脚本\n\n```\n#!/bin/sh\nHERE=\"$(dirname \"$(readlink -f \"$0\")\")\"\nexport UNION_PRELOAD=$HERE\nexport LD_PRELOAD=$HERE/libunionpreload.so\nexport PATH=$HERE/usr/bin/:$HERE/usr/sbin/:$HERE/usr/games/:$HERE/bin/:$HERE/opt/vlc/:$HERE/sbin/:$PATH\nexport LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$HERE/usr/lib/:$HERE/usr/lib/x86_64-linux-gnu/:$HERE/lib/:$HERE/lib/x86_64-linux-gnu/:$HERE/usr/lib/x86_64-linux-gnu/vlc/:$LD_LIBRARY_PATH\nexport QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/:$HERE/usr/lib/x86_64-linux-gnu/qt5/plugins/:$QT_PLUGIN_PATH\nexport XDG_DATA_DIRS=$HERE/usr/share/:$XDG_DATA_DIRS\nexec $HERE/usr/bin/vlc \"$@\"\n```\n\n保存并赋予这个启动脚本执行权限\n\n```\nchmod a+x launch.sh\n```\n\n执行 launch.sh 就可以运行 vlc 了\n\n这个脚本里面的 bash 变量是程序内部执行需要的变量，并不是环境变量，只有知道软件构建运行的源码才可以写出来，所以这个脚本并不是通用的，只适合 vlc\n\n\n","source":"_posts/VLC-Linux-安装在自定义目录.md","raw":"---\ntitle: VLC Linux 安装在自定义目录\ndate: 2022-11-05 15:16:56\ntags: \n\t- Linux\n---\n\napt 只下载包及其依赖而不安装\n\n```\n# sudo apt-get install -d <软件包>\nsudo apt-get install -d vlc\n```\n\n这将会下载到这个目录\n\n```\n/var/cache/apt/archives/\n```\n\n为了只是获得想要的包和依赖，应该先清空这个目录再下载\n\n将 **/var/cache/apt/archives/** 的包以及依赖移到某一个目录保存\n\n然后把这些包安装到指定目录\n\n```\nfor file in packagesPath:\ndo \n\techo $file\n\tsudo dpkg -x $file customInstallPath\ndone\n```\n\n在 customInstallPath 下编写一个启动脚本\n\n```\n#!/bin/sh\nHERE=\"$(dirname \"$(readlink -f \"$0\")\")\"\nexport UNION_PRELOAD=$HERE\nexport LD_PRELOAD=$HERE/libunionpreload.so\nexport PATH=$HERE/usr/bin/:$HERE/usr/sbin/:$HERE/usr/games/:$HERE/bin/:$HERE/opt/vlc/:$HERE/sbin/:$PATH\nexport LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$HERE/usr/lib/:$HERE/usr/lib/x86_64-linux-gnu/:$HERE/lib/:$HERE/lib/x86_64-linux-gnu/:$HERE/usr/lib/x86_64-linux-gnu/vlc/:$LD_LIBRARY_PATH\nexport QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/:$HERE/usr/lib/x86_64-linux-gnu/qt5/plugins/:$QT_PLUGIN_PATH\nexport XDG_DATA_DIRS=$HERE/usr/share/:$XDG_DATA_DIRS\nexec $HERE/usr/bin/vlc \"$@\"\n```\n\n保存并赋予这个启动脚本执行权限\n\n```\nchmod a+x launch.sh\n```\n\n执行 launch.sh 就可以运行 vlc 了\n\n这个脚本里面的 bash 变量是程序内部执行需要的变量，并不是环境变量，只有知道软件构建运行的源码才可以写出来，所以这个脚本并不是通用的，只适合 vlc\n\n\n","slug":"VLC-Linux-安装在自定义目录","published":1,"updated":"2022-11-05T07:37:45.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhy000vg7i52wzn2j40","content":"<p>apt 只下载包及其依赖而不安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo apt-get install -d &lt;软件包&gt;</span><br><span class=\"line\">sudo apt-get install -d vlc</span><br></pre></td></tr></table></figure>\n\n<p>这将会下载到这个目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/cache/apt/archives/</span><br></pre></td></tr></table></figure>\n\n<p>为了只是获得想要的包和依赖，应该先清空这个目录再下载</p>\n<p>将 <strong>&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;</strong> 的包以及依赖移到某一个目录保存</p>\n<p>然后把这些包安装到指定目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in packagesPath:</span><br><span class=\"line\">do </span><br><span class=\"line\">\techo $file</span><br><span class=\"line\">\tsudo dpkg -x $file customInstallPath</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>在 customInstallPath 下编写一个启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">HERE=&quot;$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)&quot;</span><br><span class=\"line\">export UNION_PRELOAD=$HERE</span><br><span class=\"line\">export LD_PRELOAD=$HERE/libunionpreload.so</span><br><span class=\"line\">export PATH=$HERE/usr/bin/:$HERE/usr/sbin/:$HERE/usr/games/:$HERE/bin/:$HERE/opt/vlc/:$HERE/sbin/:$PATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$HERE/usr/lib/:$HERE/usr/lib/x86_64-linux-gnu/:$HERE/lib/:$HERE/lib/x86_64-linux-gnu/:$HERE/usr/lib/x86_64-linux-gnu/vlc/:$LD_LIBRARY_PATH</span><br><span class=\"line\">export QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/:$HERE/usr/lib/x86_64-linux-gnu/qt5/plugins/:$QT_PLUGIN_PATH</span><br><span class=\"line\">export XDG_DATA_DIRS=$HERE/usr/share/:$XDG_DATA_DIRS</span><br><span class=\"line\">exec $HERE/usr/bin/vlc &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n\n<p>保存并赋予这个启动脚本执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x launch.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行 launch.sh 就可以运行 vlc 了</p>\n<p>这个脚本里面的 bash 变量是程序内部执行需要的变量，并不是环境变量，只有知道软件构建运行的源码才可以写出来，所以这个脚本并不是通用的，只适合 vlc</p>\n","site":{"data":{}},"excerpt":"","more":"<p>apt 只下载包及其依赖而不安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo apt-get install -d &lt;软件包&gt;</span><br><span class=\"line\">sudo apt-get install -d vlc</span><br></pre></td></tr></table></figure>\n\n<p>这将会下载到这个目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/cache/apt/archives/</span><br></pre></td></tr></table></figure>\n\n<p>为了只是获得想要的包和依赖，应该先清空这个目录再下载</p>\n<p>将 <strong>&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;</strong> 的包以及依赖移到某一个目录保存</p>\n<p>然后把这些包安装到指定目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in packagesPath:</span><br><span class=\"line\">do </span><br><span class=\"line\">\techo $file</span><br><span class=\"line\">\tsudo dpkg -x $file customInstallPath</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>在 customInstallPath 下编写一个启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">HERE=&quot;$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)&quot;</span><br><span class=\"line\">export UNION_PRELOAD=$HERE</span><br><span class=\"line\">export LD_PRELOAD=$HERE/libunionpreload.so</span><br><span class=\"line\">export PATH=$HERE/usr/bin/:$HERE/usr/sbin/:$HERE/usr/games/:$HERE/bin/:$HERE/opt/vlc/:$HERE/sbin/:$PATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$HERE/usr/lib/:$HERE/usr/lib/x86_64-linux-gnu/:$HERE/lib/:$HERE/lib/x86_64-linux-gnu/:$HERE/usr/lib/x86_64-linux-gnu/vlc/:$LD_LIBRARY_PATH</span><br><span class=\"line\">export QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/:$HERE/usr/lib/x86_64-linux-gnu/qt5/plugins/:$QT_PLUGIN_PATH</span><br><span class=\"line\">export XDG_DATA_DIRS=$HERE/usr/share/:$XDG_DATA_DIRS</span><br><span class=\"line\">exec $HERE/usr/bin/vlc &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n\n<p>保存并赋予这个启动脚本执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x launch.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行 launch.sh 就可以运行 vlc 了</p>\n<p>这个脚本里面的 bash 变量是程序内部执行需要的变量，并不是环境变量，只有知道软件构建运行的源码才可以写出来，所以这个脚本并不是通用的，只适合 vlc</p>\n"},{"title":"Debian Bashrc","date":"2022-10-23T05:25:51.000Z","_content":"需要修改 bashrc 的时候，修改 /etc/bash.bashrc，而不是 ~/.bashrc 前者是全局的，下面这一句话就是 /etc/bash.bashrc 末尾的\n\n```bash\nsource /etc/profile.d/path.sh\n```\n\n（环境变量相关）\n","source":"_posts/debian-bashrc.md","raw":"---\ntitle: Debian Bashrc \ndate: 2022-10-23 13:25:51\ntags:\n\t- Debian\n\t- Linux \n\t- Bash\n---\n需要修改 bashrc 的时候，修改 /etc/bash.bashrc，而不是 ~/.bashrc 前者是全局的，下面这一句话就是 /etc/bash.bashrc 末尾的\n\n```bash\nsource /etc/profile.d/path.sh\n```\n\n（环境变量相关）\n","slug":"debian-bashrc","published":1,"updated":"2022-10-29T07:44:08.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhz000xg7i56xstg45j","content":"<p>需要修改 bashrc 的时候，修改 &#x2F;etc&#x2F;bash.bashrc，而不是 ~&#x2F;.bashrc 前者是全局的，下面这一句话就是 &#x2F;etc&#x2F;bash.bashrc 末尾的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/path.sh</span><br></pre></td></tr></table></figure>\n\n<p>（环境变量相关）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>需要修改 bashrc 的时候，修改 &#x2F;etc&#x2F;bash.bashrc，而不是 ~&#x2F;.bashrc 前者是全局的，下面这一句话就是 &#x2F;etc&#x2F;bash.bashrc 末尾的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/path.sh</span><br></pre></td></tr></table></figure>\n\n<p>（环境变量相关）</p>\n"},{"title":"Debian Fcitx 中文输入法","date":"2022-10-23T05:25:51.000Z","_content":"不是中文环境需要进行切换中文环境,可以通过以下命令切换:\n\n```bash\nsudo dpkg-reconfigure locales\n```\n\n至少选择zh_CN.UTF-8\n\n更新\n\n```bash\nsudo apt update \n```\n\n安装 fcitx\n\n```bash\nsudo apt install fcitx\n```\n\n安装 google-pinyin\n\n```bash\nsudo apt install fcitx-googlepinyin\n```\n\n重启\n\n命令行输入 im-config 选中fcitx\n","source":"_posts/debian-fcitx-中文输入法.md","raw":"---\ntitle: Debian Fcitx 中文输入法\ndate: 2022-10-23 13:25:51\ntags:\n\t- Debian\n\t- Fcitx\n\t- Linux\n---\n不是中文环境需要进行切换中文环境,可以通过以下命令切换:\n\n```bash\nsudo dpkg-reconfigure locales\n```\n\n至少选择zh_CN.UTF-8\n\n更新\n\n```bash\nsudo apt update \n```\n\n安装 fcitx\n\n```bash\nsudo apt install fcitx\n```\n\n安装 google-pinyin\n\n```bash\nsudo apt install fcitx-googlepinyin\n```\n\n重启\n\n命令行输入 im-config 选中fcitx\n","slug":"debian-fcitx-中文输入法","published":1,"updated":"2022-10-29T07:41:06.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qhz000zg7i59li98g7a","content":"<p>不是中文环境需要进行切换中文环境,可以通过以下命令切换:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>\n\n<p>至少选择zh_CN.UTF-8</p>\n<p>更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n\n<p>安装 fcitx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fcitx</span><br></pre></td></tr></table></figure>\n\n<p>安装 google-pinyin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<p>命令行输入 im-config 选中fcitx</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不是中文环境需要进行切换中文环境,可以通过以下命令切换:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>\n\n<p>至少选择zh_CN.UTF-8</p>\n<p>更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n\n<p>安装 fcitx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fcitx</span><br></pre></td></tr></table></figure>\n\n<p>安装 google-pinyin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<p>命令行输入 im-config 选中fcitx</p>\n"},{"title":"Debian Gnome 默认浏览器","date":"2022-10-23T05:25:51.000Z","_content":"可以参考里面的指引来设置默认浏览器\n```url\nhttps://wiki.debian.org/DefaultWebBrowser\n```\n","source":"_posts/debian-gnome-default-browser.md","raw":"---\ntitle: Debian Gnome 默认浏览器\ndate: 2022-10-23 13:25:51\ntags:\n\t- Debian\n\t- Gnome\n\t- Linux\n---\n可以参考里面的指引来设置默认浏览器\n```url\nhttps://wiki.debian.org/DefaultWebBrowser\n```\n","slug":"debian-gnome-default-browser","published":1,"updated":"2022-10-29T07:41:30.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi00012g7i5871k8ws3","content":"<p>可以参考里面的指引来设置默认浏览器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://wiki.debian.org/DefaultWebBrowser</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>可以参考里面的指引来设置默认浏览器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://wiki.debian.org/DefaultWebBrowser</span><br></pre></td></tr></table></figure>\n"},{"title":"Debian Nvidia 驱动","date":"2022-10-23T05:25:51.000Z","_content":"最重要的一点，去 bios 那里关闭 secure boot 先！\n\n更新\n\n```bash\nsudo apt install nvidia-driver\n```\n\n重启\n\n```bash\nsudo reboot\n```\n\n验证是否安装成功\n\n```bash\nnvidia-smi\n```\n","source":"_posts/debian-nvidia.md","raw":"---\ntitle: Debian Nvidia 驱动\ndate: 2022-10-23 13:25:51\ntags:\n\t- Debian\n\t- Nvidia\n\t- Linux\n---\n最重要的一点，去 bios 那里关闭 secure boot 先！\n\n更新\n\n```bash\nsudo apt install nvidia-driver\n```\n\n重启\n\n```bash\nsudo reboot\n```\n\n验证是否安装成功\n\n```bash\nnvidia-smi\n```\n","slug":"debian-nvidia","published":1,"updated":"2022-10-29T07:41:51.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi00014g7i50tx0627t","content":"<p>最重要的一点，去 bios 那里关闭 secure boot 先！</p>\n<p>更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nvidia-driver</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<p>验证是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最重要的一点，去 bios 那里关闭 secure boot 先！</p>\n<p>更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nvidia-driver</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<p>验证是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n"},{"title":"Bash Powerline Fonts 美化","date":"2022-10-23T05:25:51.000Z","_content":"```url\nhttps://github.com/b-ryan/powerline-shell#bash\n```\n\n留意 README.md 里面的内容，留意如何安装 powerline 字体\n","source":"_posts/linux-bash-powerline-arrow.md","raw":"---\ntitle: Bash Powerline Fonts 美化 \ndate: 2022-10-23 13:25:51\ntags:\n\t- Bash\n\t- Linux\n\t- Powerline\n---\n```url\nhttps://github.com/b-ryan/powerline-shell#bash\n```\n\n留意 README.md 里面的内容，留意如何安装 powerline 字体\n","slug":"linux-bash-powerline-arrow","published":1,"updated":"2022-10-29T07:43:51.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi10015g7i5eo3s4wqc","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/b-ryan/powerline-shell#bash</span><br></pre></td></tr></table></figure>\n\n<p>留意 README.md 里面的内容，留意如何安装 powerline 字体</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/b-ryan/powerline-shell#bash</span><br></pre></td></tr></table></figure>\n\n<p>留意 README.md 里面的内容，留意如何安装 powerline 字体</p>\n"},{"title":"Linux 环境变量配置错误处理","date":"2022-10-23T05:25:51.000Z","_content":"Linux 环境变量配置出错后，提示command not found\n\n处理方法：\n\n```bash\nexport PATH=$PATH:/usr/bin:/usr/sbin:/bin:/sbin\n```\n\n这样处理后，临时生效环境变量，然后修改配置错误的文件例如.bash_profile   /etc/profile .bashrc 等，修改后，执行source生效正确的环境变量\n\n```bash\nsource /etc/profile --根据实际情况修改后面的文件路径\n```\n","source":"_posts/linux-command-not-found-bash.md","raw":"---\ntitle: Linux 环境变量配置错误处理\ndate: 2022-10-23 13:25:51\ntags:\n\t- Bash\n\t- Linux\n---\nLinux 环境变量配置出错后，提示command not found\n\n处理方法：\n\n```bash\nexport PATH=$PATH:/usr/bin:/usr/sbin:/bin:/sbin\n```\n\n这样处理后，临时生效环境变量，然后修改配置错误的文件例如.bash_profile   /etc/profile .bashrc 等，修改后，执行source生效正确的环境变量\n\n```bash\nsource /etc/profile --根据实际情况修改后面的文件路径\n```\n","slug":"linux-command-not-found-bash","published":1,"updated":"2022-10-29T07:45:08.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi20018g7i5bwzi4rh5","content":"<p>Linux 环境变量配置出错后，提示command not found</p>\n<p>处理方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/bin:/usr/sbin:/bin:/sbin</span><br></pre></td></tr></table></figure>\n\n<p>这样处理后，临时生效环境变量，然后修改配置错误的文件例如.bash_profile   &#x2F;etc&#x2F;profile .bashrc 等，修改后，执行source生效正确的环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile --根据实际情况修改后面的文件路径</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux 环境变量配置出错后，提示command not found</p>\n<p>处理方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/bin:/usr/sbin:/bin:/sbin</span><br></pre></td></tr></table></figure>\n\n<p>这样处理后，临时生效环境变量，然后修改配置错误的文件例如.bash_profile   &#x2F;etc&#x2F;profile .bashrc 等，修改后，执行source生效正确的环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile --根据实际情况修改后面的文件路径</span><br></pre></td></tr></table></figure>\n"},{"title":"Gnome Desktop File 参考","date":"2022-10-23T05:25:51.000Z","_content":"\neg:\n\n```bash\n[Desktop Entry]\nEncoding=UTF-8\nName=Tabby\nComment=Tabby\nExec=/home/asleep/softwares/tabby/tabby/tabby %U\nIcon=/home/asleep/softwares/tabby/tabby/tabby.svg\nTerminal=false\nStartupNotify=true\nType=Application\nCategories=Application;Development;\nStartupWMClass=tabby\n```\n\n需要改变的是 name，common，exec，icon，startupwmclass\n\n.desktop 文件位于 /usr/share/application/ 下面\n\nStartupWMClass\n\n```bash\nxprop | grep CLASS\n```\n","source":"_posts/linux-debian-gnome-desktop-launch.md","raw":"---\ntitle: Gnome Desktop File 参考 \ndate: 2022-10-23 13:25:51\ntags:\n\t- Gnome\n\t- Linux\n---\n\neg:\n\n```bash\n[Desktop Entry]\nEncoding=UTF-8\nName=Tabby\nComment=Tabby\nExec=/home/asleep/softwares/tabby/tabby/tabby %U\nIcon=/home/asleep/softwares/tabby/tabby/tabby.svg\nTerminal=false\nStartupNotify=true\nType=Application\nCategories=Application;Development;\nStartupWMClass=tabby\n```\n\n需要改变的是 name，common，exec，icon，startupwmclass\n\n.desktop 文件位于 /usr/share/application/ 下面\n\nStartupWMClass\n\n```bash\nxprop | grep CLASS\n```\n","slug":"linux-debian-gnome-desktop-launch","published":1,"updated":"2022-10-29T07:46:03.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi20019g7i5fczw96ec","content":"<p>eg:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\">Name=Tabby</span><br><span class=\"line\">Comment=Tabby</span><br><span class=\"line\">Exec=/home/asleep/softwares/tabby/tabby/tabby %U</span><br><span class=\"line\">Icon=/home/asleep/softwares/tabby/tabby/tabby.svg</span><br><span class=\"line\">Terminal=<span class=\"literal\">false</span></span><br><span class=\"line\">StartupNotify=<span class=\"literal\">true</span></span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Categories=Application;Development;</span><br><span class=\"line\">StartupWMClass=tabby</span><br></pre></td></tr></table></figure>\n\n<p>需要改变的是 name，common，exec，icon，startupwmclass</p>\n<p>.desktop 文件位于 &#x2F;usr&#x2F;share&#x2F;application&#x2F; 下面</p>\n<p>StartupWMClass</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xprop | grep CLASS</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>eg:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\">Name=Tabby</span><br><span class=\"line\">Comment=Tabby</span><br><span class=\"line\">Exec=/home/asleep/softwares/tabby/tabby/tabby %U</span><br><span class=\"line\">Icon=/home/asleep/softwares/tabby/tabby/tabby.svg</span><br><span class=\"line\">Terminal=<span class=\"literal\">false</span></span><br><span class=\"line\">StartupNotify=<span class=\"literal\">true</span></span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Categories=Application;Development;</span><br><span class=\"line\">StartupWMClass=tabby</span><br></pre></td></tr></table></figure>\n\n<p>需要改变的是 name，common，exec，icon，startupwmclass</p>\n<p>.desktop 文件位于 &#x2F;usr&#x2F;share&#x2F;application&#x2F; 下面</p>\n<p>StartupWMClass</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xprop | grep CLASS</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux VScode 字体","date":"2022-10-23T05:25:51.000Z","_content":"\n```url\nhttps://github.com/tonsky/FiraCode\n```\n","source":"_posts/linux-debian-vscode-fonts-firacode.md","raw":"---\ntitle: Linux VScode 字体\ndate: 2022-10-23 13:25:51\ntags:\n\t- VScode\n\t- Linux\n---\n\n```url\nhttps://github.com/tonsky/FiraCode\n```\n","slug":"linux-debian-vscode-fonts-firacode","published":1,"updated":"2022-10-29T07:46:52.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi3001bg7i596o526hm","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/tonsky/FiraCode</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/tonsky/FiraCode</span><br></pre></td></tr></table></figure>\n"},{"title":"Nodejs 换源","date":"2022-10-23T05:25:51.000Z","_content":"\n由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源\n\n```bash\nnpm config set registry https://registry.npm.taobao.org/\n```\n\n执行下面的命令，确认是否切换成功\n\n```bash\nnpm config get registry\n```\n","source":"_posts/node-换源-阿里.md","raw":"---\ntitle: Nodejs 换源\ndate: 2022-10-23 13:25:51\ntags:\n\t- Nodejs\n---\n\n由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源\n\n```bash\nnpm config set registry https://registry.npm.taobao.org/\n```\n\n执行下面的命令，确认是否切换成功\n\n```bash\nnpm config get registry\n```\n","slug":"node-换源-阿里","published":1,"updated":"2022-10-29T07:47:28.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi3001cg7i5g1b3fybo","content":"<p>由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>执行下面的命令，确认是否切换成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>执行下面的命令，确认是否切换成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux 环境变量配置","date":"2022-10-23T05:25:51.000Z","_content":"\n\n/etc/profile.d/path.sh\n\n```bash\nexport PATH=$PATH:/home/asleep/softwares/conda/conda/bin\nexport PATH=$PATH:/home/asleep/softwares/qrcp/qrcp\nexport PATH=$PATH:/home/asleep/softwares/nodejs/nodejs/bin\nexport PATH=$PATH:/home/asleep/softwares/baidunetdisk/baidunetdisk/opt/baidunetdisk\nexport PATH=$PATH:/home/asleep/softwares/adb/adb\nexport PATH=$PATH:/home/asleep/softwares/wine/wine\nexport PATH=$PATH:/home/asleep/softwares/neovim/neovim\nexport PATH=$PATH:/home/asleep/softwares/go/go_path/bin\nexport PATH=$PATH:/home/asleep/softwares/autossh/autossh\n\nexport GOROOT='/home/asleep/softwares/go/go_base/go'\nexport GOPATH='/home/asleep/softwares/go/go_path'\nexport GOCACHE='/home/asleep/softwares/go/go_cache'\nexport GOENV='/home/asleep/softwares/go/go_env'\n# export GOMOD='/home/asleep/softwares/go/go_mod'\nexport GO111MODULE='auto'\n# export GOWORK='/home/asleep/softwares/go/go_work'\nexport GOPROXY='https://goproxy.cn/,direct'\nexport PATH=$PATH:/home/asleep/softwares/go/go_base/go/bin\n\n# alias vim='vim.tiny'\n# alias sudo='sudo '\n```\n\n这里只能存 path 和 alias，其他的能在 /etc/bash.bashrc 里面解决就在那里解决，原则！\n","source":"_posts/path.sh-gopath-alias.md","raw":"---\ntitle: Linux 环境变量配置\ndate: 2022-10-23 13:25:51\ntags:\n\t- Bash\n\t- Linux\n---\n\n\n/etc/profile.d/path.sh\n\n```bash\nexport PATH=$PATH:/home/asleep/softwares/conda/conda/bin\nexport PATH=$PATH:/home/asleep/softwares/qrcp/qrcp\nexport PATH=$PATH:/home/asleep/softwares/nodejs/nodejs/bin\nexport PATH=$PATH:/home/asleep/softwares/baidunetdisk/baidunetdisk/opt/baidunetdisk\nexport PATH=$PATH:/home/asleep/softwares/adb/adb\nexport PATH=$PATH:/home/asleep/softwares/wine/wine\nexport PATH=$PATH:/home/asleep/softwares/neovim/neovim\nexport PATH=$PATH:/home/asleep/softwares/go/go_path/bin\nexport PATH=$PATH:/home/asleep/softwares/autossh/autossh\n\nexport GOROOT='/home/asleep/softwares/go/go_base/go'\nexport GOPATH='/home/asleep/softwares/go/go_path'\nexport GOCACHE='/home/asleep/softwares/go/go_cache'\nexport GOENV='/home/asleep/softwares/go/go_env'\n# export GOMOD='/home/asleep/softwares/go/go_mod'\nexport GO111MODULE='auto'\n# export GOWORK='/home/asleep/softwares/go/go_work'\nexport GOPROXY='https://goproxy.cn/,direct'\nexport PATH=$PATH:/home/asleep/softwares/go/go_base/go/bin\n\n# alias vim='vim.tiny'\n# alias sudo='sudo '\n```\n\n这里只能存 path 和 alias，其他的能在 /etc/bash.bashrc 里面解决就在那里解决，原则！\n","slug":"path.sh-gopath-alias","published":1,"updated":"2022-10-29T07:48:27.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi4001eg7i597nmbue1","content":"<p>&#x2F;etc&#x2F;profile.d&#x2F;path.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/conda/conda/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/qrcp/qrcp</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/nodejs/nodejs/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/baidunetdisk/baidunetdisk/opt/baidunetdisk</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/adb/adb</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/wine/wine</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/neovim/neovim</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/go/go_path/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/autossh/autossh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_base/go&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_path&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOCACHE=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_cache&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOENV=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_env&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># export GOMOD=&#x27;/home/asleep/softwares/go/go_mod&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=<span class=\"string\">&#x27;auto&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># export GOWORK=&#x27;/home/asleep/softwares/go/go_work&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=<span class=\"string\">&#x27;https://goproxy.cn/,direct&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/go/go_base/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># alias vim=&#x27;vim.tiny&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># alias sudo=&#x27;sudo &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里只能存 path 和 alias，其他的能在 &#x2F;etc&#x2F;bash.bashrc 里面解决就在那里解决，原则！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&#x2F;etc&#x2F;profile.d&#x2F;path.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/conda/conda/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/qrcp/qrcp</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/nodejs/nodejs/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/baidunetdisk/baidunetdisk/opt/baidunetdisk</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/adb/adb</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/wine/wine</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/neovim/neovim</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/go/go_path/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/autossh/autossh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_base/go&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_path&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOCACHE=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_cache&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOENV=<span class=\"string\">&#x27;/home/asleep/softwares/go/go_env&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># export GOMOD=&#x27;/home/asleep/softwares/go/go_mod&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=<span class=\"string\">&#x27;auto&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># export GOWORK=&#x27;/home/asleep/softwares/go/go_work&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=<span class=\"string\">&#x27;https://goproxy.cn/,direct&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/asleep/softwares/go/go_base/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># alias vim=&#x27;vim.tiny&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># alias sudo=&#x27;sudo &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里只能存 path 和 alias，其他的能在 &#x2F;etc&#x2F;bash.bashrc 里面解决就在那里解决，原则！</p>\n"},{"title":"VIM 批量查找替换","date":"2022-10-23T05:25:51.000Z","_content":"\n\n```\n# 当前行进行替换\n:s/XXX/YYY/g\n# XXX是需要替换的字符串,YYY是替换后的字符串\n\n\n# 全局替换\n:% s/XXX/YYY/g\n\n\n# 对指定部分进行替换用V进入visual模式,再进行\n:s/XXX/YYY/g\n\n\n# 或指定行范围 替换\n:100,102s/XXX/YYY/g\n\n# 模糊查找不区分大小写，在要查找的内容后面加上 \\c 就行\n:/xxx\\c\n:s/XXX\\c/YYY/g\n```\n","source":"_posts/vim-nvim-replace-批量查找替换.md","raw":"---\ntitle: VIM 批量查找替换\ndate: 2022-10-23 13:25:51\ntags:\n\t- VIM\n---\n\n\n```\n# 当前行进行替换\n:s/XXX/YYY/g\n# XXX是需要替换的字符串,YYY是替换后的字符串\n\n\n# 全局替换\n:% s/XXX/YYY/g\n\n\n# 对指定部分进行替换用V进入visual模式,再进行\n:s/XXX/YYY/g\n\n\n# 或指定行范围 替换\n:100,102s/XXX/YYY/g\n\n# 模糊查找不区分大小写，在要查找的内容后面加上 \\c 就行\n:/xxx\\c\n:s/XXX\\c/YYY/g\n```\n","slug":"vim-nvim-replace-批量查找替换","published":1,"updated":"2022-10-30T03:07:21.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi4001fg7i5b09c8p0e","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当前行进行替换</span><br><span class=\"line\">:s/XXX/YYY/g</span><br><span class=\"line\"># XXX是需要替换的字符串,YYY是替换后的字符串</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 全局替换</span><br><span class=\"line\">:% s/XXX/YYY/g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 对指定部分进行替换用V进入visual模式,再进行</span><br><span class=\"line\">:s/XXX/YYY/g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 或指定行范围 替换</span><br><span class=\"line\">:100,102s/XXX/YYY/g</span><br><span class=\"line\"></span><br><span class=\"line\"># 模糊查找不区分大小写，在要查找的内容后面加上 \\c 就行</span><br><span class=\"line\">:/xxx\\c</span><br><span class=\"line\">:s/XXX\\c/YYY/g</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当前行进行替换</span><br><span class=\"line\">:s/XXX/YYY/g</span><br><span class=\"line\"># XXX是需要替换的字符串,YYY是替换后的字符串</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 全局替换</span><br><span class=\"line\">:% s/XXX/YYY/g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 对指定部分进行替换用V进入visual模式,再进行</span><br><span class=\"line\">:s/XXX/YYY/g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 或指定行范围 替换</span><br><span class=\"line\">:100,102s/XXX/YYY/g</span><br><span class=\"line\"></span><br><span class=\"line\"># 模糊查找不区分大小写，在要查找的内容后面加上 \\c 就行</span><br><span class=\"line\">:/xxx\\c</span><br><span class=\"line\">:s/XXX\\c/YYY/g</span><br></pre></td></tr></table></figure>\n"},{"title":"Wayland Wemeet","date":"2022-11-05T06:45:11.000Z","_content":"\n腾讯会议不支持 Wayland\n\n<img src=\"/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png\"/>\n\n\n###### \n\n解决方法\n\n\n- 进入 /opt/wemeet 目录\n- 编辑 wemeetapp.sh 文件\n- 在 export QT_PLUGIN_PATH=\"${HERE}/plugins\" 后添加如下三行代码后保存\n\t\n\t```\n\texport XDG_SESSION_TYPE=x11\n\texport QT_QPA_PLATFORM=xcb\n\tunset WAYLAND_DISPLAY\n\t```\n\n- 重启即可\n\t\n\n###### \n\n缺点\n\n- 由于 Wayland 的限制，腾讯会议现在无法捕捉到屏幕，自然“共享屏幕”也就失效了，实际效果是当尝试共享屏幕时，共享的是 pure black\n\n\n\n\n\n\n","source":"_posts/wayland-wemeet.md","raw":"---\ntitle: Wayland Wemeet\ndate: 2022-11-05 14:45:11\ntags:\n\t- Linux\n\t- Wayland\n---\n\n腾讯会议不支持 Wayland\n\n<img src=\"/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png\"/>\n\n\n###### \n\n解决方法\n\n\n- 进入 /opt/wemeet 目录\n- 编辑 wemeetapp.sh 文件\n- 在 export QT_PLUGIN_PATH=\"${HERE}/plugins\" 后添加如下三行代码后保存\n\t\n\t```\n\texport XDG_SESSION_TYPE=x11\n\texport QT_QPA_PLATFORM=xcb\n\tunset WAYLAND_DISPLAY\n\t```\n\n- 重启即可\n\t\n\n###### \n\n缺点\n\n- 由于 Wayland 的限制，腾讯会议现在无法捕捉到屏幕，自然“共享屏幕”也就失效了，实际效果是当尝试共享屏幕时，共享的是 pure black\n\n\n\n\n\n\n","slug":"wayland-wemeet","published":1,"updated":"2022-11-05T06:54:21.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6l8qi5001hg7i553rl00gs","content":"<p>腾讯会议不支持 Wayland</p>\n<img src=\"/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png\"/>\n\n\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><p>解决方法</p>\n<ul>\n<li><p>进入 &#x2F;opt&#x2F;wemeet 目录</p>\n</li>\n<li><p>编辑 wemeetapp.sh 文件</p>\n</li>\n<li><p>在 export QT_PLUGIN_PATH&#x3D;”${HERE}&#x2F;plugins” 后添加如下三行代码后保存</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export XDG_SESSION_TYPE=x11</span><br><span class=\"line\">export QT_QPA_PLATFORM=xcb</span><br><span class=\"line\">unset WAYLAND_DISPLAY</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启即可</p>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p>缺点</p>\n<ul>\n<li>由于 Wayland 的限制，腾讯会议现在无法捕捉到屏幕，自然“共享屏幕”也就失效了，实际效果是当尝试共享屏幕时，共享的是 pure black</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>腾讯会议不支持 Wayland</p>\n<img src=\"/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png\"/>\n\n\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><p>解决方法</p>\n<ul>\n<li><p>进入 &#x2F;opt&#x2F;wemeet 目录</p>\n</li>\n<li><p>编辑 wemeetapp.sh 文件</p>\n</li>\n<li><p>在 export QT_PLUGIN_PATH&#x3D;”${HERE}&#x2F;plugins” 后添加如下三行代码后保存</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export XDG_SESSION_TYPE=x11</span><br><span class=\"line\">export QT_QPA_PLATFORM=xcb</span><br><span class=\"line\">unset WAYLAND_DISPLAY</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启即可</p>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p>缺点</p>\n<ul>\n<li>由于 Wayland 的限制，腾讯会议现在无法捕捉到屏幕，自然“共享屏幕”也就失效了，实际效果是当尝试共享屏幕时，共享的是 pure black</li>\n</ul>\n"},{"title":"初识 MARO","date":"2022-10-26T02:20:02.000Z","_content":"### [MARO ，“Multi-Agent-Resource Optimization” ](https://github.com/microsoft/maro)，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台\n######\n#### 可以应用 MARO 的实际例子：\n\n- ##### CIM,\"Container Inventory Management\",中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\n\t- 而使用 MARO 可以解决这个问题，使得每个港口尽可能分配到恰当的空集装箱资源，不多不少。\n\t- 在这个场景里面，空集装箱是中心资源，导致资源数量改变的事件有两个：\n\t\t- 第一个是 Order ，即订单，订单会导致货物从 source port 运到 destination port ， 这个时候 source port 出货，empty container 会减少，destination port 进货，empty container 会增加\n\t\t- 第二个是 repositioning，使用 MARO 重定位空集装箱，平衡全球空集装箱分布。\n######\n\n![](/pictures/初识MARO/cim.container_flow.svg)\n\n- ##### 对上面这个流程图的解释\n\t- 托运人（shipper）生成订单（send order）后，相应源端口（source port）的空容器将被释放（release empty）给托运人（shipper）\n\t- 托运人（shipper）将用货物装满集装箱，将其变成满载货物，然后在将满载货物的集装箱运回到（return laden）源港口（source port）\n\t- 船（vessel）到港口（source port）之后被装载满载货物的集装箱（load laden）\n\t- 船航行到进口港（source port），卸货（discharge laden）\n\t- 满载货物将被释放（release laden）给收货人（consignee），收货人将取出其中的货物，集装箱再次变空返回港口（return empty）\n######\n- ##### 这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load/discharge empty \n\t- 为了为了重新平衡集装箱分布，每个港口（port）的代理商（agent）将决定每次船舶（vessel）到达港口时如何重新分配（repostioning）空集装箱\n\t\t- 船只（vessel）到达港口时，是往船上装载空集装箱（load empty），还是消费船上原有的空集装箱（discharge empty）\n\t\t- 分配 load/discharge empty 的数量\n######\n- ##### MARO 就是帮助 agent 调整 load/discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\n\t- 出口导向型港口（例如中国的港口）显示出明显的高需求特征，通常需要额外的空集装箱供应，这些港口将倾向于从船上卸载空集装箱\n\t- 虽然以进口为导向的港口具有显著的盈余特征，但通常从收货人那里收到许多空集装箱，因此，如果存在空闲容量，面向进口的港口将倾向于将多余的空集装箱装入船舶\n######\n- #### 简单拓扑结构\n![](/pictures/初识MARO/cim.toys.svg)\n- ##### 这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单\n- ##### 上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S\n\t- **拓扑（1）** 有四个 port ，D1 和 D2 是简单的需求者（需要额外 empty container 的端口），而 S2 是简单的供应商（具有剩余空容器的端口），尽管 S1 是一个简单的目标端口，但它位于两个服务路由的交点，这使其成为此拓扑中的特殊端口，为了实现全局最优，S1 必须学会区分服务路由并执行特定于服务路由的重新定位操作\n\t- **拓扑（2）** 中有五个端口，根据订单，D1 和 D2 是简单的需求者，而 S1 和 S2 是简单的供应商，作为服务航线交汇处的港口，T1港口虽然可以达到自平衡状态，但仍对全局最优起着重要作用，T1 的最佳重新定位策略是将多余的空容器从左侧服务路由转移到右侧服务路由，此外，D1 和 D2 应该学会只卸载它们需要的 empty 数量，并将多余的 empty 留给其他端口\n\t- **拓扑（3）** 中有六个端口，简单的需求者 D1 和 D2 ，简单的供应商 S1 和 S2 ，以及自平衡端口 T1 和 T2 ，比拓扑（2）更困难的是，应该采取更多的转移来将多余的空集装箱从最左边的服务路线重新定位到最右边的航线，这意味着需要一个涉及更多港口的多步骤解决方案\n######\n![](/pictures/初识MARO/cim.global_trade.svg)\n- 这是基于真实世界数据设计的拓扑,大多数港口不再具有简单的供需功能。港口之间的合作要复杂得多，很难手动找到有效的重新定位策略\n######\n- #### 入门\n- ##### 安装\n```python\npip install pymaro\n```\n- ##### MARO 算法有两个关键步骤\n- ###### 算法决策事件 DecisionEventDecisionEvent\n\t- tick (int)：相应的刻度\n\t- port_idx（int）：需要响应环境的端口/代理的 ID\n\t- vessel_idx（int）：港口/代理人的船舶/操作对象的 ID\n\t- action_scope（操作范围）：操作范围有两个属性，load表示可以从船舶港口装载的最大数量，discharge表示从船舶到港口可以卸货的最大数量\n\t- early_discharge（int）：当船上的可用容量不足以装载满载物时，船上的一些空容器将被提前卸货以释放空间，由于满载而提前卸货的空容器数量记录在该字段中\n- ###### 行动 Action\n\t- none，这意味着什么都不做\n\t- a valid instance，有效实例：\n\t- vessel_idx（int）：港口/代理人的船舶/操作对象的 ID\n\t- port_idx（int）：执行此操作的端口/代理的 ID\n\t- action_type（操作类型）：在此操作中是装载还是卸载空容器\n\t- 数量（int）：要装载/卸载的空容器的（非负）数量\n######\n![](/pictures/初识MARO/maro_overview.svg)\n- #### 上图是 MARO 框架图\n\t- Simulation toolkit：它提供了一些预定义的场景，以及用于构建新场景的可重用轮子\n\t- RL toolkit：它为 RL 提供了全栈抽象，例如代理管理器、代理、RL 算法、学习器、参与者和各种塑造者\n\t- Distributed toolkit：提供分布式通信组件、消息自动处理、集群配置、作业编排等用户定义功能的接口\n\n<br/>\n<h3>\n<div align=\"right\" >\nNEXT : {% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %}\n</div>\n</h3>\n","source":"_posts/初识-MARO.md","raw":"---\ntitle: 初识 MARO\ndate: 2022-10-26 10:20:02\ntags:\n\t- MARO\n---\n### [MARO ，“Multi-Agent-Resource Optimization” ](https://github.com/microsoft/maro)，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台\n######\n#### 可以应用 MARO 的实际例子：\n\n- ##### CIM,\"Container Inventory Management\",中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\n\t- 而使用 MARO 可以解决这个问题，使得每个港口尽可能分配到恰当的空集装箱资源，不多不少。\n\t- 在这个场景里面，空集装箱是中心资源，导致资源数量改变的事件有两个：\n\t\t- 第一个是 Order ，即订单，订单会导致货物从 source port 运到 destination port ， 这个时候 source port 出货，empty container 会减少，destination port 进货，empty container 会增加\n\t\t- 第二个是 repositioning，使用 MARO 重定位空集装箱，平衡全球空集装箱分布。\n######\n\n![](/pictures/初识MARO/cim.container_flow.svg)\n\n- ##### 对上面这个流程图的解释\n\t- 托运人（shipper）生成订单（send order）后，相应源端口（source port）的空容器将被释放（release empty）给托运人（shipper）\n\t- 托运人（shipper）将用货物装满集装箱，将其变成满载货物，然后在将满载货物的集装箱运回到（return laden）源港口（source port）\n\t- 船（vessel）到港口（source port）之后被装载满载货物的集装箱（load laden）\n\t- 船航行到进口港（source port），卸货（discharge laden）\n\t- 满载货物将被释放（release laden）给收货人（consignee），收货人将取出其中的货物，集装箱再次变空返回港口（return empty）\n######\n- ##### 这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load/discharge empty \n\t- 为了为了重新平衡集装箱分布，每个港口（port）的代理商（agent）将决定每次船舶（vessel）到达港口时如何重新分配（repostioning）空集装箱\n\t\t- 船只（vessel）到达港口时，是往船上装载空集装箱（load empty），还是消费船上原有的空集装箱（discharge empty）\n\t\t- 分配 load/discharge empty 的数量\n######\n- ##### MARO 就是帮助 agent 调整 load/discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\n\t- 出口导向型港口（例如中国的港口）显示出明显的高需求特征，通常需要额外的空集装箱供应，这些港口将倾向于从船上卸载空集装箱\n\t- 虽然以进口为导向的港口具有显著的盈余特征，但通常从收货人那里收到许多空集装箱，因此，如果存在空闲容量，面向进口的港口将倾向于将多余的空集装箱装入船舶\n######\n- #### 简单拓扑结构\n![](/pictures/初识MARO/cim.toys.svg)\n- ##### 这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单\n- ##### 上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S\n\t- **拓扑（1）** 有四个 port ，D1 和 D2 是简单的需求者（需要额外 empty container 的端口），而 S2 是简单的供应商（具有剩余空容器的端口），尽管 S1 是一个简单的目标端口，但它位于两个服务路由的交点，这使其成为此拓扑中的特殊端口，为了实现全局最优，S1 必须学会区分服务路由并执行特定于服务路由的重新定位操作\n\t- **拓扑（2）** 中有五个端口，根据订单，D1 和 D2 是简单的需求者，而 S1 和 S2 是简单的供应商，作为服务航线交汇处的港口，T1港口虽然可以达到自平衡状态，但仍对全局最优起着重要作用，T1 的最佳重新定位策略是将多余的空容器从左侧服务路由转移到右侧服务路由，此外，D1 和 D2 应该学会只卸载它们需要的 empty 数量，并将多余的 empty 留给其他端口\n\t- **拓扑（3）** 中有六个端口，简单的需求者 D1 和 D2 ，简单的供应商 S1 和 S2 ，以及自平衡端口 T1 和 T2 ，比拓扑（2）更困难的是，应该采取更多的转移来将多余的空集装箱从最左边的服务路线重新定位到最右边的航线，这意味着需要一个涉及更多港口的多步骤解决方案\n######\n![](/pictures/初识MARO/cim.global_trade.svg)\n- 这是基于真实世界数据设计的拓扑,大多数港口不再具有简单的供需功能。港口之间的合作要复杂得多，很难手动找到有效的重新定位策略\n######\n- #### 入门\n- ##### 安装\n```python\npip install pymaro\n```\n- ##### MARO 算法有两个关键步骤\n- ###### 算法决策事件 DecisionEventDecisionEvent\n\t- tick (int)：相应的刻度\n\t- port_idx（int）：需要响应环境的端口/代理的 ID\n\t- vessel_idx（int）：港口/代理人的船舶/操作对象的 ID\n\t- action_scope（操作范围）：操作范围有两个属性，load表示可以从船舶港口装载的最大数量，discharge表示从船舶到港口可以卸货的最大数量\n\t- early_discharge（int）：当船上的可用容量不足以装载满载物时，船上的一些空容器将被提前卸货以释放空间，由于满载而提前卸货的空容器数量记录在该字段中\n- ###### 行动 Action\n\t- none，这意味着什么都不做\n\t- a valid instance，有效实例：\n\t- vessel_idx（int）：港口/代理人的船舶/操作对象的 ID\n\t- port_idx（int）：执行此操作的端口/代理的 ID\n\t- action_type（操作类型）：在此操作中是装载还是卸载空容器\n\t- 数量（int）：要装载/卸载的空容器的（非负）数量\n######\n![](/pictures/初识MARO/maro_overview.svg)\n- #### 上图是 MARO 框架图\n\t- Simulation toolkit：它提供了一些预定义的场景，以及用于构建新场景的可重用轮子\n\t- RL toolkit：它为 RL 提供了全栈抽象，例如代理管理器、代理、RL 算法、学习器、参与者和各种塑造者\n\t- Distributed toolkit：提供分布式通信组件、消息自动处理、集群配置、作业编排等用户定义功能的接口\n\n<br/>\n<h3>\n<div align=\"right\" >\nNEXT : {% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %}\n</div>\n</h3>\n","slug":"初识-MARO","published":1,"updated":"2022-11-23T11:55:39.772Z","_id":"cla6l8qi5001jg7i561mf870i","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台\"><a href=\"#MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台\" class=\"headerlink\" title=\"MARO ，“Multi-Agent-Resource Optimization” ，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台\"></a><a href=\"https://github.com/microsoft/maro\">MARO ，“Multi-Agent-Resource Optimization” </a>，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台</h3><h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h4 id=\"可以应用-MARO-的实际例子：\"><a href=\"#可以应用-MARO-的实际例子：\" class=\"headerlink\" title=\"可以应用 MARO 的实际例子：\"></a>可以应用 MARO 的实际例子：</h4><ul>\n<li><h5 id=\"CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\"><a href=\"#CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\" class=\"headerlink\" title=\"CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\"></a>CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）</h5><ul>\n<li>而使用 MARO 可以解决这个问题，使得每个港口尽可能分配到恰当的空集装箱资源，不多不少。</li>\n<li>在这个场景里面，空集装箱是中心资源，导致资源数量改变的事件有两个：<ul>\n<li>第一个是 Order ，即订单，订单会导致货物从 source port 运到 destination port ， 这个时候 source port 出货，empty container 会减少，destination port 进货，empty container 会增加</li>\n<li>第二个是 repositioning，使用 MARO 重定位空集装箱，平衡全球空集装箱分布。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/cim.container_flow.svg\"></p>\n<ul>\n<li><h5 id=\"对上面这个流程图的解释\"><a href=\"#对上面这个流程图的解释\" class=\"headerlink\" title=\"对上面这个流程图的解释\"></a>对上面这个流程图的解释</h5><ul>\n<li>托运人（shipper）生成订单（send order）后，相应源端口（source port）的空容器将被释放（release empty）给托运人（shipper）</li>\n<li>托运人（shipper）将用货物装满集装箱，将其变成满载货物，然后在将满载货物的集装箱运回到（return laden）源港口（source port）</li>\n<li>船（vessel）到港口（source port）之后被装载满载货物的集装箱（load laden）</li>\n<li>船航行到进口港（source port），卸货（discharge laden）</li>\n<li>满载货物将被释放（release laden）给收货人（consignee），收货人将取出其中的货物，集装箱再次变空返回港口（return empty）</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty\"><a href=\"#这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty\" class=\"headerlink\" title=\"这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty\"></a>这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty</h5><ul>\n<li>为了为了重新平衡集装箱分布，每个港口（port）的代理商（agent）将决定每次船舶（vessel）到达港口时如何重新分配（repostioning）空集装箱<ul>\n<li>船只（vessel）到达港口时，是往船上装载空集装箱（load empty），还是消费船上原有的空集装箱（discharge empty）</li>\n<li>分配 load&#x2F;discharge empty 的数量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\"><a href=\"#MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\" class=\"headerlink\" title=\"MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\"></a>MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况</h5><ul>\n<li>出口导向型港口（例如中国的港口）显示出明显的高需求特征，通常需要额外的空集装箱供应，这些港口将倾向于从船上卸载空集装箱</li>\n<li>虽然以进口为导向的港口具有显著的盈余特征，但通常从收货人那里收到许多空集装箱，因此，如果存在空闲容量，面向进口的港口将倾向于将多余的空集装箱装入船舶</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h4 id=\"简单拓扑结构\"><a href=\"#简单拓扑结构\" class=\"headerlink\" title=\"简单拓扑结构\"></a>简单拓扑结构</h4><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/cim.toys.svg\"></li>\n<li><h5 id=\"这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单\"><a href=\"#这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单\" class=\"headerlink\" title=\"这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单\"></a>这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单</h5></li>\n<li><h5 id=\"上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S\"><a href=\"#上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S\" class=\"headerlink\" title=\"上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S\"></a>上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S</h5><ul>\n<li><strong>拓扑（1）</strong> 有四个 port ，D1 和 D2 是简单的需求者（需要额外 empty container 的端口），而 S2 是简单的供应商（具有剩余空容器的端口），尽管 S1 是一个简单的目标端口，但它位于两个服务路由的交点，这使其成为此拓扑中的特殊端口，为了实现全局最优，S1 必须学会区分服务路由并执行特定于服务路由的重新定位操作</li>\n<li><strong>拓扑（2）</strong> 中有五个端口，根据订单，D1 和 D2 是简单的需求者，而 S1 和 S2 是简单的供应商，作为服务航线交汇处的港口，T1港口虽然可以达到自平衡状态，但仍对全局最优起着重要作用，T1 的最佳重新定位策略是将多余的空容器从左侧服务路由转移到右侧服务路由，此外，D1 和 D2 应该学会只卸载它们需要的 empty 数量，并将多余的 empty 留给其他端口</li>\n<li><strong>拓扑（3）</strong> 中有六个端口，简单的需求者 D1 和 D2 ，简单的供应商 S1 和 S2 ，以及自平衡端口 T1 和 T2 ，比拓扑（2）更困难的是，应该采取更多的转移来将多余的空集装箱从最左边的服务路线重新定位到最右边的航线，这意味着需要一个涉及更多港口的多步骤解决方案</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/cim.global_trade.svg\"></p>\n<ul>\n<li>这是基于真实世界数据设计的拓扑,大多数港口不再具有简单的供需功能。港口之间的合作要复杂得多，很难手动找到有效的重新定位策略</li>\n</ul>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h4 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h4></li>\n<li><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pymaro</span><br></pre></td></tr></table></figure></li>\n<li><h5 id=\"MARO-算法有两个关键步骤\"><a href=\"#MARO-算法有两个关键步骤\" class=\"headerlink\" title=\"MARO 算法有两个关键步骤\"></a>MARO 算法有两个关键步骤</h5></li>\n<li><h6 id=\"算法决策事件-DecisionEventDecisionEvent\"><a href=\"#算法决策事件-DecisionEventDecisionEvent\" class=\"headerlink\" title=\"算法决策事件 DecisionEventDecisionEvent\"></a>算法决策事件 DecisionEventDecisionEvent</h6><ul>\n<li>tick (int)：相应的刻度</li>\n<li>port_idx（int）：需要响应环境的端口&#x2F;代理的 ID</li>\n<li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li>\n<li>action_scope（操作范围）：操作范围有两个属性，load表示可以从船舶港口装载的最大数量，discharge表示从船舶到港口可以卸货的最大数量</li>\n<li>early_discharge（int）：当船上的可用容量不足以装载满载物时，船上的一些空容器将被提前卸货以释放空间，由于满载而提前卸货的空容器数量记录在该字段中</li>\n</ul>\n</li>\n<li><h6 id=\"行动-Action\"><a href=\"#行动-Action\" class=\"headerlink\" title=\"行动 Action\"></a>行动 Action</h6><ul>\n<li>none，这意味着什么都不做</li>\n<li>a valid instance，有效实例：</li>\n<li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li>\n<li>port_idx（int）：执行此操作的端口&#x2F;代理的 ID</li>\n<li>action_type（操作类型）：在此操作中是装载还是卸载空容器</li>\n<li>数量（int）：要装载&#x2F;卸载的空容器的（非负）数量</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/maro_overview.svg\"></p>\n<ul>\n<li><h4 id=\"上图是-MARO-框架图\"><a href=\"#上图是-MARO-框架图\" class=\"headerlink\" title=\"上图是 MARO 框架图\"></a>上图是 MARO 框架图</h4><ul>\n<li>Simulation toolkit：它提供了一些预定义的场景，以及用于构建新场景的可重用轮子</li>\n<li>RL toolkit：它为 RL 提供了全栈抽象，例如代理管理器、代理、RL 算法、学习器、参与者和各种塑造者</li>\n<li>Distributed toolkit：提供分布式通信组件、消息自动处理、集群配置、作业编排等用户定义功能的接口</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3>\n<div align=\"right\" >\nNEXT : <a href=\"/2022/11/04/MARO-Distibuted-toolkit/\" title=\"MARO Distibuted Toolkit\">MARO Distibuted toolkit</a>\n</div>\n</h3>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台\"><a href=\"#MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台\" class=\"headerlink\" title=\"MARO ，“Multi-Agent-Resource Optimization” ，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台\"></a><a href=\"https://github.com/microsoft/maro\">MARO ，“Multi-Agent-Resource Optimization” </a>，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台</h3><h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><h4 id=\"可以应用-MARO-的实际例子：\"><a href=\"#可以应用-MARO-的实际例子：\" class=\"headerlink\" title=\"可以应用 MARO 的实际例子：\"></a>可以应用 MARO 的实际例子：</h4><ul>\n<li><h5 id=\"CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\"><a href=\"#CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\" class=\"headerlink\" title=\"CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）\"></a>CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）</h5><ul>\n<li>而使用 MARO 可以解决这个问题，使得每个港口尽可能分配到恰当的空集装箱资源，不多不少。</li>\n<li>在这个场景里面，空集装箱是中心资源，导致资源数量改变的事件有两个：<ul>\n<li>第一个是 Order ，即订单，订单会导致货物从 source port 运到 destination port ， 这个时候 source port 出货，empty container 会减少，destination port 进货，empty container 会增加</li>\n<li>第二个是 repositioning，使用 MARO 重定位空集装箱，平衡全球空集装箱分布。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/cim.container_flow.svg\"></p>\n<ul>\n<li><h5 id=\"对上面这个流程图的解释\"><a href=\"#对上面这个流程图的解释\" class=\"headerlink\" title=\"对上面这个流程图的解释\"></a>对上面这个流程图的解释</h5><ul>\n<li>托运人（shipper）生成订单（send order）后，相应源端口（source port）的空容器将被释放（release empty）给托运人（shipper）</li>\n<li>托运人（shipper）将用货物装满集装箱，将其变成满载货物，然后在将满载货物的集装箱运回到（return laden）源港口（source port）</li>\n<li>船（vessel）到港口（source port）之后被装载满载货物的集装箱（load laden）</li>\n<li>船航行到进口港（source port），卸货（discharge laden）</li>\n<li>满载货物将被释放（release laden）给收货人（consignee），收货人将取出其中的货物，集装箱再次变空返回港口（return empty）</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty\"><a href=\"#这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty\" class=\"headerlink\" title=\"这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty\"></a>这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty</h5><ul>\n<li>为了为了重新平衡集装箱分布，每个港口（port）的代理商（agent）将决定每次船舶（vessel）到达港口时如何重新分配（repostioning）空集装箱<ul>\n<li>船只（vessel）到达港口时，是往船上装载空集装箱（load empty），还是消费船上原有的空集装箱（discharge empty）</li>\n<li>分配 load&#x2F;discharge empty 的数量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\"><a href=\"#MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\" class=\"headerlink\" title=\"MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况\"></a>MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况</h5><ul>\n<li>出口导向型港口（例如中国的港口）显示出明显的高需求特征，通常需要额外的空集装箱供应，这些港口将倾向于从船上卸载空集装箱</li>\n<li>虽然以进口为导向的港口具有显著的盈余特征，但通常从收货人那里收到许多空集装箱，因此，如果存在空闲容量，面向进口的港口将倾向于将多余的空集装箱装入船舶</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h4 id=\"简单拓扑结构\"><a href=\"#简单拓扑结构\" class=\"headerlink\" title=\"简单拓扑结构\"></a>简单拓扑结构</h4><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/cim.toys.svg\"></li>\n<li><h5 id=\"这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单\"><a href=\"#这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单\" class=\"headerlink\" title=\"这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单\"></a>这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单</h5></li>\n<li><h5 id=\"上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S\"><a href=\"#上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S\" class=\"headerlink\" title=\"上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S\"></a>上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S</h5><ul>\n<li><strong>拓扑（1）</strong> 有四个 port ，D1 和 D2 是简单的需求者（需要额外 empty container 的端口），而 S2 是简单的供应商（具有剩余空容器的端口），尽管 S1 是一个简单的目标端口，但它位于两个服务路由的交点，这使其成为此拓扑中的特殊端口，为了实现全局最优，S1 必须学会区分服务路由并执行特定于服务路由的重新定位操作</li>\n<li><strong>拓扑（2）</strong> 中有五个端口，根据订单，D1 和 D2 是简单的需求者，而 S1 和 S2 是简单的供应商，作为服务航线交汇处的港口，T1港口虽然可以达到自平衡状态，但仍对全局最优起着重要作用，T1 的最佳重新定位策略是将多余的空容器从左侧服务路由转移到右侧服务路由，此外，D1 和 D2 应该学会只卸载它们需要的 empty 数量，并将多余的 empty 留给其他端口</li>\n<li><strong>拓扑（3）</strong> 中有六个端口，简单的需求者 D1 和 D2 ，简单的供应商 S1 和 S2 ，以及自平衡端口 T1 和 T2 ，比拓扑（2）更困难的是，应该采取更多的转移来将多余的空集装箱从最左边的服务路线重新定位到最右边的航线，这意味着需要一个涉及更多港口的多步骤解决方案</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/cim.global_trade.svg\"></p>\n<ul>\n<li>这是基于真实世界数据设计的拓扑,大多数港口不再具有简单的供需功能。港口之间的合作要复杂得多，很难手动找到有效的重新定位策略</li>\n</ul>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h4 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h4></li>\n<li><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pymaro</span><br></pre></td></tr></table></figure></li>\n<li><h5 id=\"MARO-算法有两个关键步骤\"><a href=\"#MARO-算法有两个关键步骤\" class=\"headerlink\" title=\"MARO 算法有两个关键步骤\"></a>MARO 算法有两个关键步骤</h5></li>\n<li><h6 id=\"算法决策事件-DecisionEventDecisionEvent\"><a href=\"#算法决策事件-DecisionEventDecisionEvent\" class=\"headerlink\" title=\"算法决策事件 DecisionEventDecisionEvent\"></a>算法决策事件 DecisionEventDecisionEvent</h6><ul>\n<li>tick (int)：相应的刻度</li>\n<li>port_idx（int）：需要响应环境的端口&#x2F;代理的 ID</li>\n<li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li>\n<li>action_scope（操作范围）：操作范围有两个属性，load表示可以从船舶港口装载的最大数量，discharge表示从船舶到港口可以卸货的最大数量</li>\n<li>early_discharge（int）：当船上的可用容量不足以装载满载物时，船上的一些空容器将被提前卸货以释放空间，由于满载而提前卸货的空容器数量记录在该字段中</li>\n</ul>\n</li>\n<li><h6 id=\"行动-Action\"><a href=\"#行动-Action\" class=\"headerlink\" title=\"行动 Action\"></a>行动 Action</h6><ul>\n<li>none，这意味着什么都不做</li>\n<li>a valid instance，有效实例：</li>\n<li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li>\n<li>port_idx（int）：执行此操作的端口&#x2F;代理的 ID</li>\n<li>action_type（操作类型）：在此操作中是装载还是卸载空容器</li>\n<li>数量（int）：要装载&#x2F;卸载的空容器的（非负）数量</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><p><img src=\"/pictures/%E5%88%9D%E8%AF%86MARO/maro_overview.svg\"></p>\n<ul>\n<li><h4 id=\"上图是-MARO-框架图\"><a href=\"#上图是-MARO-框架图\" class=\"headerlink\" title=\"上图是 MARO 框架图\"></a>上图是 MARO 框架图</h4><ul>\n<li>Simulation toolkit：它提供了一些预定义的场景，以及用于构建新场景的可重用轮子</li>\n<li>RL toolkit：它为 RL 提供了全栈抽象，例如代理管理器、代理、RL 算法、学习器、参与者和各种塑造者</li>\n<li>Distributed toolkit：提供分布式通信组件、消息自动处理、集群配置、作业编排等用户定义功能的接口</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3>\n<div align=\"right\" >\nNEXT : <a href=\"/2022/11/04/MARO-Distibuted-toolkit/\" title=\"MARO Distibuted Toolkit\">MARO Distibuted toolkit</a>\n</div>\n</h3>\n"},{"title":"工作面试","date":"2022-10-26T06:11:21.000Z","_content":"#### 深信服 Go 后端笔试(实习) 2022.9.29\n- 牛客，要求录屏\n- Go 语言基本语法（非常细节）\n- 算法 编辑距离 \n\n\n#### 字节飞书搜索后端一面(实习) 2022.10.11\n- 飞书浏览器或者客户端面试\n- 自我介绍\n- 简历内容（项目过程里面遇到什么问题，如何解决)\n- 为什么选择字节\n- 为什么选择 Go 语言\n- Python 为什么比 Go 效率低下\n- Go 语言 sync 包的数据结构以及函数用过哪些\n- Go 语言逃逸分析\n- Go 内存管理\n- 什么是线程安全\n- redis 如何实现线程安全\n- 你写的 redis 是线程安全的吗\n- redis 实现原理\n- 算法 对称二叉树（感觉有点羞辱）\n- C++ 现在最新标准，有什么新特性\n\n#### 海能达 Go 后端笔试一面(实习) 2022.10.18\n- 腾讯会议\n- 自我介绍\n- Go 的切片数组区别\n- 为什么大三就来面试\n- 简历内容（项目过程里面遇到什么问题，如何解决)\n- 软件工程\n- 软件开发流程\n- 软件设计模式\n- 影响数据库查询速率的因素\n \n#### 腾讯游戏技术运营一面(实习) 2022.10.25\n- 腾讯会议面试，要求录屏\n- 先来做几条题目，很简单，主要看思路，但是基本语法不能错误，任意语言\n\n\t- 使用 js/php/python 自行实现函数方法 去掉一个数组的重复元素，例如：let arr = [1 ,1 ,2, 3, 3, 2, 1] (若是百亿数据，要求时间O(n)，空间O(1)，有什么思路)\n\t- 使用 js/php/python 实现一个函数，将字符串 “hello_world” 转换成 \"HelloWorld\" , \"hello_hang_zhou\" 转换成 “HelloHangZhou” (注意：通用性)\n\t- 使用 js/php/python 实现一个函数方法，参数为输入一个整数，然后输出这个数所有的因数以及总的个数，比如参数传 48 ，此时输出 1、2、3、4、6、8、12、16、24、48 共 10 个数字，比如参数传 21 ，此时输出 1、3、7、21 共 4 个数字\n\t- 使用 js/php/python 函数遍历以下 json 数据，输出指定格式结果（考虑 children 层次会无限嵌套）\t\n\t- 数据库操作，建一个表学生 student (id,name,sex,birth) (编号、姓名、性别、出生年月)\n\t\t- 写下建表语句：\n\t\t- student 表新增一个字段“班级编号”（class_no），写出对应的执行 sql 语句\n\t\t- 统计每个班级有多少个学生，根据班级编号统计，写下统计 sql\n- 自我介绍\n- 问简历的内容\n- redis 五种数据类型\n- 平时喜欢看什么书（简历有写）\n- bash 基本知识\n- 面向对象三大特性\n- 数据库三大范式深入理解\n- sql 备份主从一致\n\n\n","source":"_posts/工作面试.md","raw":"---\ntitle: 工作面试\ndate: 2022-10-26 14:11:21\ntags:\n\t- 工作面试\n---\n#### 深信服 Go 后端笔试(实习) 2022.9.29\n- 牛客，要求录屏\n- Go 语言基本语法（非常细节）\n- 算法 编辑距离 \n\n\n#### 字节飞书搜索后端一面(实习) 2022.10.11\n- 飞书浏览器或者客户端面试\n- 自我介绍\n- 简历内容（项目过程里面遇到什么问题，如何解决)\n- 为什么选择字节\n- 为什么选择 Go 语言\n- Python 为什么比 Go 效率低下\n- Go 语言 sync 包的数据结构以及函数用过哪些\n- Go 语言逃逸分析\n- Go 内存管理\n- 什么是线程安全\n- redis 如何实现线程安全\n- 你写的 redis 是线程安全的吗\n- redis 实现原理\n- 算法 对称二叉树（感觉有点羞辱）\n- C++ 现在最新标准，有什么新特性\n\n#### 海能达 Go 后端笔试一面(实习) 2022.10.18\n- 腾讯会议\n- 自我介绍\n- Go 的切片数组区别\n- 为什么大三就来面试\n- 简历内容（项目过程里面遇到什么问题，如何解决)\n- 软件工程\n- 软件开发流程\n- 软件设计模式\n- 影响数据库查询速率的因素\n \n#### 腾讯游戏技术运营一面(实习) 2022.10.25\n- 腾讯会议面试，要求录屏\n- 先来做几条题目，很简单，主要看思路，但是基本语法不能错误，任意语言\n\n\t- 使用 js/php/python 自行实现函数方法 去掉一个数组的重复元素，例如：let arr = [1 ,1 ,2, 3, 3, 2, 1] (若是百亿数据，要求时间O(n)，空间O(1)，有什么思路)\n\t- 使用 js/php/python 实现一个函数，将字符串 “hello_world” 转换成 \"HelloWorld\" , \"hello_hang_zhou\" 转换成 “HelloHangZhou” (注意：通用性)\n\t- 使用 js/php/python 实现一个函数方法，参数为输入一个整数，然后输出这个数所有的因数以及总的个数，比如参数传 48 ，此时输出 1、2、3、4、6、8、12、16、24、48 共 10 个数字，比如参数传 21 ，此时输出 1、3、7、21 共 4 个数字\n\t- 使用 js/php/python 函数遍历以下 json 数据，输出指定格式结果（考虑 children 层次会无限嵌套）\t\n\t- 数据库操作，建一个表学生 student (id,name,sex,birth) (编号、姓名、性别、出生年月)\n\t\t- 写下建表语句：\n\t\t- student 表新增一个字段“班级编号”（class_no），写出对应的执行 sql 语句\n\t\t- 统计每个班级有多少个学生，根据班级编号统计，写下统计 sql\n- 自我介绍\n- 问简历的内容\n- redis 五种数据类型\n- 平时喜欢看什么书（简历有写）\n- bash 基本知识\n- 面向对象三大特性\n- 数据库三大范式深入理解\n- sql 备份主从一致\n\n\n","slug":"工作面试","published":1,"updated":"2022-11-29T11:59:42.035Z","_id":"cla6l8qi6001mg7i59hay995w","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"深信服-Go-后端笔试-实习-2022-9-29\"><a href=\"#深信服-Go-后端笔试-实习-2022-9-29\" class=\"headerlink\" title=\"深信服 Go 后端笔试(实习) 2022.9.29\"></a>深信服 Go 后端笔试(实习) 2022.9.29</h4><ul>\n<li>牛客，要求录屏</li>\n<li>Go 语言基本语法（非常细节）</li>\n<li>算法 编辑距离</li>\n</ul>\n<h4 id=\"字节飞书搜索后端一面-实习-2022-10-11\"><a href=\"#字节飞书搜索后端一面-实习-2022-10-11\" class=\"headerlink\" title=\"字节飞书搜索后端一面(实习) 2022.10.11\"></a>字节飞书搜索后端一面(实习) 2022.10.11</h4><ul>\n<li>飞书浏览器或者客户端面试</li>\n<li>自我介绍</li>\n<li>简历内容（项目过程里面遇到什么问题，如何解决)</li>\n<li>为什么选择字节</li>\n<li>为什么选择 Go 语言</li>\n<li>Python 为什么比 Go 效率低下</li>\n<li>Go 语言 sync 包的数据结构以及函数用过哪些</li>\n<li>Go 语言逃逸分析</li>\n<li>Go 内存管理</li>\n<li>什么是线程安全</li>\n<li>redis 如何实现线程安全</li>\n<li>你写的 redis 是线程安全的吗</li>\n<li>redis 实现原理</li>\n<li>算法 对称二叉树（感觉有点羞辱）</li>\n<li>C++ 现在最新标准，有什么新特性</li>\n</ul>\n<h4 id=\"海能达-Go-后端笔试一面-实习-2022-10-18\"><a href=\"#海能达-Go-后端笔试一面-实习-2022-10-18\" class=\"headerlink\" title=\"海能达 Go 后端笔试一面(实习) 2022.10.18\"></a>海能达 Go 后端笔试一面(实习) 2022.10.18</h4><ul>\n<li>腾讯会议</li>\n<li>自我介绍</li>\n<li>Go 的切片数组区别</li>\n<li>为什么大三就来面试</li>\n<li>简历内容（项目过程里面遇到什么问题，如何解决)</li>\n<li>软件工程</li>\n<li>软件开发流程</li>\n<li>软件设计模式</li>\n<li>影响数据库查询速率的因素</li>\n</ul>\n<h4 id=\"腾讯游戏技术运营一面-实习-2022-10-25\"><a href=\"#腾讯游戏技术运营一面-实习-2022-10-25\" class=\"headerlink\" title=\"腾讯游戏技术运营一面(实习) 2022.10.25\"></a>腾讯游戏技术运营一面(实习) 2022.10.25</h4><ul>\n<li><p>腾讯会议面试，要求录屏</p>\n</li>\n<li><p>先来做几条题目，很简单，主要看思路，但是基本语法不能错误，任意语言</p>\n<ul>\n<li>使用 js&#x2F;php&#x2F;python 自行实现函数方法 去掉一个数组的重复元素，例如：let arr &#x3D; [1 ,1 ,2, 3, 3, 2, 1] (若是百亿数据，要求时间O(n)，空间O(1)，有什么思路)</li>\n<li>使用 js&#x2F;php&#x2F;python 实现一个函数，将字符串 “hello_world” 转换成 “HelloWorld” , “hello_hang_zhou” 转换成 “HelloHangZhou” (注意：通用性)</li>\n<li>使用 js&#x2F;php&#x2F;python 实现一个函数方法，参数为输入一个整数，然后输出这个数所有的因数以及总的个数，比如参数传 48 ，此时输出 1、2、3、4、6、8、12、16、24、48 共 10 个数字，比如参数传 21 ，此时输出 1、3、7、21 共 4 个数字</li>\n<li>使用 js&#x2F;php&#x2F;python 函数遍历以下 json 数据，输出指定格式结果（考虑 children 层次会无限嵌套）\t</li>\n<li>数据库操作，建一个表学生 student (id,name,sex,birth) (编号、姓名、性别、出生年月)<ul>\n<li>写下建表语句：</li>\n<li>student 表新增一个字段“班级编号”（class_no），写出对应的执行 sql 语句</li>\n<li>统计每个班级有多少个学生，根据班级编号统计，写下统计 sql</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>自我介绍</p>\n</li>\n<li><p>问简历的内容</p>\n</li>\n<li><p>redis 五种数据类型</p>\n</li>\n<li><p>平时喜欢看什么书（简历有写）</p>\n</li>\n<li><p>bash 基本知识</p>\n</li>\n<li><p>面向对象三大特性</p>\n</li>\n<li><p>数据库三大范式深入理解</p>\n</li>\n<li><p>sql 备份主从一致</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"深信服-Go-后端笔试-实习-2022-9-29\"><a href=\"#深信服-Go-后端笔试-实习-2022-9-29\" class=\"headerlink\" title=\"深信服 Go 后端笔试(实习) 2022.9.29\"></a>深信服 Go 后端笔试(实习) 2022.9.29</h4><ul>\n<li>牛客，要求录屏</li>\n<li>Go 语言基本语法（非常细节）</li>\n<li>算法 编辑距离</li>\n</ul>\n<h4 id=\"字节飞书搜索后端一面-实习-2022-10-11\"><a href=\"#字节飞书搜索后端一面-实习-2022-10-11\" class=\"headerlink\" title=\"字节飞书搜索后端一面(实习) 2022.10.11\"></a>字节飞书搜索后端一面(实习) 2022.10.11</h4><ul>\n<li>飞书浏览器或者客户端面试</li>\n<li>自我介绍</li>\n<li>简历内容（项目过程里面遇到什么问题，如何解决)</li>\n<li>为什么选择字节</li>\n<li>为什么选择 Go 语言</li>\n<li>Python 为什么比 Go 效率低下</li>\n<li>Go 语言 sync 包的数据结构以及函数用过哪些</li>\n<li>Go 语言逃逸分析</li>\n<li>Go 内存管理</li>\n<li>什么是线程安全</li>\n<li>redis 如何实现线程安全</li>\n<li>你写的 redis 是线程安全的吗</li>\n<li>redis 实现原理</li>\n<li>算法 对称二叉树（感觉有点羞辱）</li>\n<li>C++ 现在最新标准，有什么新特性</li>\n</ul>\n<h4 id=\"海能达-Go-后端笔试一面-实习-2022-10-18\"><a href=\"#海能达-Go-后端笔试一面-实习-2022-10-18\" class=\"headerlink\" title=\"海能达 Go 后端笔试一面(实习) 2022.10.18\"></a>海能达 Go 后端笔试一面(实习) 2022.10.18</h4><ul>\n<li>腾讯会议</li>\n<li>自我介绍</li>\n<li>Go 的切片数组区别</li>\n<li>为什么大三就来面试</li>\n<li>简历内容（项目过程里面遇到什么问题，如何解决)</li>\n<li>软件工程</li>\n<li>软件开发流程</li>\n<li>软件设计模式</li>\n<li>影响数据库查询速率的因素</li>\n</ul>\n<h4 id=\"腾讯游戏技术运营一面-实习-2022-10-25\"><a href=\"#腾讯游戏技术运营一面-实习-2022-10-25\" class=\"headerlink\" title=\"腾讯游戏技术运营一面(实习) 2022.10.25\"></a>腾讯游戏技术运营一面(实习) 2022.10.25</h4><ul>\n<li><p>腾讯会议面试，要求录屏</p>\n</li>\n<li><p>先来做几条题目，很简单，主要看思路，但是基本语法不能错误，任意语言</p>\n<ul>\n<li>使用 js&#x2F;php&#x2F;python 自行实现函数方法 去掉一个数组的重复元素，例如：let arr &#x3D; [1 ,1 ,2, 3, 3, 2, 1] (若是百亿数据，要求时间O(n)，空间O(1)，有什么思路)</li>\n<li>使用 js&#x2F;php&#x2F;python 实现一个函数，将字符串 “hello_world” 转换成 “HelloWorld” , “hello_hang_zhou” 转换成 “HelloHangZhou” (注意：通用性)</li>\n<li>使用 js&#x2F;php&#x2F;python 实现一个函数方法，参数为输入一个整数，然后输出这个数所有的因数以及总的个数，比如参数传 48 ，此时输出 1、2、3、4、6、8、12、16、24、48 共 10 个数字，比如参数传 21 ，此时输出 1、3、7、21 共 4 个数字</li>\n<li>使用 js&#x2F;php&#x2F;python 函数遍历以下 json 数据，输出指定格式结果（考虑 children 层次会无限嵌套）\t</li>\n<li>数据库操作，建一个表学生 student (id,name,sex,birth) (编号、姓名、性别、出生年月)<ul>\n<li>写下建表语句：</li>\n<li>student 表新增一个字段“班级编号”（class_no），写出对应的执行 sql 语句</li>\n<li>统计每个班级有多少个学生，根据班级编号统计，写下统计 sql</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>自我介绍</p>\n</li>\n<li><p>问简历的内容</p>\n</li>\n<li><p>redis 五种数据类型</p>\n</li>\n<li><p>平时喜欢看什么书（简历有写）</p>\n</li>\n<li><p>bash 基本知识</p>\n</li>\n<li><p>面向对象三大特性</p>\n</li>\n<li><p>数据库三大范式深入理解</p>\n</li>\n<li><p>sql 备份主从一致</p>\n</li>\n</ul>\n"},{"title":"Redis-基础-闲聊","date":"2022-11-07T09:36:41.000Z","_content":"\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天要不来聊聊Redis吧？\n</div></div><br/>\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n好\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、HBase也好，他们都是存储数据的地方\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为它们的设计理念的不同，我们会根据不同的应用场景使用不同的存储\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Redis一般我们会把它用作于缓存\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n当然啦，日常有的应用场景比较简单，用个HashMap也能解决很多的问题了，没必要上Redis\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就好比，有的单机限流可能应对某些场景就够用了，也没必要说一定要上分布式限流把系统搞得复杂\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你在项目里有用到Redis吗？怎么用的？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis肯定是用到的，我负责的项目几乎都会有Redis的踪影\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n举几个项目用的案例？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我这边负责消息管理平台，简单来说就是发消息的\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那发完消息肯定我们是得知道消息有没有下发成功的，是吧？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是我们系统有一套完整的链路追踪体系\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其中实时的数据我们就用Redis来进行存储，有实时肯定就会有离线的嘛（离线的数据我们是存储到Hive的）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对消息进行实时链路追踪，我这边就用了Redis好几种的数据结构\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别有Set、List和Hash\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我再稍微铺垫下链路追踪的背景吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要在消息管理平台发消息，首先得在后台新建一个「模板」，有模板自然会有一个模板ID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对模板ID进行扩展，比如说加上日期和固定的业务参数，形成的ID可以唯一标识某个模板的下发链路\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在系统上，我这边叫它为UMPID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在发送入口处会对所有需要下发的消息打上UMPID，然后在关键链路上打上对应的点位\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，你继续吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n接下来的工作就是清洗出统一的模型，然后根据不同维度进行处理啦。比如说：\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一天下发的所有模板有哪些，那只要我把清洗出来后数据的，将对应UMPID扔到了Set就好了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一个模板的消息下发的整体链路情况，那我以UMPID为Key，Value是Hash结构，Key是state，Value则是人数\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这里的state我们在下发的过程中打的关键点位，比如接收到消息打个51，消息被去重了打个61，消息成功下发了打个81…\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n以UMPID为Key，Hash结构的Key（State）进行不断的累加，就可以实现某一个模板的消息下发的整体链路情况\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某个用户当天下发的消息有哪些，以及这些消息的整体链路是如何\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这边我用的是List结构，Key是userId，Value则是UMPID+state(关键点位)+processTime（处理时间)\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说，就是通过Redis丰富的数据结构来实现对下发消息多个维度的统计\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的应用场景选择不同的数据结构，再等到透出做处理的时候，就变得十分简单了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n消息下发过程中去重或者一般正常的场景就直接Key-Value就能符合需求了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像bitmap、hyperloglogs、sortset、steam等等这些数据结构在我所负责的项目用得是真不多\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要是我有机会去到贵公司，贵公司有相关的应用场景，我相信我也很快就能掌握\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这些数据结构底层都由对应的object来支撑着，object记录对应的「编码」\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实就是会根据key-value存储的数量或者长度来使用选择不同的底层数据结构实现\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：ziplist压缩列表这个底层数据结构有可能上层的实现是list、hash和sortset\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nHash结构的底层数据结构可能是hash和ziplist\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在节省内存和性能的考量之中切换\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis还是有点屌的啊\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n就你上面那个实时链路场景，可以用其他的存储替代吗？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，理论上是可以的（或许可以尝试用HBase），但总体来说没这么好吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为Redis拥有丰富的数据结构，在透出的时候，处理会非常的方便\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果不用Redis的话，还得做很多解析的工作\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n并且，我那场景的并发还是相当大的（就一条消息发送，可能就产生10条记录）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n监控峰值命令处理数会去到20k+QPS，当然了，这场景我肯定用了Pipeline的（不然处理会慢很多）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n综合上面并发量和实时性以及数据结构，用Redis是一个比较好的选择\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….你觉得为什么Redis可以这么快？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，它是纯内存操作，内存本身就很快\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其次，它是单线程的，Redis服务器核心是基于非阻塞的IO多路复用机制，单线程避免了多线程的频繁上下文切换问题\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于这个单线程，其实官网也有过说明（：表示使用Redis往往的瓶颈在于内与和网络，而不在于CPU\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解\n</div></div><br/>\n","source":"_posts/Redis-基础-闲聊.md","raw":"---\ntitle: Redis-基础-闲聊\ndate: 2022-11-07 17:36:41\ntags:\n\t- 对话\n\t- Redis\n---\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天要不来聊聊Redis吧？\n</div></div><br/>\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n好\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、HBase也好，他们都是存储数据的地方\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为它们的设计理念的不同，我们会根据不同的应用场景使用不同的存储\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Redis一般我们会把它用作于缓存\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n当然啦，日常有的应用场景比较简单，用个HashMap也能解决很多的问题了，没必要上Redis\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就好比，有的单机限流可能应对某些场景就够用了，也没必要说一定要上分布式限流把系统搞得复杂\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你在项目里有用到Redis吗？怎么用的？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis肯定是用到的，我负责的项目几乎都会有Redis的踪影\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n举几个项目用的案例？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我这边负责消息管理平台，简单来说就是发消息的\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那发完消息肯定我们是得知道消息有没有下发成功的，是吧？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是我们系统有一套完整的链路追踪体系\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其中实时的数据我们就用Redis来进行存储，有实时肯定就会有离线的嘛（离线的数据我们是存储到Hive的）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对消息进行实时链路追踪，我这边就用了Redis好几种的数据结构\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别有Set、List和Hash\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我再稍微铺垫下链路追踪的背景吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要在消息管理平台发消息，首先得在后台新建一个「模板」，有模板自然会有一个模板ID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对模板ID进行扩展，比如说加上日期和固定的业务参数，形成的ID可以唯一标识某个模板的下发链路\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在系统上，我这边叫它为UMPID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在发送入口处会对所有需要下发的消息打上UMPID，然后在关键链路上打上对应的点位\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，你继续吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n接下来的工作就是清洗出统一的模型，然后根据不同维度进行处理啦。比如说：\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一天下发的所有模板有哪些，那只要我把清洗出来后数据的，将对应UMPID扔到了Set就好了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一个模板的消息下发的整体链路情况，那我以UMPID为Key，Value是Hash结构，Key是state，Value则是人数\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这里的state我们在下发的过程中打的关键点位，比如接收到消息打个51，消息被去重了打个61，消息成功下发了打个81…\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n以UMPID为Key，Hash结构的Key（State）进行不断的累加，就可以实现某一个模板的消息下发的整体链路情况\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某个用户当天下发的消息有哪些，以及这些消息的整体链路是如何\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这边我用的是List结构，Key是userId，Value则是UMPID+state(关键点位)+processTime（处理时间)\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说，就是通过Redis丰富的数据结构来实现对下发消息多个维度的统计\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的应用场景选择不同的数据结构，再等到透出做处理的时候，就变得十分简单了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n消息下发过程中去重或者一般正常的场景就直接Key-Value就能符合需求了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像bitmap、hyperloglogs、sortset、steam等等这些数据结构在我所负责的项目用得是真不多\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要是我有机会去到贵公司，贵公司有相关的应用场景，我相信我也很快就能掌握\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这些数据结构底层都由对应的object来支撑着，object记录对应的「编码」\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实就是会根据key-value存储的数量或者长度来使用选择不同的底层数据结构实现\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：ziplist压缩列表这个底层数据结构有可能上层的实现是list、hash和sortset\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nHash结构的底层数据结构可能是hash和ziplist\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在节省内存和性能的考量之中切换\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis还是有点屌的啊\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n就你上面那个实时链路场景，可以用其他的存储替代吗？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，理论上是可以的（或许可以尝试用HBase），但总体来说没这么好吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为Redis拥有丰富的数据结构，在透出的时候，处理会非常的方便\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果不用Redis的话，还得做很多解析的工作\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n并且，我那场景的并发还是相当大的（就一条消息发送，可能就产生10条记录）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n监控峰值命令处理数会去到20k+QPS，当然了，这场景我肯定用了Pipeline的（不然处理会慢很多）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n综合上面并发量和实时性以及数据结构，用Redis是一个比较好的选择\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….你觉得为什么Redis可以这么快？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，它是纯内存操作，内存本身就很快\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其次，它是单线程的，Redis服务器核心是基于非阻塞的IO多路复用机制，单线程避免了多线程的频繁上下文切换问题\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于这个单线程，其实官网也有过说明（：表示使用Redis往往的瓶颈在于内与和网络，而不在于CPU\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解\n</div></div><br/>\n","slug":"Redis-基础-闲聊","published":1,"updated":"2022-11-07T11:39:17.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6pnrq6000010i5840qazvq","content":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天要不来聊聊Redis吧？\n</div></div><br/>\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n好\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、HBase也好，他们都是存储数据的地方\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为它们的设计理念的不同，我们会根据不同的应用场景使用不同的存储\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Redis一般我们会把它用作于缓存\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n当然啦，日常有的应用场景比较简单，用个HashMap也能解决很多的问题了，没必要上Redis\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就好比，有的单机限流可能应对某些场景就够用了，也没必要说一定要上分布式限流把系统搞得复杂\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你在项目里有用到Redis吗？怎么用的？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis肯定是用到的，我负责的项目几乎都会有Redis的踪影\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n举几个项目用的案例？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我这边负责消息管理平台，简单来说就是发消息的\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那发完消息肯定我们是得知道消息有没有下发成功的，是吧？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是我们系统有一套完整的链路追踪体系\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其中实时的数据我们就用Redis来进行存储，有实时肯定就会有离线的嘛（离线的数据我们是存储到Hive的）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对消息进行实时链路追踪，我这边就用了Redis好几种的数据结构\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别有Set、List和Hash\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我再稍微铺垫下链路追踪的背景吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要在消息管理平台发消息，首先得在后台新建一个「模板」，有模板自然会有一个模板ID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对模板ID进行扩展，比如说加上日期和固定的业务参数，形成的ID可以唯一标识某个模板的下发链路\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在系统上，我这边叫它为UMPID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在发送入口处会对所有需要下发的消息打上UMPID，然后在关键链路上打上对应的点位\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，你继续吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n接下来的工作就是清洗出统一的模型，然后根据不同维度进行处理啦。比如说：\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一天下发的所有模板有哪些，那只要我把清洗出来后数据的，将对应UMPID扔到了Set就好了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一个模板的消息下发的整体链路情况，那我以UMPID为Key，Value是Hash结构，Key是state，Value则是人数\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这里的state我们在下发的过程中打的关键点位，比如接收到消息打个51，消息被去重了打个61，消息成功下发了打个81…\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n以UMPID为Key，Hash结构的Key（State）进行不断的累加，就可以实现某一个模板的消息下发的整体链路情况\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某个用户当天下发的消息有哪些，以及这些消息的整体链路是如何\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这边我用的是List结构，Key是userId，Value则是UMPID+state(关键点位)+processTime（处理时间)\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说，就是通过Redis丰富的数据结构来实现对下发消息多个维度的统计\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的应用场景选择不同的数据结构，再等到透出做处理的时候，就变得十分简单了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n消息下发过程中去重或者一般正常的场景就直接Key-Value就能符合需求了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像bitmap、hyperloglogs、sortset、steam等等这些数据结构在我所负责的项目用得是真不多\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要是我有机会去到贵公司，贵公司有相关的应用场景，我相信我也很快就能掌握\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这些数据结构底层都由对应的object来支撑着，object记录对应的「编码」\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实就是会根据key-value存储的数量或者长度来使用选择不同的底层数据结构实现\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：ziplist压缩列表这个底层数据结构有可能上层的实现是list、hash和sortset\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nHash结构的底层数据结构可能是hash和ziplist\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在节省内存和性能的考量之中切换\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis还是有点屌的啊\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n就你上面那个实时链路场景，可以用其他的存储替代吗？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，理论上是可以的（或许可以尝试用HBase），但总体来说没这么好吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为Redis拥有丰富的数据结构，在透出的时候，处理会非常的方便\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果不用Redis的话，还得做很多解析的工作\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n并且，我那场景的并发还是相当大的（就一条消息发送，可能就产生10条记录）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n监控峰值命令处理数会去到20k+QPS，当然了，这场景我肯定用了Pipeline的（不然处理会慢很多）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n综合上面并发量和实时性以及数据结构，用Redis是一个比较好的选择\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….你觉得为什么Redis可以这么快？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，它是纯内存操作，内存本身就很快\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其次，它是单线程的，Redis服务器核心是基于非阻塞的IO多路复用机制，单线程避免了多线程的频繁上下文切换问题\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于这个单线程，其实官网也有过说明（：表示使用Redis往往的瓶颈在于内与和网络，而不在于CPU\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解\n</div></div><br/>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n今天要不来聊聊Redis吧？\n</div></div><br/>\n\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n好\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、HBase也好，他们都是存储数据的地方\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为它们的设计理念的不同，我们会根据不同的应用场景使用不同的存储\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像Redis一般我们会把它用作于缓存\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n当然啦，日常有的应用场景比较简单，用个HashMap也能解决很多的问题了，没必要上Redis\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这就好比，有的单机限流可能应对某些场景就够用了，也没必要说一定要上分布式限流把系统搞得复杂\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n你在项目里有用到Redis吗？怎么用的？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis肯定是用到的，我负责的项目几乎都会有Redis的踪影\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n举几个项目用的案例？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我这边负责消息管理平台，简单来说就是发消息的\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n那发完消息肯定我们是得知道消息有没有下发成功的，是吧？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n于是我们系统有一套完整的链路追踪体系\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其中实时的数据我们就用Redis来进行存储，有实时肯定就会有离线的嘛（离线的数据我们是存储到Hive的）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对消息进行实时链路追踪，我这边就用了Redis好几种的数据结构\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n分别有Set、List和Hash\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我再稍微铺垫下链路追踪的背景吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要在消息管理平台发消息，首先得在后台新建一个「模板」，有模板自然会有一个模板ID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n对模板ID进行扩展，比如说加上日期和固定的业务参数，形成的ID可以唯一标识某个模板的下发链路\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在系统上，我这边叫它为UMPID\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在发送入口处会对所有需要下发的消息打上UMPID，然后在关键链路上打上对应的点位\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，你继续吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n接下来的工作就是清洗出统一的模型，然后根据不同维度进行处理啦。比如说：\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一天下发的所有模板有哪些，那只要我把清洗出来后数据的，将对应UMPID扔到了Set就好了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某一个模板的消息下发的整体链路情况，那我以UMPID为Key，Value是Hash结构，Key是state，Value则是人数\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这里的state我们在下发的过程中打的关键点位，比如接收到消息打个51，消息被去重了打个61，消息成功下发了打个81…\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n以UMPID为Key，Hash结构的Key（State）进行不断的累加，就可以实现某一个模板的消息下发的整体链路情况\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n我要看某个用户当天下发的消息有哪些，以及这些消息的整体链路是如何\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这边我用的是List结构，Key是userId，Value则是UMPID+state(关键点位)+processTime（处理时间)\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n简单来说，就是通过Redis丰富的数据结构来实现对下发消息多个维度的统计\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n不同的应用场景选择不同的数据结构，再等到透出做处理的时候，就变得十分简单了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n消息下发过程中去重或者一般正常的场景就直接Key-Value就能符合需求了\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n像bitmap、hyperloglogs、sortset、steam等等这些数据结构在我所负责的项目用得是真不多\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n要是我有机会去到贵公司，贵公司有相关的应用场景，我相信我也很快就能掌握\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg\"/>\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n这些数据结构底层都由对应的object来支撑着，object记录对应的「编码」\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其实就是会根据key-value存储的数量或者长度来使用选择不同的底层数据结构实现\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n比如说：ziplist压缩列表这个底层数据结构有可能上层的实现是list、hash和sortset\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nHash结构的底层数据结构可能是hash和ziplist\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n在节省内存和性能的考量之中切换\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\nRedis还是有点屌的啊\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n就你上面那个实时链路场景，可以用其他的存储替代吗？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n嗯，理论上是可以的（或许可以尝试用HBase），但总体来说没这么好吧\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n因为Redis拥有丰富的数据结构，在透出的时候，处理会非常的方便\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n如果不用Redis的话，还得做很多解析的工作\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n并且，我那场景的并发还是相当大的（就一条消息发送，可能就产生10条记录）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n监控峰值命令处理数会去到20k+QPS，当然了，这场景我肯定用了Pipeline的（不然处理会慢很多）\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n综合上面并发量和实时性以及数据结构，用Redis是一个比较好的选择\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n<img src=\"/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg\"/>\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n嗯….你觉得为什么Redis可以这么快？\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n首先，它是纯内存操作，内存本身就很快\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n其次，它是单线程的，Redis服务器核心是基于非阻塞的IO多路复用机制，单线程避免了多线程的频繁上下文切换问题\n</div></div><br/>\n\n<div align=\"right\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px\"></span>\n至于这个单线程，其实官网也有过说明（：表示使用Redis往往的瓶颈在于内与和网络，而不在于CPU\n</div></div><br/>\n\n<div align=\"left\"><div style=\"width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center\"><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;\"></span><span style=\"width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;\"></span>\n了解\n</div></div><br/>\n"},{"title":"Linux 命令行格式化磁盘（U盘)","date":"2022-11-17T08:27:52.000Z","_content":"\n##### 注意：以下操作都属于高危行为，请谨慎使用！\n\n- 在插入 U盘 之前，先查看有哪些磁盘\n\n    <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.36.19.png\"/>\n\n    - 可以看到加粗的有两行，第一行开头是 \"Disk\" ，第二行开头是 \"Device\"\n    - 整个输出只有一行加粗的 \"Disk\" ，表示目前只有一个硬盘\n    - 每一个加粗的 \"Device\" 都对应上一行的 \"Disk\"\n    - \"Device\" 里面的内容表示 \"Disk\" 里面的分区\n\n###### \n\n- 在插入 U盘 之后，再查看有哪些磁盘\n\n    <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.39.41.png\"/>\n    \n    - 发现多了一行加粗的 \"Disk\"\n    - 这个正是我们插入的 U盘\n    \n###### \n    \n- 卸载 U盘\n\n    ```\n    umount /dev/sda\n    ```\n    \n    - ##### /dev/后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\n\n###### \n    \n- 格式化 U盘 ，并且建立 vfat 文件系统\n\n    ```\n    mkfs.vfat -I /dev/sda\n    ```\n    \n    - ##### /dev/后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\n\n###### \n\n- 最后再 mount 上 U盘 ，或者把 U盘 拨了再插上，系统可能会自动 mount 上, 就可以使用 U盘 了\n\n- 异常处理\n\n    - 假设 U盘 信息如下\n    \n        ```\n        Disk /dev/sdb：7.5 GiB，8004304896 bytes，15633408 sectors\n        Units：sectors of / 1 * 512 = 512 bytes\n        Sector size(logical/physical)：512 bytes / 512 bytes\n        I/O size(mininum/optimal)：512 bytes / 512 bytes\n        Disklabel type：dos\n        Disk identifier：0x663eb4c4\n        \n        Device    boot      Start     End Sectors  Size Id Type\n        /dev/sdb1    *          0 3815135 3815136  1.8G  0 Empty\n        /dev/sdb2         3737268 3741939    4672  2.3M ef EFI (FAT-12/16/32)\n        ```\n        \n        - 如果 mkfs.vfat /dev/sdb 出现如下错误\n        \n            ```\n            mkfs.vfat 3.0.10 (12 Sep 2010)\n            mkfs.vfat: unable to open /dev/sdb\n            ```\n        \n        - 则需要先格式化 /dev/sdb1 ，即使用 mkfs.vfat /dev/sdb1 命令，将 /dev/sdb1 先格式化掉，然后再格式化 /dev/sdb\n        \n        - 如果出现如下错误\n        \n            ```\n            mkfs.vfat 3.0.10 (12 Sep 2010)\n            mkfs.vfat: Device partition expected, not making filesystem on entire device '/dev/sdb' (use -I to override)\n            ```\n            \n        - 系统提示需要使用 -I 参数来完成格式化：mkfs.vfat -I /dev/sdb, 这样就可以完全格式化的U盘\n","source":"_posts/Linux-命令行格式化磁盘（U盘.md","raw":"---\ntitle: Linux 命令行格式化磁盘（U盘)\ndate: 2022-11-17 16:27:52\ntags:\n    - Linux\n---\n\n##### 注意：以下操作都属于高危行为，请谨慎使用！\n\n- 在插入 U盘 之前，先查看有哪些磁盘\n\n    <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.36.19.png\"/>\n\n    - 可以看到加粗的有两行，第一行开头是 \"Disk\" ，第二行开头是 \"Device\"\n    - 整个输出只有一行加粗的 \"Disk\" ，表示目前只有一个硬盘\n    - 每一个加粗的 \"Device\" 都对应上一行的 \"Disk\"\n    - \"Device\" 里面的内容表示 \"Disk\" 里面的分区\n\n###### \n\n- 在插入 U盘 之后，再查看有哪些磁盘\n\n    <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.39.41.png\"/>\n    \n    - 发现多了一行加粗的 \"Disk\"\n    - 这个正是我们插入的 U盘\n    \n###### \n    \n- 卸载 U盘\n\n    ```\n    umount /dev/sda\n    ```\n    \n    - ##### /dev/后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\n\n###### \n    \n- 格式化 U盘 ，并且建立 vfat 文件系统\n\n    ```\n    mkfs.vfat -I /dev/sda\n    ```\n    \n    - ##### /dev/后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\n\n###### \n\n- 最后再 mount 上 U盘 ，或者把 U盘 拨了再插上，系统可能会自动 mount 上, 就可以使用 U盘 了\n\n- 异常处理\n\n    - 假设 U盘 信息如下\n    \n        ```\n        Disk /dev/sdb：7.5 GiB，8004304896 bytes，15633408 sectors\n        Units：sectors of / 1 * 512 = 512 bytes\n        Sector size(logical/physical)：512 bytes / 512 bytes\n        I/O size(mininum/optimal)：512 bytes / 512 bytes\n        Disklabel type：dos\n        Disk identifier：0x663eb4c4\n        \n        Device    boot      Start     End Sectors  Size Id Type\n        /dev/sdb1    *          0 3815135 3815136  1.8G  0 Empty\n        /dev/sdb2         3737268 3741939    4672  2.3M ef EFI (FAT-12/16/32)\n        ```\n        \n        - 如果 mkfs.vfat /dev/sdb 出现如下错误\n        \n            ```\n            mkfs.vfat 3.0.10 (12 Sep 2010)\n            mkfs.vfat: unable to open /dev/sdb\n            ```\n        \n        - 则需要先格式化 /dev/sdb1 ，即使用 mkfs.vfat /dev/sdb1 命令，将 /dev/sdb1 先格式化掉，然后再格式化 /dev/sdb\n        \n        - 如果出现如下错误\n        \n            ```\n            mkfs.vfat 3.0.10 (12 Sep 2010)\n            mkfs.vfat: Device partition expected, not making filesystem on entire device '/dev/sdb' (use -I to override)\n            ```\n            \n        - 系统提示需要使用 -I 参数来完成格式化：mkfs.vfat -I /dev/sdb, 这样就可以完全格式化的U盘\n","slug":"Linux-命令行格式化磁盘（U盘","published":1,"updated":"2022-11-17T09:11:53.454Z","_id":"clakumy350000mki55y3y6j1d","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"注意：以下操作都属于高危行为，请谨慎使用！\"><a href=\"#注意：以下操作都属于高危行为，请谨慎使用！\" class=\"headerlink\" title=\"注意：以下操作都属于高危行为，请谨慎使用！\"></a>注意：以下操作都属于高危行为，请谨慎使用！</h5><ul>\n<li><p>在插入 U盘 之前，先查看有哪些磁盘</p>\n  <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.36.19.png\"/>\n\n<ul>\n<li>可以看到加粗的有两行，第一行开头是 “Disk” ，第二行开头是 “Device”</li>\n<li>整个输出只有一行加粗的 “Disk” ，表示目前只有一个硬盘</li>\n<li>每一个加粗的 “Device” 都对应上一行的 “Disk”</li>\n<li>“Device” 里面的内容表示 “Disk” 里面的分区</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>在插入 U盘 之后，再查看有哪些磁盘</p>\n  <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.39.41.png\"/>\n  \n<ul>\n<li>发现多了一行加粗的 “Disk”</li>\n<li>这个正是我们插入的 U盘</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>卸载 U盘  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount /dev/sda</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\"><a href=\"#x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\" class=\"headerlink\" title=\"&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\"></a>&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！</h5></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>格式化 U盘 ，并且建立 vfat 文件系统  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat -I /dev/sda</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！-1\"><a href=\"#x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！-1\" class=\"headerlink\" title=\"&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\"></a>&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！</h5></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>最后再 mount 上 U盘 ，或者把 U盘 拨了再插上，系统可能会自动 mount 上, 就可以使用 U盘 了</p>\n</li>\n<li><p>异常处理</p>\n<ul>\n<li>假设 U盘 信息如下  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Disk /dev/sdb：7.5 GiB，8004304896 bytes，15633408 sectors</span><br><span class=\"line\">Units：sectors of / 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size(logical/physical)：512 bytes / 512 bytes</span><br><span class=\"line\">I/O size(mininum/optimal)：512 bytes / 512 bytes</span><br><span class=\"line\">Disklabel type：dos</span><br><span class=\"line\">Disk identifier：0x663eb4c4</span><br><span class=\"line\"></span><br><span class=\"line\">Device    boot      Start     End Sectors  Size Id Type</span><br><span class=\"line\">/dev/sdb1    *          0 3815135 3815136  1.8G  0 Empty</span><br><span class=\"line\">/dev/sdb2         3737268 3741939    4672  2.3M ef EFI (FAT-12/16/32)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>如果 mkfs.vfat &#x2F;dev&#x2F;sdb 出现如下错误</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat 3.0.10 (12 Sep 2010)</span><br><span class=\"line\">mkfs.vfat: unable to open /dev/sdb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>则需要先格式化 &#x2F;dev&#x2F;sdb1 ，即使用 mkfs.vfat &#x2F;dev&#x2F;sdb1 命令，将 &#x2F;dev&#x2F;sdb1 先格式化掉，然后再格式化 &#x2F;dev&#x2F;sdb</p>\n</li>\n<li><p>如果出现如下错误</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat 3.0.10 (12 Sep 2010)</span><br><span class=\"line\">mkfs.vfat: Device partition expected, not making filesystem on entire device &#x27;/dev/sdb&#x27; (use -I to override)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>系统提示需要使用 -I 参数来完成格式化：mkfs.vfat -I &#x2F;dev&#x2F;sdb, 这样就可以完全格式化的U盘</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"注意：以下操作都属于高危行为，请谨慎使用！\"><a href=\"#注意：以下操作都属于高危行为，请谨慎使用！\" class=\"headerlink\" title=\"注意：以下操作都属于高危行为，请谨慎使用！\"></a>注意：以下操作都属于高危行为，请谨慎使用！</h5><ul>\n<li><p>在插入 U盘 之前，先查看有哪些磁盘</p>\n  <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.36.19.png\"/>\n\n<ul>\n<li>可以看到加粗的有两行，第一行开头是 “Disk” ，第二行开头是 “Device”</li>\n<li>整个输出只有一行加粗的 “Disk” ，表示目前只有一个硬盘</li>\n<li>每一个加粗的 “Device” 都对应上一行的 “Disk”</li>\n<li>“Device” 里面的内容表示 “Disk” 里面的分区</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>在插入 U盘 之后，再查看有哪些磁盘</p>\n  <img src=\"../pictures/Linux 命令行格式化/2022.11.17.16.39.41.png\"/>\n  \n<ul>\n<li>发现多了一行加粗的 “Disk”</li>\n<li>这个正是我们插入的 U盘</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>卸载 U盘  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount /dev/sda</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\"><a href=\"#x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\" class=\"headerlink\" title=\"&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\"></a>&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！</h5></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>格式化 U盘 ，并且建立 vfat 文件系统  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat -I /dev/sda</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！-1\"><a href=\"#x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！-1\" class=\"headerlink\" title=\"&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！\"></a>&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！</h5></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>最后再 mount 上 U盘 ，或者把 U盘 拨了再插上，系统可能会自动 mount 上, 就可以使用 U盘 了</p>\n</li>\n<li><p>异常处理</p>\n<ul>\n<li>假设 U盘 信息如下  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Disk /dev/sdb：7.5 GiB，8004304896 bytes，15633408 sectors</span><br><span class=\"line\">Units：sectors of / 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size(logical/physical)：512 bytes / 512 bytes</span><br><span class=\"line\">I/O size(mininum/optimal)：512 bytes / 512 bytes</span><br><span class=\"line\">Disklabel type：dos</span><br><span class=\"line\">Disk identifier：0x663eb4c4</span><br><span class=\"line\"></span><br><span class=\"line\">Device    boot      Start     End Sectors  Size Id Type</span><br><span class=\"line\">/dev/sdb1    *          0 3815135 3815136  1.8G  0 Empty</span><br><span class=\"line\">/dev/sdb2         3737268 3741939    4672  2.3M ef EFI (FAT-12/16/32)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>如果 mkfs.vfat &#x2F;dev&#x2F;sdb 出现如下错误</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat 3.0.10 (12 Sep 2010)</span><br><span class=\"line\">mkfs.vfat: unable to open /dev/sdb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>则需要先格式化 &#x2F;dev&#x2F;sdb1 ，即使用 mkfs.vfat &#x2F;dev&#x2F;sdb1 命令，将 &#x2F;dev&#x2F;sdb1 先格式化掉，然后再格式化 &#x2F;dev&#x2F;sdb</p>\n</li>\n<li><p>如果出现如下错误</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.vfat 3.0.10 (12 Sep 2010)</span><br><span class=\"line\">mkfs.vfat: Device partition expected, not making filesystem on entire device &#x27;/dev/sdb&#x27; (use -I to override)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>系统提示需要使用 -I 参数来完成格式化：mkfs.vfat -I &#x2F;dev&#x2F;sdb, 这样就可以完全格式化的U盘</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Vim Diff","date":"2022-11-07T11:50:01.000Z","_content":"\nVIM(NEOVIM) 比较不同\n```\nvim -d file_1 file_2\n```\n","source":"_posts/vim-diff.md","raw":"---\ntitle: Vim Diff\ndate: 2022-11-07 19:50:01\ntags:\n\t- vim\n---\n\nVIM(NEOVIM) 比较不同\n```\nvim -d file_1 file_2\n```\n","slug":"vim-diff","published":1,"updated":"2022-11-07T11:51:13.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clakumy3b0001mki5c9nv3ogj","content":"<p>VIM(NEOVIM) 比较不同</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim -d file_1 file_2</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>VIM(NEOVIM) 比较不同</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim -d file_1 file_2</span><br></pre></td></tr></table></figure>\n"},{"title":"Coc-pyright 找不到相关的语法分析","date":"2022-11-17T11:09:23.000Z","_content":"\n- Coc-pright 是静态语法分析器，而 python 有一些包是没有经过预编译的，比如说 opencv ，所以就会有找不到相关包的语法分析的情况发生\n\n- 首先\n\n    ```\n    pip install mypy    \n    ```\n\n- 生成 cv2 的 pyi 文件\n\n    ```\n    stubgen -m cv2 -o {cv2-package-folder}\n    ```\n    \n    - 在我的环境下 {cv2-package-folder} 是\n    ```\n    /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2\n    ```\n    - 执行命令之后会在目录下生成 cv2.pyi 文件\n    \n###### \n\n- 将 cv2.pyi 移动到 coc-pyright 的解析目录，成功解析\n\n    ```\n    cp /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2/cv2.pyi  /home/asleep/.config/coc/extensions/node_modules/coc-pyright/node_modules/pyright/dist/typeshed-fallback/stdlib   \n    ```\n    \n\n\n","source":"_posts/coc-pyright-找不到相关的语法分析.md","raw":"---\ntitle: Coc-pyright 找不到相关的语法分析\ndate: 2022-11-17 19:09:23\ntags:\n    - VIM\n    - Python\n---\n\n- Coc-pright 是静态语法分析器，而 python 有一些包是没有经过预编译的，比如说 opencv ，所以就会有找不到相关包的语法分析的情况发生\n\n- 首先\n\n    ```\n    pip install mypy    \n    ```\n\n- 生成 cv2 的 pyi 文件\n\n    ```\n    stubgen -m cv2 -o {cv2-package-folder}\n    ```\n    \n    - 在我的环境下 {cv2-package-folder} 是\n    ```\n    /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2\n    ```\n    - 执行命令之后会在目录下生成 cv2.pyi 文件\n    \n###### \n\n- 将 cv2.pyi 移动到 coc-pyright 的解析目录，成功解析\n\n    ```\n    cp /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2/cv2.pyi  /home/asleep/.config/coc/extensions/node_modules/coc-pyright/node_modules/pyright/dist/typeshed-fallback/stdlib   \n    ```\n    \n\n\n","slug":"coc-pyright-找不到相关的语法分析","published":1,"updated":"2022-11-17T11:30:30.583Z","_id":"clakzlxp40000wei5env494jq","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>Coc-pright 是静态语法分析器，而 python 有一些包是没有经过预编译的，比如说 opencv ，所以就会有找不到相关包的语法分析的情况发生</p>\n</li>\n<li><p>首先</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mypy    </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成 cv2 的 pyi 文件</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stubgen -m cv2 -o &#123;cv2-package-folder&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在我的环境下 {cv2-package-folder} 是  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2</span><br></pre></td></tr></table></figure></li>\n<li>执行命令之后会在目录下生成 cv2.pyi 文件</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>将 cv2.pyi 移动到 coc-pyright 的解析目录，成功解析</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2/cv2.pyi  /home/asleep/.config/coc/extensions/node_modules/coc-pyright/node_modules/pyright/dist/typeshed-fallback/stdlib   </span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>Coc-pright 是静态语法分析器，而 python 有一些包是没有经过预编译的，比如说 opencv ，所以就会有找不到相关包的语法分析的情况发生</p>\n</li>\n<li><p>首先</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mypy    </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成 cv2 的 pyi 文件</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stubgen -m cv2 -o &#123;cv2-package-folder&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在我的环境下 {cv2-package-folder} 是  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2</span><br></pre></td></tr></table></figure></li>\n<li>执行命令之后会在目录下生成 cv2.pyi 文件</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>将 cv2.pyi 移动到 coc-pyright 的解析目录，成功解析</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2/cv2.pyi  /home/asleep/.config/coc/extensions/node_modules/coc-pyright/node_modules/pyright/dist/typeshed-fallback/stdlib   </span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Linux Host 与 KVM Windows Guest 共享文件","date":"2022-11-18T11:24:07.000Z","_content":"\n- #### 将文件从 Linux Host 传到 KVM Windows Guest\n\n    - 在 Windows Guest 里面下载安装如下地址的软件\n    \n    ```\n    https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe\n    ```\n    \n    - 重启 Windows Guest\n    - 发现可以把 Linux 文件拖拽到 Windwos 里面，可是无法反向拖拽\n    \n###### \n\n- #### 将文件从 KVM Windows Guest 传到 Linux Host\n\n    - ##### 在 Windows Guest 里面设置共享文件夹\n    \n        - 新建文件夹（此处在 C盘 根目录下）\n        <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png\"/>\n        \n        - 设置文件夹共享\n        \n            - 右键 -> 属性 -> 共享\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/>\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png\"/>\n                \n                \n            ######  \n            - 选择 Everyone -> 添加\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png\"/>\n                \n            ###### \n            - 选择权限\n                \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png\"/>\n            ###### \n            - Share\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png\"/>\n            ######  \n            - 留意这里，图片里面的 \"DESKTOP-5J93LDB\" 在 Linux mount 操作时将会被换为 Windows 的 IP 地址\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png\"/>\n            ###### \n            - 点击 Done 完成共享设置\n            \n        ###### \n        \n        - 设置外部可以访问 Windows\n            \n            - 回到 Share 的 share 属性页面\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/>\n            ######  \n            - 点击 Network and Sharing Center\n                \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png\"/>\n            ######  \n            - 改变设置如下\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png\"/>\n            \n            ###### \n            - 保存设置完成 Windows 端配置\n            \n    ###### \n    - ##### Linux Host 挂载\n    \n        - 在 Linux Host 下将 Windows Guset 的共享目录挂载到 Linux Host 的某个文件夹下面，然后 cd 到这个文件夹下面就可以访问 share 目录了\n        \n            <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png\"/>\n            \n            ```\n            sudo mount -t cifs //192.168.122.8/share /home/asleep/share/\n            ```\n            \n            - \"-t cifs\" 指定要挂载外部文件系统\n            \n            ###### \n        - 查看 Linux Host 下的文件目录内容，发现已经可以访问到 Windows Guset 的共享目录\n        \n            <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png\"/>\n            \n            ###### \n        - 要卸载共享，也就是取消挂载，执行如下命令\n        \n            ```\n            sudo umount -t cifs //192.168.122.8/share\n            ```\n\n","source":"_posts/Linux-与-KVM-Windows-guest-共享文件.md","raw":"---\ntitle: Linux Host 与 KVM Windows Guest 共享文件\ndate: 2022-11-18 19:24:07\ntags:\n    - Linux\n---\n\n- #### 将文件从 Linux Host 传到 KVM Windows Guest\n\n    - 在 Windows Guest 里面下载安装如下地址的软件\n    \n    ```\n    https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe\n    ```\n    \n    - 重启 Windows Guest\n    - 发现可以把 Linux 文件拖拽到 Windwos 里面，可是无法反向拖拽\n    \n###### \n\n- #### 将文件从 KVM Windows Guest 传到 Linux Host\n\n    - ##### 在 Windows Guest 里面设置共享文件夹\n    \n        - 新建文件夹（此处在 C盘 根目录下）\n        <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png\"/>\n        \n        - 设置文件夹共享\n        \n            - 右键 -> 属性 -> 共享\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/>\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png\"/>\n                \n                \n            ######  \n            - 选择 Everyone -> 添加\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png\"/>\n                \n            ###### \n            - 选择权限\n                \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png\"/>\n            ###### \n            - Share\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png\"/>\n            ######  \n            - 留意这里，图片里面的 \"DESKTOP-5J93LDB\" 在 Linux mount 操作时将会被换为 Windows 的 IP 地址\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png\"/>\n            ###### \n            - 点击 Done 完成共享设置\n            \n        ###### \n        \n        - 设置外部可以访问 Windows\n            \n            - 回到 Share 的 share 属性页面\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/>\n            ######  \n            - 点击 Network and Sharing Center\n                \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png\"/>\n            ######  \n            - 改变设置如下\n            \n                <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png\"/>\n            \n            ###### \n            - 保存设置完成 Windows 端配置\n            \n    ###### \n    - ##### Linux Host 挂载\n    \n        - 在 Linux Host 下将 Windows Guset 的共享目录挂载到 Linux Host 的某个文件夹下面，然后 cd 到这个文件夹下面就可以访问 share 目录了\n        \n            <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png\"/>\n            \n            ```\n            sudo mount -t cifs //192.168.122.8/share /home/asleep/share/\n            ```\n            \n            - \"-t cifs\" 指定要挂载外部文件系统\n            \n            ###### \n        - 查看 Linux Host 下的文件目录内容，发现已经可以访问到 Windows Guset 的共享目录\n        \n            <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png\"/>\n            \n            ###### \n        - 要卸载共享，也就是取消挂载，执行如下命令\n        \n            ```\n            sudo umount -t cifs //192.168.122.8/share\n            ```\n\n","slug":"Linux-与-KVM-Windows-guest-共享文件","published":1,"updated":"2022-11-18T12:31:30.025Z","_id":"clamha5bb0000g6i52d8y8xx5","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"将文件从-Linux-Host-传到-KVM-Windows-Guest\"><a href=\"#将文件从-Linux-Host-传到-KVM-Windows-Guest\" class=\"headerlink\" title=\"将文件从 Linux Host 传到 KVM Windows Guest\"></a>将文件从 Linux Host 传到 KVM Windows Guest</h4><ul>\n<li>在 Windows Guest 里面下载安装如下地址的软件</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启 Windows Guest</li>\n<li>发现可以把 Linux 文件拖拽到 Windwos 里面，可是无法反向拖拽</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h4 id=\"将文件从-KVM-Windows-Guest-传到-Linux-Host\"><a href=\"#将文件从-KVM-Windows-Guest-传到-Linux-Host\" class=\"headerlink\" title=\"将文件从 KVM Windows Guest 传到 Linux Host\"></a>将文件从 KVM Windows Guest 传到 Linux Host</h4><ul>\n<li><h5 id=\"在-Windows-Guest-里面设置共享文件夹\"><a href=\"#在-Windows-Guest-里面设置共享文件夹\" class=\"headerlink\" title=\"在 Windows Guest 里面设置共享文件夹\"></a>在 Windows Guest 里面设置共享文件夹</h5><ul>\n<li><p>新建文件夹（此处在 C盘 根目录下）</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png\"/>\n</li>\n<li><p>设置文件夹共享</p>\n<ul>\n<li><p>右键 -&gt; 属性 -&gt; 共享</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/>\n\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png\"/></li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>选择 Everyone -&gt; 添加</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png\"/></li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>选择权限</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png\"/></li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>Share</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png\"/></li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>留意这里，图片里面的 “DESKTOP-5J93LDB” 在 Linux mount 操作时将会被换为 Windows 的 IP 地址</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png\"/></li>\n</ul>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>点击 Done 完成共享设置</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>设置外部可以访问 Windows</p>\n<ul>\n<li><p>回到 Share 的 share 属性页面</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/></li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>点击 Network and Sharing Center</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png\"/></li>\n</ul>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>改变设置如下</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png\"/></li>\n</ul>\n<h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>保存设置完成 Windows 端配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Linux-Host-挂载\"><a href=\"#Linux-Host-挂载\" class=\"headerlink\" title=\"Linux Host 挂载\"></a>Linux Host 挂载</h5><ul>\n<li><p>在 Linux Host 下将 Windows Guset 的共享目录挂载到 Linux Host 的某个文件夹下面，然后 cd 到这个文件夹下面就可以访问 share 目录了</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png\"/>\n  \n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs //192.168.122.8/share /home/asleep/share/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>“-t cifs” 指定要挂载外部文件系统</li>\n</ul>\n<h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6></li>\n<li><p>查看 Linux Host 下的文件目录内容，发现已经可以访问到 Windows Guset 的共享目录</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png\"/>\n  \n<h6 id=\"-12\"><a href=\"#-12\" class=\"headerlink\" title=\"\"></a></h6></li>\n<li><p>要卸载共享，也就是取消挂载，执行如下命令</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount -t cifs //192.168.122.8/share</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"将文件从-Linux-Host-传到-KVM-Windows-Guest\"><a href=\"#将文件从-Linux-Host-传到-KVM-Windows-Guest\" class=\"headerlink\" title=\"将文件从 Linux Host 传到 KVM Windows Guest\"></a>将文件从 Linux Host 传到 KVM Windows Guest</h4><ul>\n<li>在 Windows Guest 里面下载安装如下地址的软件</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启 Windows Guest</li>\n<li>发现可以把 Linux 文件拖拽到 Windwos 里面，可是无法反向拖拽</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h4 id=\"将文件从-KVM-Windows-Guest-传到-Linux-Host\"><a href=\"#将文件从-KVM-Windows-Guest-传到-Linux-Host\" class=\"headerlink\" title=\"将文件从 KVM Windows Guest 传到 Linux Host\"></a>将文件从 KVM Windows Guest 传到 Linux Host</h4><ul>\n<li><h5 id=\"在-Windows-Guest-里面设置共享文件夹\"><a href=\"#在-Windows-Guest-里面设置共享文件夹\" class=\"headerlink\" title=\"在 Windows Guest 里面设置共享文件夹\"></a>在 Windows Guest 里面设置共享文件夹</h5><ul>\n<li><p>新建文件夹（此处在 C盘 根目录下）</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png\"/>\n</li>\n<li><p>设置文件夹共享</p>\n<ul>\n<li><p>右键 -&gt; 属性 -&gt; 共享</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/>\n\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png\"/></li>\n</ul>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>选择 Everyone -&gt; 添加</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png\"/></li>\n</ul>\n<h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>选择权限</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png\"/></li>\n</ul>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>Share</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png\"/></li>\n</ul>\n<h6 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>留意这里，图片里面的 “DESKTOP-5J93LDB” 在 Linux mount 操作时将会被换为 Windows 的 IP 地址</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png\"/></li>\n</ul>\n<h6 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>点击 Done 完成共享设置</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>设置外部可以访问 Windows</p>\n<ul>\n<li><p>回到 Share 的 share 属性页面</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png\"/></li>\n</ul>\n<h6 id=\"-7\"><a href=\"#-7\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>点击 Network and Sharing Center</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png\"/></li>\n</ul>\n<h6 id=\"-8\"><a href=\"#-8\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><p>改变设置如下</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png\"/></li>\n</ul>\n<h6 id=\"-9\"><a href=\"#-9\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li>保存设置完成 Windows 端配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"-10\"><a href=\"#-10\" class=\"headerlink\" title=\"\"></a></h6><ul>\n<li><h5 id=\"Linux-Host-挂载\"><a href=\"#Linux-Host-挂载\" class=\"headerlink\" title=\"Linux Host 挂载\"></a>Linux Host 挂载</h5><ul>\n<li><p>在 Linux Host 下将 Windows Guset 的共享目录挂载到 Linux Host 的某个文件夹下面，然后 cd 到这个文件夹下面就可以访问 share 目录了</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png\"/>\n  \n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs //192.168.122.8/share /home/asleep/share/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>“-t cifs” 指定要挂载外部文件系统</li>\n</ul>\n<h6 id=\"-11\"><a href=\"#-11\" class=\"headerlink\" title=\"\"></a></h6></li>\n<li><p>查看 Linux Host 下的文件目录内容，发现已经可以访问到 Windows Guset 的共享目录</p>\n  <img src=\"../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png\"/>\n  \n<h6 id=\"-12\"><a href=\"#-12\" class=\"headerlink\" title=\"\"></a></h6></li>\n<li><p>要卸载共享，也就是取消挂载，执行如下命令</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount -t cifs //192.168.122.8/share</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hexo Inner Link","date":"2022-11-23T12:05:16.000Z","_content":"\n- Markdown 编写的 Hexo 博客文章内部跳转，比如说想在文章1中的某个段落内部超链接跳转到文章2\n\n    ```markdown\n    {% post_link 文章文件名(不要后缀) 文章标题(可选) %}\n    ```\n- 如文章文件名为 Hello-World.md\n\n    ```markdown\n    {% post_link Hello-World %}\n    {% post_link Hello-World 你好世界 %}\n    ```\n\n- 如果想做到这样子的效果\n\n    <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png\"/>\n    \n    ```html\n    <br/>\n    <h3 style=\"display:flex\">\n    <span align=\"left\" style=\"width:50%\">\n    PRE : {% post_link 初识-MARO 初识 MARO %}\n    </span>\n    \n    <span align=\"right\" style=\"width:50%\">\n    NEXT : {% post_link MARO-VM-调度 MARO VM 调度%}\n    </span>\n    </h3>\n    ```\n\n- 单纯的右边\n    <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png\"/>\n    ```html\n    <br/>\n    <h3>\n    <div align=\"right\" >\n    NEXT : {% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %}\n    </div>\n    </h3>\n    ```\n    \n\n","source":"_posts/Hexo-Inner-Link.md","raw":"---\ntitle: Hexo Inner Link\ndate: 2022-11-23 20:05:16\ntags:\n    - Hexo\n---\n\n- Markdown 编写的 Hexo 博客文章内部跳转，比如说想在文章1中的某个段落内部超链接跳转到文章2\n\n    ```markdown\n    {% post_link 文章文件名(不要后缀) 文章标题(可选) %}\n    ```\n- 如文章文件名为 Hello-World.md\n\n    ```markdown\n    {% post_link Hello-World %}\n    {% post_link Hello-World 你好世界 %}\n    ```\n\n- 如果想做到这样子的效果\n\n    <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png\"/>\n    \n    ```html\n    <br/>\n    <h3 style=\"display:flex\">\n    <span align=\"left\" style=\"width:50%\">\n    PRE : {% post_link 初识-MARO 初识 MARO %}\n    </span>\n    \n    <span align=\"right\" style=\"width:50%\">\n    NEXT : {% post_link MARO-VM-调度 MARO VM 调度%}\n    </span>\n    </h3>\n    ```\n\n- 单纯的右边\n    <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png\"/>\n    ```html\n    <br/>\n    <h3>\n    <div align=\"right\" >\n    NEXT : {% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %}\n    </div>\n    </h3>\n    ```\n    \n\n","slug":"Hexo-Inner-Link","published":1,"updated":"2022-11-23T12:21:04.105Z","_id":"clatlzrno00001ai5a5uag1om","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>Markdown 编写的 Hexo 博客文章内部跳转，比如说想在文章1中的某个段落内部超链接跳转到文章2</p>\n  <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post<span class=\"emphasis\">_link 文章文件名(不要后缀) 文章标题(可选) %&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如文章文件名为 Hello-World.md</p>\n  <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post<span class=\"emphasis\">_link Hello-World %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% post_</span>link Hello-World 你好世界 %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果想做到这样子的效果</p>\n  <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png\"/>\n  \n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:flex&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span></span><br><span class=\"line\">PRE : &#123;% post_link 初识-MARO 初识 MARO %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span></span><br><span class=\"line\">NEXT : &#123;% post_link MARO-VM-调度 MARO VM 调度%&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单纯的右边</p>\n  <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png\"/>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span> &gt;</span></span><br><span class=\"line\">NEXT : &#123;% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>Markdown 编写的 Hexo 博客文章内部跳转，比如说想在文章1中的某个段落内部超链接跳转到文章2</p>\n  <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post<span class=\"emphasis\">_link 文章文件名(不要后缀) 文章标题(可选) %&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如文章文件名为 Hello-World.md</p>\n  <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post<span class=\"emphasis\">_link Hello-World %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% post_</span>link Hello-World 你好世界 %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果想做到这样子的效果</p>\n  <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png\"/>\n  \n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:flex&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span></span><br><span class=\"line\">PRE : &#123;% post_link 初识-MARO 初识 MARO %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span></span><br><span class=\"line\">NEXT : &#123;% post_link MARO-VM-调度 MARO VM 调度%&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单纯的右边</p>\n  <img src=\"/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png\"/>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span> &gt;</span></span><br><span class=\"line\">NEXT : &#123;% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cla6l8qho0004g7i5986qhm89","category_id":"cla6l8qhp0006g7i5eglxfypt","_id":"cla6l8qhu000hg7i56s8hf92j"},{"post_id":"cla6l8qho0005g7i54ey869p7","category_id":"cla6l8qhp0006g7i5eglxfypt","_id":"cla6l8qhw000mg7i57t7i32vg"}],"PostTag":[{"post_id":"cla6l8qho0005g7i54ey869p7","tag_id":"cla6l8qhn0003g7i50q84d7wn","_id":"cla6l8qhr0009g7i5ay9eezez"},{"post_id":"cla6l8qhj0001g7i50zjig03m","tag_id":"cla6l8qhn0003g7i50q84d7wn","_id":"cla6l8qhs000bg7i5fchzbl61"},{"post_id":"cla6l8qhl0002g7i5hdfmayyf","tag_id":"cla6l8qhn0003g7i50q84d7wn","_id":"cla6l8qhv000kg7i5dd500511"},{"post_id":"cla6l8qhl0002g7i5hdfmayyf","tag_id":"cla6l8qht000eg7i5ez2pfg7w","_id":"cla6l8qhw000ng7i57ynd15wt"},{"post_id":"cla6l8qho0004g7i5986qhm89","tag_id":"cla6l8qhn0003g7i50q84d7wn","_id":"cla6l8qhx000qg7i55rb6bzhc"},{"post_id":"cla6l8qhp0007g7i5glb42u93","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qhy000ug7i5deq03pz2"},{"post_id":"cla6l8qhr000ag7i593br1zi3","tag_id":"cla6l8qhx000sg7i5bfs50th0","_id":"cla6l8qhz000yg7i5d64aheq2"},{"post_id":"cla6l8qhy000vg7i52wzn2j40","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qi00010g7i5e3rzep72"},{"post_id":"cla6l8qhs000cg7i51dvq35rk","tag_id":"cla6l8qhx000sg7i5bfs50th0","_id":"cla6l8qi00013g7i5cy9offy7"},{"post_id":"cla6l8qht000fg7i52lkx3374","tag_id":"cla6l8qi00011g7i55pb6ff08","_id":"cla6l8qi20017g7i5dte43t2l"},{"post_id":"cla6l8qhu000gg7i57lno52h3","tag_id":"cla6l8qi10016g7i5cys0cntd","_id":"cla6l8qi5001ig7i56goi4cb4"},{"post_id":"cla6l8qhu000gg7i57lno52h3","tag_id":"cla6l8qi2001ag7i57p0341nr","_id":"cla6l8qi6001kg7i575jpbspn"},{"post_id":"cla6l8qhu000gg7i57lno52h3","tag_id":"cla6l8qi3001dg7i53riyboo0","_id":"cla6l8qi6001ng7i5gbmsdtmz"},{"post_id":"cla6l8qi5001jg7i561mf870i","tag_id":"cla6l8qhx000sg7i5bfs50th0","_id":"cla6l8qi6001og7i59v0e6ha4"},{"post_id":"cla6l8qhv000jg7i5gb94fqno","tag_id":"cla6l8qi10016g7i5cys0cntd","_id":"cla6l8qi7001rg7i516gl3k4q"},{"post_id":"cla6l8qhv000jg7i5gb94fqno","tag_id":"cla6l8qi2001ag7i57p0341nr","_id":"cla6l8qi7001sg7i5duma210c"},{"post_id":"cla6l8qhv000jg7i5gb94fqno","tag_id":"cla6l8qi3001dg7i53riyboo0","_id":"cla6l8qi7001ug7i5hpla3e4q"},{"post_id":"cla6l8qhw000pg7i53bhg2ba3","tag_id":"cla6l8qi10016g7i5cys0cntd","_id":"cla6l8qi8001xg7i5fzuefvoa"},{"post_id":"cla6l8qhw000pg7i53bhg2ba3","tag_id":"cla6l8qi2001ag7i57p0341nr","_id":"cla6l8qi8001yg7i5evh9f6qf"},{"post_id":"cla6l8qhw000pg7i53bhg2ba3","tag_id":"cla6l8qi3001dg7i53riyboo0","_id":"cla6l8qi80020g7i5abor8gjm"},{"post_id":"cla6l8qhx000rg7i5ao4j1gix","tag_id":"cla6l8qi7001wg7i5c8isdrbd","_id":"cla6l8qi80023g7i50y270wi5"},{"post_id":"cla6l8qhx000rg7i5ao4j1gix","tag_id":"cla6l8qi8001zg7i5ghjh05uh","_id":"cla6l8qi80024g7i54ky7d1s5"},{"post_id":"cla6l8qhx000rg7i5ao4j1gix","tag_id":"cla6l8qi3001dg7i53riyboo0","_id":"cla6l8qi90026g7i54jxr3h1s"},{"post_id":"cla6l8qhy000tg7i5cvlv6lol","tag_id":"cla6l8qi80022g7i58uxt4vwz","_id":"cla6l8qi90027g7i5b52cgh0w"},{"post_id":"cla6l8qhz000xg7i56xstg45j","tag_id":"cla6l8qi80025g7i5dpj1c8n8","_id":"cla6l8qi9002ag7i51h9fd0f5"},{"post_id":"cla6l8qhz000xg7i56xstg45j","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qi9002bg7i5fpkw2g72"},{"post_id":"cla6l8qhz000xg7i56xstg45j","tag_id":"cla6l8qi90028g7i53uk16qks","_id":"cla6l8qi9002dg7i5dvmwd8kj"},{"post_id":"cla6l8qhz000zg7i59li98g7a","tag_id":"cla6l8qi80025g7i5dpj1c8n8","_id":"cla6l8qia002fg7i57der9944"},{"post_id":"cla6l8qhz000zg7i59li98g7a","tag_id":"cla6l8qi9002cg7i5c77sdl7l","_id":"cla6l8qia002gg7i53ca1glmw"},{"post_id":"cla6l8qhz000zg7i59li98g7a","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qia002ig7i5dijhfjd0"},{"post_id":"cla6l8qi00012g7i5871k8ws3","tag_id":"cla6l8qi80025g7i5dpj1c8n8","_id":"cla6l8qia002kg7i57moa2nfy"},{"post_id":"cla6l8qi00012g7i5871k8ws3","tag_id":"cla6l8qia002hg7i59bsv163e","_id":"cla6l8qia002lg7i5dh6leope"},{"post_id":"cla6l8qi00012g7i5871k8ws3","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qia002ng7i5e08t65db"},{"post_id":"cla6l8qi00014g7i50tx0627t","tag_id":"cla6l8qi80025g7i5dpj1c8n8","_id":"cla6l8qib002pg7i5h7k7ddh9"},{"post_id":"cla6l8qi00014g7i50tx0627t","tag_id":"cla6l8qia002mg7i553aqgvne","_id":"cla6l8qib002qg7i5gduv690c"},{"post_id":"cla6l8qi00014g7i50tx0627t","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qib002sg7i52cfx267l"},{"post_id":"cla6l8qi10015g7i5eo3s4wqc","tag_id":"cla6l8qi90028g7i53uk16qks","_id":"cla6l8qib002ug7i5egdt33hq"},{"post_id":"cla6l8qi10015g7i5eo3s4wqc","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qib002vg7i5d8tr46tg"},{"post_id":"cla6l8qi10015g7i5eo3s4wqc","tag_id":"cla6l8qib002rg7i5g4h15y92","_id":"cla6l8qic002xg7i5d1buhzmh"},{"post_id":"cla6l8qi20018g7i5bwzi4rh5","tag_id":"cla6l8qi90028g7i53uk16qks","_id":"cla6l8qic002yg7i5b4sphoes"},{"post_id":"cla6l8qi20018g7i5bwzi4rh5","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qic0030g7i593dienvr"},{"post_id":"cla6l8qi20019g7i5fczw96ec","tag_id":"cla6l8qia002hg7i59bsv163e","_id":"cla6l8qic0031g7i52tq72cbk"},{"post_id":"cla6l8qi20019g7i5fczw96ec","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qic0033g7i5fpl9cmhd"},{"post_id":"cla6l8qi3001bg7i596o526hm","tag_id":"cla6l8qic002zg7i50bru4cbe","_id":"cla6l8qic0034g7i5df1p4j9n"},{"post_id":"cla6l8qi3001bg7i596o526hm","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qic0036g7i5bj4f1zuh"},{"post_id":"cla6l8qi3001cg7i5g1b3fybo","tag_id":"cla6l8qic0032g7i5g6lfdj5i","_id":"cla6l8qic0037g7i5187b7t4n"},{"post_id":"cla6l8qi4001eg7i597nmbue1","tag_id":"cla6l8qi90028g7i53uk16qks","_id":"cla6l8qid0039g7i5d0d67nqi"},{"post_id":"cla6l8qi4001eg7i597nmbue1","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qid003ag7i51lxgarsx"},{"post_id":"cla6l8qi4001fg7i5b09c8p0e","tag_id":"cla6l8qi80022g7i58uxt4vwz","_id":"cla6l8qid003cg7i50y4hebj5"},{"post_id":"cla6l8qi5001hg7i553rl00gs","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"cla6l8qid003eg7i525jk8cpc"},{"post_id":"cla6l8qi5001hg7i553rl00gs","tag_id":"cla6l8qid003bg7i58amp5u6q","_id":"cla6l8qid003fg7i5dgfu6y9b"},{"post_id":"cla6l8qi6001mg7i59hay995w","tag_id":"cla6l8qid003dg7i5f0l0bmvh","_id":"cla6l8qid003gg7i54xx4359u"},{"post_id":"cla6pnrq6000010i5840qazvq","tag_id":"cla6l8qi3001dg7i53riyboo0","_id":"cla6pnrql000210i5el9jcbo8"},{"post_id":"cla6pnrq6000010i5840qazvq","tag_id":"cla6pnrqf000110i51y8u1ct6","_id":"cla6pnrql000310i5fc2t0dpg"},{"post_id":"clakumy3b0001mki5c9nv3ogj","tag_id":"clakumy3c0002mki5ene633yr","_id":"clakumy3i0003mki5hm7j8bbb"},{"post_id":"clakumy350000mki55y3y6j1d","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"clakuncvi0000ovi5hgw9dthj"},{"post_id":"clakzlxp40000wei5env494jq","tag_id":"cla6l8qi80022g7i58uxt4vwz","_id":"clakzlxpn0002wei552jv62al"},{"post_id":"clakzlxp40000wei5env494jq","tag_id":"clakzlxpd0001wei5dj9ga4uf","_id":"clakzlxpn0003wei53c2dgwel"},{"post_id":"clamha5bb0000g6i52d8y8xx5","tag_id":"cla6l8qhw000og7i5e98y9pa5","_id":"clamha5bk0001g6i59yy03nfu"},{"post_id":"clatlzrno00001ai5a5uag1om","tag_id":"cla6l8qhn0003g7i50q84d7wn","_id":"clatm6y7u00011ai5978wafq5"}],"Tag":[{"name":"Hexo","_id":"cla6l8qhn0003g7i50q84d7wn"},{"name":"Github","_id":"cla6l8qht000eg7i5ez2pfg7w"},{"name":"Linux","_id":"cla6l8qhw000og7i5e98y9pa5"},{"name":"MARO","_id":"cla6l8qhx000sg7i5bfs50th0"},{"name":"Markdown","_id":"cla6l8qi00011g7i55pb6ff08"},{"name":"数据库","_id":"cla6l8qi10016g7i5cys0cntd"},{"name":"MySQL","_id":"cla6l8qi2001ag7i57p0341nr"},{"name":"对话","_id":"cla6l8qi3001dg7i53riyboo0"},{"name":"网络","_id":"cla6l8qi7001wg7i5c8isdrbd"},{"name":"TCP","_id":"cla6l8qi8001zg7i5ghjh05uh"},{"name":"VIM","_id":"cla6l8qi80022g7i58uxt4vwz"},{"name":"Debian","_id":"cla6l8qi80025g7i5dpj1c8n8"},{"name":"Bash","_id":"cla6l8qi90028g7i53uk16qks"},{"name":"Fcitx","_id":"cla6l8qi9002cg7i5c77sdl7l"},{"name":"Gnome","_id":"cla6l8qia002hg7i59bsv163e"},{"name":"Nvidia","_id":"cla6l8qia002mg7i553aqgvne"},{"name":"Powerline","_id":"cla6l8qib002rg7i5g4h15y92"},{"name":"VScode","_id":"cla6l8qic002zg7i50bru4cbe"},{"name":"Nodejs","_id":"cla6l8qic0032g7i5g6lfdj5i"},{"name":"Wayland","_id":"cla6l8qid003bg7i58amp5u6q"},{"name":"工作面试","_id":"cla6l8qid003dg7i5f0l0bmvh"},{"name":"Redis","_id":"cla6pnrqf000110i51y8u1ct6"},{"name":"vim","_id":"clakumy3c0002mki5ene633yr"},{"name":"Python","_id":"clakzlxpd0001wei5dj9ga4uf"}]}}
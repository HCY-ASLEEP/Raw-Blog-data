<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo Inner Link</title>
      <link href="/2022/11/23/Hexo-Inner-Link/"/>
      <url>/2022/11/23/Hexo-Inner-Link/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Markdown 编写的 Hexo 博客文章内部跳转，比如说想在文章1中的某个段落内部超链接跳转到文章2</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link 文章文件名(不要后缀) 文章标题(可选) %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如文章文件名为 Hello-World.md</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link Hello-World %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% post_</span>link Hello-World 你好世界 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想做到这样子的效果</p>  <img src="/pictures/Hexo-Inner-Link/2022.11.23.20.17.03.png"/>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;display:flex&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:50%&quot;</span>&gt;</span></span><br><span class="line">PRE : &#123;% post_link 初识-MARO 初识 MARO %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:50%&quot;</span>&gt;</span></span><br><span class="line">NEXT : &#123;% post_link MARO-VM-调度 MARO VM 调度%&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>单纯的右边</p>  <img src="/pictures/Hexo-Inner-Link/2022.11.23.20.15.53.png"/>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span> &gt;</span></span><br><span class="line">NEXT : &#123;% post_link MARO-Distibuted-toolkit MARO Distibuted toolkit %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Host 与 KVM Windows Guest 共享文件</title>
      <link href="/2022/11/18/Linux-%E4%B8%8E-KVM-Windows-guest-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
      <url>/2022/11/18/Linux-%E4%B8%8E-KVM-Windows-guest-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="将文件从-Linux-Host-传到-KVM-Windows-Guest"><a href="#将文件从-Linux-Host-传到-KVM-Windows-Guest" class="headerlink" title="将文件从 Linux Host 传到 KVM Windows Guest"></a>将文件从 Linux Host 传到 KVM Windows Guest</h4><ul><li>在 Windows Guest 里面下载安装如下地址的软件</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe</span><br></pre></td></tr></table></figure><ul><li>重启 Windows Guest</li><li>发现可以把 Linux 文件拖拽到 Windwos 里面，可是无法反向拖拽</li></ul></li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li><h4 id="将文件从-KVM-Windows-Guest-传到-Linux-Host"><a href="#将文件从-KVM-Windows-Guest-传到-Linux-Host" class="headerlink" title="将文件从 KVM Windows Guest 传到 Linux Host"></a>将文件从 KVM Windows Guest 传到 Linux Host</h4><ul><li><h5 id="在-Windows-Guest-里面设置共享文件夹"><a href="#在-Windows-Guest-里面设置共享文件夹" class="headerlink" title="在 Windows Guest 里面设置共享文件夹"></a>在 Windows Guest 里面设置共享文件夹</h5><ul><li><p>新建文件夹（此处在 C盘 根目录下）</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.37.19.png"/></li><li><p>设置文件夹共享</p><ul><li><p>右键 -&gt; 属性 -&gt; 共享</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png"/>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.41.28.png"/></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ul><li><p>选择 Everyone -&gt; 添加</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.43.00.png"/></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li><p>选择权限</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.45.31.png"/></li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li><p>Share</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.46.52.png"/></li></ul><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><ul><li><p>留意这里，图片里面的 “DESKTOP-5J93LDB” 在 Linux mount 操作时将会被换为 Windows 的 IP 地址</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.48.24.png"/></li></ul><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><ul><li>点击 Done 完成共享设置</li></ul></li></ul><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><ul><li><p>设置外部可以访问 Windows</p><ul><li><p>回到 Share 的 share 属性页面</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.39.56.png"/></li></ul><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><ul><li><p>点击 Network and Sharing Center</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.54.42.png"/></li></ul><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><ul><li><p>改变设置如下</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.19.56.55.png"/></li></ul><h6 id="-9"><a href="#-9" class="headerlink" title=""></a></h6><ul><li>保存设置完成 Windows 端配置</li></ul></li></ul></li></ul><h6 id="-10"><a href="#-10" class="headerlink" title=""></a></h6><ul><li><h5 id="Linux-Host-挂载"><a href="#Linux-Host-挂载" class="headerlink" title="Linux Host 挂载"></a>Linux Host 挂载</h5><ul><li><p>在 Linux Host 下将 Windows Guset 的共享目录挂载到 Linux Host 的某个文件夹下面，然后 cd 到这个文件夹下面就可以访问 share 目录了</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.17.42.png"/>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //192.168.122.8/share /home/asleep/share/</span><br></pre></td></tr></table></figure><ul><li>“-t cifs” 指定要挂载外部文件系统</li></ul><h6 id="-11"><a href="#-11" class="headerlink" title=""></a></h6></li><li><p>查看 Linux Host 下的文件目录内容，发现已经可以访问到 Windows Guset 的共享目录</p>  <img src="../pictures/Linux-H-Windows-G 共享文件/2022.11.18.20.21.08.png"/>  <h6 id="-12"><a href="#-12" class="headerlink" title=""></a></h6></li><li><p>要卸载共享，也就是取消挂载，执行如下命令</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount -t cifs //192.168.122.8/share</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coc-pyright 找不到相关的语法分析</title>
      <link href="/2022/11/17/coc-pyright-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9B%B8%E5%85%B3%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/17/coc-pyright-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9B%B8%E5%85%B3%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Coc-pright 是静态语法分析器，而 python 有一些包是没有经过预编译的，比如说 opencv ，所以就会有找不到相关包的语法分析的情况发生</p></li><li><p>首先</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mypy    </span><br></pre></td></tr></table></figure></li><li><p>生成 cv2 的 pyi 文件</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stubgen -m cv2 -o &#123;cv2-package-folder&#125;</span><br></pre></td></tr></table></figure><ul><li>在我的环境下 {cv2-package-folder} 是  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2</span><br></pre></td></tr></table></figure></li><li>执行命令之后会在目录下生成 cv2.pyi 文件</li></ul></li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li><p>将 cv2.pyi 移动到 coc-pyright 的解析目录，成功解析</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/asleep/softwares/conda/conda/envs/ocv/lib/python3.9/site-packages/cv2/cv2.pyi  /home/asleep/.config/coc/extensions/node_modules/coc-pyright/node_modules/pyright/dist/typeshed-fallback/stdlib   </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> VIM </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令行格式化磁盘（U盘)</title>
      <link href="/2022/11/17/Linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%A3%81%E7%9B%98%EF%BC%88U%E7%9B%98/"/>
      <url>/2022/11/17/Linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%A3%81%E7%9B%98%EF%BC%88U%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h5 id="注意：以下操作都属于高危行为，请谨慎使用！"><a href="#注意：以下操作都属于高危行为，请谨慎使用！" class="headerlink" title="注意：以下操作都属于高危行为，请谨慎使用！"></a>注意：以下操作都属于高危行为，请谨慎使用！</h5><ul><li><p>在插入 U盘 之前，先查看有哪些磁盘</p>  <img src="../pictures/Linux 命令行格式化/2022.11.17.16.36.19.png"/><ul><li>可以看到加粗的有两行，第一行开头是 “Disk” ，第二行开头是 “Device”</li><li>整个输出只有一行加粗的 “Disk” ，表示目前只有一个硬盘</li><li>每一个加粗的 “Device” 都对应上一行的 “Disk”</li><li>“Device” 里面的内容表示 “Disk” 里面的分区</li></ul></li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li><p>在插入 U盘 之后，再查看有哪些磁盘</p>  <img src="../pictures/Linux 命令行格式化/2022.11.17.16.39.41.png"/>  <ul><li>发现多了一行加粗的 “Disk”</li><li>这个正是我们插入的 U盘</li></ul></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ul><li>卸载 U盘  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sda</span><br></pre></td></tr></table></figure><ul><li><h5 id="x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！"><a href="#x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！" class="headerlink" title="&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！"></a>&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！</h5></li></ul></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li>格式化 U盘 ，并且建立 vfat 文件系统  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat -I /dev/sda</span><br></pre></td></tr></table></figure><ul><li><h5 id="x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！-1"><a href="#x2F-dev-x2F-后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！-1" class="headerlink" title="&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！"></a>&#x2F;dev&#x2F;后面的设备要根据你的实际情况而定，否则后面格式化，丢失数据！！</h5></li></ul></li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li><p>最后再 mount 上 U盘 ，或者把 U盘 拨了再插上，系统可能会自动 mount 上, 就可以使用 U盘 了</p></li><li><p>异常处理</p><ul><li>假设 U盘 信息如下  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/sdb：7.5 GiB，8004304896 bytes，15633408 sectors</span><br><span class="line">Units：sectors of / 1 * 512 = 512 bytes</span><br><span class="line">Sector size(logical/physical)：512 bytes / 512 bytes</span><br><span class="line">I/O size(mininum/optimal)：512 bytes / 512 bytes</span><br><span class="line">Disklabel type：dos</span><br><span class="line">Disk identifier：0x663eb4c4</span><br><span class="line"></span><br><span class="line">Device    boot      Start     End Sectors  Size Id Type</span><br><span class="line">/dev/sdb1    *          0 3815135 3815136  1.8G  0 Empty</span><br><span class="line">/dev/sdb2         3737268 3741939    4672  2.3M ef EFI (FAT-12/16/32)</span><br></pre></td></tr></table></figure><ul><li><p>如果 mkfs.vfat &#x2F;dev&#x2F;sdb 出现如下错误</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat 3.0.10 (12 Sep 2010)</span><br><span class="line">mkfs.vfat: unable to open /dev/sdb</span><br></pre></td></tr></table></figure></li><li><p>则需要先格式化 &#x2F;dev&#x2F;sdb1 ，即使用 mkfs.vfat &#x2F;dev&#x2F;sdb1 命令，将 &#x2F;dev&#x2F;sdb1 先格式化掉，然后再格式化 &#x2F;dev&#x2F;sdb</p></li><li><p>如果出现如下错误</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat 3.0.10 (12 Sep 2010)</span><br><span class="line">mkfs.vfat: Device partition expected, not making filesystem on entire device &#x27;/dev/sdb&#x27; (use -I to override)</span><br></pre></td></tr></table></figure></li><li><p>系统提示需要使用 -I 参数来完成格式化：mkfs.vfat -I &#x2F;dev&#x2F;sdb, 这样就可以完全格式化的U盘</p></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Diff</title>
      <link href="/2022/11/07/vim-diff/"/>
      <url>/2022/11/07/vim-diff/</url>
      
        <content type="html"><![CDATA[<p>VIM(NEOVIM) 比较不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -d file_1 file_2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-基础-闲聊</title>
      <link href="/2022/11/07/Redis-%E5%9F%BA%E7%A1%80-%E9%97%B2%E8%81%8A/"/>
      <url>/2022/11/07/Redis-%E5%9F%BA%E7%A1%80-%E9%97%B2%E8%81%8A/</url>
      
        <content type="html"><![CDATA[<div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>今天要不来聊聊Redis吧？</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>好</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、HBase也好，他们都是存储数据的地方</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>因为它们的设计理念的不同，我们会根据不同的应用场景使用不同的存储</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>像Redis一般我们会把它用作于缓存</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>当然啦，日常有的应用场景比较简单，用个HashMap也能解决很多的问题了，没必要上Redis</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这就好比，有的单机限流可能应对某些场景就够用了，也没必要说一定要上分布式限流把系统搞得复杂</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/2022.11.07.17.43.04.png"/></div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>你在项目里有用到Redis吗？怎么用的？</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>Redis肯定是用到的，我负责的项目几乎都会有Redis的踪影</div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>举几个项目用的案例？</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我这边负责消息管理平台，简单来说就是发消息的</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>那发完消息肯定我们是得知道消息有没有下发成功的，是吧？</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>于是我们系统有一套完整的链路追踪体系</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>其中实时的数据我们就用Redis来进行存储，有实时肯定就会有离线的嘛（离线的数据我们是存储到Hive的）</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/008i3skNgy1gtyvevn728j60ko0fygm202.jpg"/></div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>对消息进行实时链路追踪，我这边就用了Redis好几种的数据结构</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>分别有Set、List和Hash</div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯….</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我再稍微铺垫下链路追踪的背景吧</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>要在消息管理平台发消息，首先得在后台新建一个「模板」，有模板自然会有一个模板ID</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>对模板ID进行扩展，比如说加上日期和固定的业务参数，形成的ID可以唯一标识某个模板的下发链路</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在系统上，我这边叫它为UMPID</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在发送入口处会对所有需要下发的消息打上UMPID，然后在关键链路上打上对应的点位</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/008i3skNgy1gtyvfly3b7j60q205cglr02.jpg"/></div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，你继续吧</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>接下来的工作就是清洗出统一的模型，然后根据不同维度进行处理啦。比如说：</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我要看某一天下发的所有模板有哪些，那只要我把清洗出来后数据的，将对应UMPID扔到了Set就好了</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我要看某一个模板的消息下发的整体链路情况，那我以UMPID为Key，Value是Hash结构，Key是state，Value则是人数</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这里的state我们在下发的过程中打的关键点位，比如接收到消息打个51，消息被去重了打个61，消息成功下发了打个81…</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/008i3skNgy1gtyvgkxib0j60pc066aac02.jpg"/></div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>以UMPID为Key，Hash结构的Key（State）进行不断的累加，就可以实现某一个模板的消息下发的整体链路情况</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我要看某个用户当天下发的消息有哪些，以及这些消息的整体链路是如何</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这边我用的是List结构，Key是userId，Value则是UMPID+state(关键点位)+processTime（处理时间)</div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯….</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>简单来说，就是通过Redis丰富的数据结构来实现对下发消息多个维度的统计</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>不同的应用场景选择不同的数据结构，再等到透出做处理的时候，就变得十分简单了</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>消息下发过程中去重或者一般正常的场景就直接Key-Value就能符合需求了</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>像bitmap、hyperloglogs、sortset、steam等等这些数据结构在我所负责的项目用得是真不多</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>要是我有机会去到贵公司，贵公司有相关的应用场景，我相信我也很快就能掌握</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/008i3skNgy1gtyvh1wbjoj60pk06w74l02.jpg"/></div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这些数据结构底层都由对应的object来支撑着，object记录对应的「编码」</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>其实就是会根据key-value存储的数量或者长度来使用选择不同的底层数据结构实现</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如说：ziplist压缩列表这个底层数据结构有可能上层的实现是list、hash和sortset</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>Hash结构的底层数据结构可能是hash和ziplist</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在节省内存和性能的考量之中切换</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>Redis还是有点屌的啊</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/008i3skNgy1gtyvhui46sj60py04ut9402.jpg"/></div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>就你上面那个实时链路场景，可以用其他的存储替代吗？</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，理论上是可以的（或许可以尝试用HBase），但总体来说没这么好吧</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>因为Redis拥有丰富的数据结构，在透出的时候，处理会非常的方便</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果不用Redis的话，还得做很多解析的工作</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>并且，我那场景的并发还是相当大的（就一条消息发送，可能就产生10条记录）</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>监控峰值命令处理数会去到20k+QPS，当然了，这场景我肯定用了Pipeline的（不然处理会慢很多）</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>综合上面并发量和实时性以及数据结构，用Redis是一个比较好的选择</div></div><br/><div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/redis-基础-闲聊/008i3skNgy1gtyw0mlggbj60y405emy302.jpg"/></div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯….你觉得为什么Redis可以这么快？</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>首先，它是纯内存操作，内存本身就很快</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>其次，它是单线程的，Redis服务器核心是基于非阻塞的IO多路复用机制，单线程避免了多线程的频繁上下文切换问题</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>至于这个单线程，其实官网也有过说明（：表示使用Redis往往的瓶颈在于内与和网络，而不在于CPU</div></div><br/><div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>了解</div></div><br/>]]></content>
      
      
      
        <tags>
            
            <tag> 对话 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP Shakes/Waves Hands 闲谈</title>
      <link href="/2022/11/07/TCP-Shakes-and-Waves-hands-%E9%97%B2%E8%81%8A/"/>
      <url>/2022/11/07/TCP-Shakes-and-Waves-hands-%E9%97%B2%E8%81%8A/</url>
      
        <content type="html"><![CDATA[<div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>面试官你好，请问面试可以开始了吗</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，开始吧</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>今天来聊聊TCP吧，TCP的各个状态还有印象吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>还有些许印象的，要不我就来简单说下TCP的三次握手和四次挥手的流程吧</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>说完这两个流程，就能把TCP的状态给涵盖上了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>可以</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在说TCP的三次握手和四次挥手之前，我先给你画下TCP的头部格式呗（：</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvbm49hyr9j60u00vvn2o02.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>对于TCP三次握手和四次挥手，我们最主要的就是关注TCP头部的序列号、确认号以及几个标记位（SYN/FIN/ACK/RST）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>序列号：在初次建立连接的时候，客户端和服务端都会为「本次的连接」随机初始化一个序列号。（纵观整个TCP流程中，序列号可以用来解决网络包乱序的问题）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>确认号：该字段表示「接收端」告诉「发送端」对上一个数据包已经成功接收（确认号可以⽤来解决网络包丢失的问题）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而标记位就很好理解啦。SYN为1时，表示希望创建连接。ACK为1时，确认号字段有效。FIN为1时，表示希望断开连接。RST为1时，表示TCP连接出现异常，需要断开</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvbm4ptqt5j60v00h0q6x02.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>下面就先从三次握手开始吧，期间我也会在三次握手中涉及到的TCP状态也说下的</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>TCP三次握手的过程其实就是在：确认通信双方（客户端和服务端）的序列号</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvbpkkvctrj614e0diq4702.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>它的过程是这样的</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在最开始的时候，客户端和服务端都处于 CLOSE 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>服务器主动监听某个端口，处于 LISTEN 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端会随机生成出序列号（这里的序列号一般叫做client_isn），并且把标志位设置为SYN（意味着要连接），然后把该报文发送给服务端</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端发送完SYN报文以后，自己便进入了 SYN_SEND 状态</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvbpqrtuz5j61ai0ggjsz02.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>服务端接收到了客户端的请求之后，自己也初始化对应的序列号（这里的序列号一般叫做 server_isn）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在「确认号」字段里填上client_isn + 1（相当于告诉客户端，已经收到了发送过来的序列号了） ，并且把 SYN 和 ACK 标记位都点亮(置为1)</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>把该报文发送客户端，服务端的状态变成 SYN-REVD 状态</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvcuaebe9oj619g0u0gox02.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端收到服务端发送的报文后，就知道服务端已经接收到了自己的序列号（通过确认号就可以知道），并且接收到了服务端的序列号(server_isn)</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>此时，客户端需要告诉服务端自己已经接收到了他发送过来的序列号，所以在「确认号」字段上填上server_isn+1，，并且标记位 ACK 为1</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvcueanzntj61380u0adr02.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端在发送报文之后，进入 ESTABLISHED 状态，而服务端接收到客户端的报文之后，也进入 ESTABLISHED 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这就是三次握手的过程以及涉及到的TCP状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>总结下来，就是双方都把自身的序列号发给对方，看对方能不能接收到。如果「确认可以」，那就可以正常通信。（三次握手这个过程就可以看到双方都有接收和发送的能力）</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>那两次握手行吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>两次握手只能保证客户端的序列号成功被服务端接收，而服务端是无法确认自己的序列号是否被客户端成功接收。所以是不行的（：</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>了解了，那我想问问序列号为什么是随机的？以及序列号是怎么生成的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>一方面为了安全性（随机ISN能避免非同一网络的攻击），另一方面可以让通信双方能够根据序号将「不属于」本连接的报文段丢弃</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>序列号怎么生成的？这…随便猜下就应该跟「时钟」和TCP头部的某些属性做运算生成的吧，类似于雪花算法（：具体我忘了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>既然网络是不可靠的，那建立连接不是会经过三次握手吗？那要是在中途丢了，怎么办？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>假设第一个包丢了，客户端发送给服务端的 SYN 包丢了（简而要之就是服务端没接收到客户端的SYN包）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端迟迟收不到服务端的ACK包，那会周期性超时重传，直到收到服务端的ACK</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>假设第二个包丢了，服务端发送的SYN+ACK包丢了（简而要之就是客户端没接收到服务端的SYN+ACK包）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>服务端迟迟收不到客户端的ACK包，那会周期性超时重传，直到收到客户端的ACK</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>假设第三个包丢了（ACK包），客户端发送完第三个包后单方面进入了 ESTABLISHED 状态，而服务端也认为此时连接是正常的，但第三个包没到达服务端</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>一、如果此时客户端与服务端都还没数据发送，那服务端会认为自己发送的SYN+ACK的包没发送至客户端，所以会超时重传自己的SYN+ACK包</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>二、如果这时候客户端已经要发送数据了，服务端接收到了ACK + Data数据包，那自然就切换到 ESTABLISHED 状态下，并且接收客户端的Data数据包</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>三、如果此时服务端要发送数据了，但发送不了，会一直周期性超时重传SYN + ACK，直到接收到客户端的ACK包</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvdzs5pbp3j60so048dgb02.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，是不是要讲下四次挥手了？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，在建立完连接之后，客户端和服务端双方都处于 ESTABLISHED 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>断开连接双方都有权利的，下面我还是以客户端主动断开为例好啦</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端打算关闭连接，会发 FIN 报文给服务端（其实就是把标志位 FIN 点亮），客户端发送完之后，就进入FIN_WAIT_1状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>服务端收到 FIN 报文之后，回复 ACK 报文给客户端（表示已经收到了），服务端发送完之后，就进入 CLOSE_WAIT 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端接收到服务端的 ACK 报文，就进入了 FIN_WAIT_2 状态</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvdztfq4shj61as0jw0uz02.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这时候，服务器可能还有数据要发送给客户端，等服务端确认自己已经没有数据返回给客户端之后，就发送FIN报文给客户端了，自己进入 LAST_ACK 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端收到服务端的FIN报文之后，回应ACK报文，自己进入 TIME_WAIT 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>服务端收到客户端的ACK报文之后，服务端就进入 CLOSE 状态</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>客户端在TIME_WAIT等到2MSL，也进入了 CLOSE 状态</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gvdzz74bokj614q0u0gp002.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>四次挥手的流程到这里就结束了，结合三次握手，TCP的各个状态也已经说完了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯嗯，刚聊完四次挥手嘛，那你觉得为什么是四次呢？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>其实很好理解，当客户端第一次发送 FIN 报文之后，只是代表着客户端不再发送数据给服务端，但此时客户端还是有接收数据的能力的。而服务端收到FIN报文的时候，可能还有数据要传输给客户端，所以只能先回复 ACK给客户端</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>等到服务端不再有数据发送给客户端时，才发送 FIN 报文给客户端，表示可以关闭了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>所以，一来一回就四次了</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/TCP-握手挥手/008i3skNgy1gve15uf3m1j60ze04gwf802.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>从四次挥手的流程上来看，有个 TIME_WAIT 状态，你知道这个状态干什么用的吗？（等待 2MSL）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>主要有两个原因吧。1.保证最后的 ACK 报文 「接收方」一定能收到（如果收不到，对方会 重发 FIN 报文）2. 确保在创建新连接时，先前网络中残余的数据都丢失了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>其实也比较好理解的。就正如我们重启服务器一样，会先优雅关闭各种资源，再留有一段时间，希望在这段时间内，资源是正常关闭的，这样重启服务器（或者发布）就基本认为不会影响到线上运行了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>假设 TIME_WAIT 状态多过会有什么危害？怎么解决呢？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>从流程上看， TIME_WAIT 状态 只会出现在 主动发起 关闭连接的一方。危害就是会占用内存资源和端口呗（毕竟在等待嘛），解决的话，有Linux参数可以设置，具体忘了额</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>今天最后再问个问题吧，我们常说TCP连接，那这个连接到底是什么？你是怎么理解的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>其实从三次握手可以发现的是，TCP建立连接无非就是交换了双方的状态（比如序列号）。然后就没有然后了…连接本质上「只是互相维持一个状态，有连接特性」</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>好吧</div></div><br/>]]></content>
      
      
      
        <tags>
            
            <tag> 对话 </tag>
            
            <tag> 网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 闲谈 3</title>
      <link href="/2022/11/06/MySQL-%E9%97%B2%E8%B0%88-3/"/>
      <url>/2022/11/06/MySQL-%E9%97%B2%E8%B0%88-3/</url>
      
        <content type="html"><![CDATA[<div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>要不你来讲讲你们对MySQL是怎么调优的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点一般是在「开发规范」、「数据库索引」又或者说解决线上慢查询上</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而对于MySQL内部的参数调优，由专业的DBA来搞</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>扯了这么多，你就是想表达你不会MySQL参数调优，对吧</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>草，被发现了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，首先，我们在生产环境下，创建数据库表，都是在工单系统下完成的（那就自然需要DBA审批）。如果在创建表时检测到没有创建索引，那就会直接提示warning（：</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-adf9da0a7ab5845f85b8e487095f71ae_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>理论上来说，如果表有一定的数据量，那就应该要创建对应的索引。从数据库查询数据需要注意的地方还是蛮多的，其中很多都是平时积累来的。比如说：</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>1. 是否能使用「覆盖索引」，减少「回表」所消耗的时间。意味着，我们在select 的时候，一定要指明对应的列，而不是select *</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>2. 考虑是否组建「联合索引」，如果组建「联合索引」，尽量将区分度最高的放在最左边，并且需要考虑「最左匹配原则」</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>3.对索引进行函数操作或者表达式计算会导致索引失效</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>4.利用子查询优化超多分页场景。比如 limit offset , n 在MySQL是获取 offset + n的记录，再返回n条。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯…</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>5.通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过show profile 来查看SQL对系统资源的损耗情况（不过一般还是比较少用到的）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>6.在开启事务后，在事务内尽可能只操作数据库，并有意识地减少锁的持有时间（比如在事务内需要插入&&修改数据，那可以先插入后修改。因为修改是更新操作，会加行锁。如果先更新，那并发下可能会导致多个事务的请求等待行锁释放）</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-482ac758e3b5d1bb5e52407e52f44fb1_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，我们这边用的是Read Commit（读已提交），MySQL默认用的是Repeatable read（可重复读）。选用什么隔离级别，主要看应用场景嘛，因为隔离级别越低，事务并发性能越高</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>一般互联网公司都选择Read Commit作为主要的隔离级别）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>像Repeatable read（可重复读）隔离级别，就有可能因为「间隙锁」导致的死锁问题</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>但可能你已经知道，MySQL默认的隔离级别为Repeatable read。很大一部分原因是在最开始的时候，MySQL的binlog没有row模式，在read commit隔离级别下会存在「主从数据不一致」的问题</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>binlog记录了数据库表结构和表数据「变更」，比如update/delete/insert/truncate/create。在MySQL中，主从同步实际上就是应用了binlog来实现的（：</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>有了该历史原因，所以MySQL就将默认的隔离级别设置为Repeatable read</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-89983c3f82aef2f68bc720567f0d1980_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯嗯，当然遇到过了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>那你们是怎么做的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果走对了索引，但查询还是慢，那一般来说就是表的数据量实在是太大了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>首先，考虑能不能把「旧的数据」给”删掉”，对于我们公司而言，我们都会把数据同步到Hive，说明已经离线存储了一份了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>那如果「旧的数据」已经没有查询的业务了，那最简单的办法肯定是”删掉”部分数据咯。数据量降低了，那自然，检索速度就快了…</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，但一般不会删的</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>没错，只有极少部分业务可以删掉数据（：</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>随后，就考虑另一种情况，能不能在查询之前，直接走一层缓存（Redis）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而走缓存的话，又要看业务能不能忍受读取的「非真正实时」的数据（毕竟Redis和MySQL的数据一致性需要保证），如果查询条件相对复杂且多变的话（涉及各种group by 和sum），那走缓存也不是一种好的办法，维护起来就不方便了…</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>再看看是不是有「字符串」检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走Elasticsearch了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>MySQL->Elasticsearch需要有对应的同步程序(一般就是监听MySQL的binlog，解析binlog后导入到Elasticsearch)</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果还不是的话，那考虑要不要根据查询条件的维度，做相对应的聚合表，线上的请求就查询聚合表的数据，不走原表</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如，用户下单后，有一份订单明细，而订单明细表的量级太大。但在产品侧(前台)透出的查询功能是以「天」维度来展示的，那就可以将每个用户的每天数据聚合起来，在聚合表就是一个用户一天只有一条汇总后的数据</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>查询走聚合后的表，那速度肯定杠杠的（聚合后的表数据量肯定比原始表要少很多）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>思路大致的就是「以空间换时间」，相同的数据换别的地方也存储一份，提高查询效率</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-6a1dc5b0c6ee82fc7337006ff80b67ff_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>你说到这个，我就不困了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果在MySQL读写都有瓶颈，那首先看下目前MySQL的架构是怎么样的</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果是单库的，那是不是可以考虑升级至主从架构，实现读写分离</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>简单理解就是：主库接收写请求，从库接收读请求。从库的数据由主库发送的binlog进而更新，实现主从数据一致（在一般场景下，主从的数据是通过异步来保证最终一致性的）</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-68894ad64aceece371fe98507a6d4232_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯…</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果在主从架构下，读写仍存在瓶颈，那就要考虑是否要分库分表了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>至少在我前公司的架构下，业务是区分的。流量有流量数据库，广告有广告的数据库，商品有商品的数据库。所以，我这里讲的分库分表的含义是：在原来的某个库的某个表进而拆分</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如，现在我有一张业务订单表，这张订单表在广告库中，假定这张业务订单表已经有1亿数据量了，现在我要分库分表</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>那就会将这张表的数据分至多个广告库以及多张表中（：</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>分库分表的最明显的好处就是把请求进行均摊（本来单个库单个表有一亿的数据，那假设我分开8个库，那每个库1200+W的数据量，每个库下分8张表，那每张表就150W的数据量）</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-998aa34d5433837a585196f111bbf771_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>你们是以什么来作为分库键的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>按照我们这边的经验，一般来说是按照userId的（因为按照用户的维度查询比较多），如果要按照其他的维度进行查询，那还是参照上面的的思路（以空间换时间）</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>那分库分表后的ID是怎么生成的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这就涉及到分布式ID生成的方式了，思路有很多。有借助MySQL自增的，有借助Redis自增的，有基于「雪花算法」自增的。具体使用哪种方式，那就看公司的技术栈了，一般使用Redis和基于「雪花算法」实现用得比较多</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>至于为什么强调自增（还是跟索引是有序有关，前面已经讲过了，你应该还记得）</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-effeac74c8efb2b5c1627884b4ec8843_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，那如果我要分库分表了，迁移的过程是怎么样的呢</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我们一般采取「双写」的方式来进行迁移，大致步骤就是</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>一、增量的消息各自往新表和旧表写一份</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>二、将旧表的数据迁移至新库</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>三、迟早新表的数据都会追得上旧表（在某个节点上数据是同步的）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>四、校验新表和老表的数据是否正常（主要看能不能对得上）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>五、开启双读（一部分流量走新表，一部分流量走老表），相当于灰度上线的过程</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>六、读流量全部切新表，停止老表的写入</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>七、提前准备回滚机制，临时切换失败能恢复正常业务以及有修数据的相关程序</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-546dffdeecd9c7dc2da98ad5867dfc4c_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯…今天就到这吧</div></div><br/> <h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>数据库表存在一定数据量，就需要有对应的索引</li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li>发现慢查询时，检查是否走对索引，是否能用更好的索引进行优化查询速度，查看使用索引的姿势有没有问题</li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ul><li>当索引解决不了慢查询时，一般由于业务表的数据量太大导致，利用空间换时间的思想</li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li>当读写性能均遇到瓶颈时，先考虑能否升级数据库架构即可解决问题，若不能则需要考虑分库分表</li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li>分库分表虽然能解决掉读写瓶颈，但同时会带来各种问题，需要提前调研解决方案和踩坑</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 对话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 闲谈 2</title>
      <link href="/2022/11/06/MySQL-%E9%97%B2%E8%B0%88-2/"/>
      <url>/2022/11/06/MySQL-%E9%97%B2%E8%B0%88-2/</url>
      
        <content type="html"><![CDATA[<div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>你是怎么理解InnoDB引擎中的事务的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>事务其目的是为了「保证数据最终的一致性」</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>举个例子，我给你发支付宝转了888块红包。那自然我的支付宝余额会扣减888块，你的支付宝余额会增加888块</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而事务就是保证我的余额扣减跟你的余额增添是同时成功或者同时失败的，这样这次转账就正常了</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-3ebaa5e83396dabab44bc9d6371a384b_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，那你了解事务的几大特性吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，就是ACID嘛，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>原子性指的是：当前事务的操作要么同时成功，要么同时失败。原子性由undo log日志来保证，因为undo log记载着数据修改前的信息</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如我们要 insert 一条数据了，那undo log 会记录的一条对应的 delete 日志。我们要 update 一条记录时，那undo log会记录之前的「旧值」的update记录</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果执行事务过程中出现异常的情况，那执行「回滚」。InnoDB引擎就是利用undo log记录下的数据，来将数据「恢复」到事务开始之前</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-8fd6ccf7a2ef047768f34992bd1c7c30_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>一致性我稍稍往后讲，我先来说下隔离性</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯…</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>隔离性指的是：在事务「并发」执行时，他们内部的操作不能互相干扰。如果多个事务可以同时操作一个数据，那么就会产生脏读、重复读、幻读的问题</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>于是，事务与事务之间需要存在「一定」的隔离，在InnoDB引擎中，定义了四种隔离级别供我们使用</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>分别是：read uncommit(读未提交)、read commit (读已提交)、repeatable read (可重复复读)、serializable (串行)</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>不同的隔离级别对事务之间的隔离性是不一样的（级别越高事务隔离性越好，但性能就越低），而隔离性是由MySQL的各种锁来实现的，只是它屏蔽了加锁的细节</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-12c1d8d4396bb7d0383f72b5eb4d77d6_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>持久性指的就是：一旦提交了事务，它对数据库的改变就应该是永久性的。说白了就是，会将数据持久化在硬盘上</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而持久性由redo log 日志来保证，当我们要修改数据时，MySQL是先把这条记录所在的「页」找到，然后把该页加载到内存中，将对应记录进行修改</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>为了防止内存修改完了，MySQL就挂掉了（如果内存改完，直接挂掉，那这次的修改相当于就丢失了）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>MySQL引入了redo log，内存写完了，然后会写一份redo log，这份redo log记载着这次在某个页上做了什么修改</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>即便MySQL在中途挂了，我们还可以根据redo log来对数据进行恢复</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>redo log 是顺序写的，写入速度很快。并且它记录的是物理修改（xxxx页做了xxx修改），文件的体积很小，恢复速度也很快</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-2325a411c8f9da2e8c5f83367d913793_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>回头再来讲一致性，「一致性」可以理解为我们使用事务的「目的」，而「隔离性」「原子性」「持久性」均是为了保障「一致性」的手段，保证一致性需要由应用程序代码来保证</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如，如果事务在发生的过程中，出现了异常情况，此时你就得回滚事务，而不是强行提交事务来导致数据不一致</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-e5c89083071510afe2afd6e6dc337efa_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，挺好的，讲了蛮多的</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，为了讲清楚隔离级别，我顺带来说下MySQL锁相关的知识吧</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在InnoDB引擎下，按锁的粒度分类，可以简单分为行锁和表锁</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>行锁实际上是作用在索引之上的（索引上次已经说过了，这里就不赘述了）。当我们的SQL命中了索引，那锁住的就是命中条件内的索引节点（这种就是行锁），如果没有命中索引，那我们锁的就是整个索引树（表锁）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>简单来说就是：锁住的是整棵树还是某几个节点，完全取决于SQL条件是否有命中到对应的索引节点</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而行锁又可以简单分为读锁（共享锁、S锁）和写锁（排它锁、X锁）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>读锁是共享的，多个事务可以同时读取同一个资源，但不允许其他事务修改。写锁是排他的，写锁会阻塞其他的写锁和读锁</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-4ed4e54af979a73c24db83133be59359_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我现在就再回到隔离级别上吧，就直接以例子来说明啦</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯…</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>首先来说下read uncommit(读未提交)。比如说：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>简单的定义就是：事务B读取到了事务A还没提交的数据，这种用专业术语来说叫做「脏读」</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>对于锁的维度而言，其实就是在read uncommit隔离级别下，读不会加任何锁，而写会加排他锁。读什么锁都不加，这就让排他锁无法排它了</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-6792ec868544bf39078b7e9255ff4f53_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而我们又知道，对于更新操作而言，InnoDB是肯定会加写锁的（数据库是不可能允许在同一时间，更新同一条记录的）。而读操作，如果不加任何锁，那就会造成上面的脏读</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>脏读在生产环境下肯定是无法接受的，那如果读加锁的话，那意味着：当更新数据的时，就没办法读取了，这会极大地降低数据库性能</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在MySQL InnoDB引擎层面，又有新的解决方案（解决加锁后读写性能问题），叫做MVCC(Multi-Version Concurrency Control)多版本并发控制</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在MVCC下，就可以做到读写不阻塞，且避免了类似脏读这样的问题</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>那MVCC是怎么做的呢？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>MVCC通过生成数据快照（Snapshot)，并用这个快照来提供一定级别（语句级或事务级）的一致性读取</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>回到事务隔离级别下，针对于 read commit (读已提交) 隔离级别，它生成的就是语句级快照，而针对于repeatable read (可重复读)，它生成的就是事务级的快照</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-93fe1254a1c756b4ec092e44a2c6de12_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>前面提到过read uncommit隔离级别下会产生脏读，而read commit (读已提交) 隔离级别解决了脏读。思想其实很简单：在读取的时候生成一个”版本号”，等到其他事务commit了之后，才会读取最新已commit的”版本号”数据</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如说：事务A读取了记录(生成版本号)，事务B修改了记录(此时加了写锁)，事务A再读取的时候，是依据最新的版本号来读取的(当事务B执行commit了之后，会生成一个新的版本号)，如果事务B还没有commit，那事务A读取的还是之前版本号的数据</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>通过「版本」的概念，这样就解决了脏读的问题，而「版本」其实就是对应快照的数据</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>read commit (读已提交) 解决了脏读，但也会有其他并发的问题。「不可重复读」：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>不可重复读的例子：A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的】</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>了解MVCC基础之后，就很容易想到repeatable read (可重复复读)隔离级别是怎么避免不可重复读的问题了（前面也提到了）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>repeatable read (可重复复读)隔离级别是「事务级别」的快照！每次读取的都是「当前事务的版本」，即使当前数据被其他事务修改了(commit)，也只会读取当前事务版本的数据</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-7e397fcccc1d5dc2a519b45bf36d334f_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而repeatable read (可重复复读)隔离级别会存在幻读的问题，「幻读」指的是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在InnoDB引擎下的的repeatable read (可重复复读)隔离级别下，快照读MVCC影响下，已经解决了幻读的问题（因为它是读历史版本的数据）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而如果是当前读（指的是 select * from table for update），则需要配合间隙锁来解决幻读的问题</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>剩下的就是serializable (串行)隔离级别了，它的最高的隔离级别，相当于不允许事务的并发，事务与事务之间执行是串行的，它的效率最低，但同时也是最安全的</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，不妨来说下MVCC的原理？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>MVCC的主要是通过read view和undo log来实现的</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-cc344b44fe34fc54ec6c9e2f28a4aa2d_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>undo log前面也提到了，它会记录修改数据之前的信息，事务中的原子性就是通过undo log来实现的。所以，有undo log可以帮我们找到「版本」的数据</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而read view 实际上就是在查询时，InnoDB会生成一个read view，read view 有几个重要的字段，分别是：trx_ids（尚未提交commit的事务版本号集合），up_limit_id（下一次要生成的事务ID值），low_limit_id（尚未提交版本号的事务ID最小值）以及creator_trx_id（当前的事务版本号）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在每行数据有两列隐藏的字段，分别是DB_TRX_ID（记录着当前ID）以及DB_ROLL_PTR（指向上一个版本数据在undo log 里的位置指针）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>铺垫到这了，很容易就发现，MVCC其实就是靠「比对版本」来实现读写不阻塞，而版本的数据存在于undo log中</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>而针对于不同的隔离级别（read commit和repeatable read），无非就是read commit隔离级别下，每次都获取一个新的read view，repeatable read隔离级别则每次事务只获取一个read view</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>嗯，OK的。细节就不考究了，今天就到这里吧</div></div><br/> <h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>事务为了保证数据的最终一致性</li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li><p>事务有四大特性，分别是原子性、一致性、隔离性、持久性</p><ul><li>原子性由undo log保证</li><li>持久性由redo log 保证</li><li>隔离性由数据库隔离级别供我们选择，分别有read uncommit,read commit,repeatable read,serializable</li><li>一致性是事务的目的，一致性由应用程序来保证</li></ul></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ul><li>事务并发会存在各种问题，分别有脏读、重复读、幻读问题，上面的不同隔离级别可以解决掉由于并发事务所造成的问题，而隔离级别实际上就是由MySQL锁来实现的</li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li>频繁加锁会导致数据库性能低下，引入了MVCC多版本控制来实现读写不阻塞，提高数据库性能</li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li>MVCC原理即通过read view 以及undo log来实现</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 对话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 闲谈 1</title>
      <link href="/2022/11/05/MySQL-%E9%97%B2%E8%B0%88-1/"/>
      <url>/2022/11/05/MySQL-%E9%97%B2%E8%B0%88-1/</url>
      
        <content type="html"><![CDATA[<div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span> 对MySQL InnoDB引擎的索引了解吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯啊，使用索引可以加快查询速度，其实就是将无序的数据变成有序（有序就能加快检索速度）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>在InnoDB引擎中，索引的底层数据结构是B+树</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span> 那为什么不使用红黑树或者B树呢？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>MySQL的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>红黑树是「二叉查找树」的变种，一个Node节点只能存储一个Key和一个Value</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>B和B+树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个Node节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低</div></div><br/><div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>了解了区别之后，其实就很容易发现，在数据不能一次加载至内存的场景下，数据需要被检索出来，选择B或B+树的理由就很充分了（一个Node节点存储信息更多（相较于二叉搜索树），树的高度更低，树的高度影响检索的速度）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>B+树相对于B树而言，它又有两种特性</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>一、B+树非叶子节点不存储数据，在相同的数据量下，B+树更加矮壮。（这个应该不用多解释了，数据都存储在叶子节点上，非叶子节点的存储能存储更多的索引，所以整棵树就更加矮壮）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>二、B+树叶子节点之间组成一个链表，方便于遍历查询（遍历操作在MySQL中比较常见）</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-54a18a07f7adfbda09983b815a92c5b8_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我稍微解释一下吧，你可以脑补下画面</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>我们在MySQL InnoDB引擎下，每创建一个索引，相当于生成了一颗B+树</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果该索引是「聚集(聚簇)索引」，那当前B+树的叶子节点存储着「主键和当前行的数据」</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如果该索引是「非聚簇索引」，那当前B+树的叶子节点存储着「主键和当前索引列值」</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>比如写了一句sql：select * from user where id >=10，那只要定位到id为10的记录，然后在叶子节点之间通过遍历链表(叶子节点组成的链表)，即可以找到往后的记录了</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>由于B树是会在非叶子节点也存储数据，要遍历的时候可能就得跨层检索，相对麻烦些</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>基于树的层级以及业务使用场景的特性，所以MySQL选择了B+树作为索引的底层数据结构</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>对于哈希结构，其实InnoDB引擎是「自适应」哈希索引的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，我们是干预不了）</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span> 嗯…那我了解了，顺便想问下，你知道什么叫做回表吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>所谓的回表其实就是，当我们使用索引查询数据时，检索出来的数据可能包含其他列，但走的索引树叶子节点只能查到当前列值以及主键ID，所以需要根据主键ID再去查一遍数据，得到SQL 所需的列</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>举个例子，我这边建了给订单号ID建了个索引，但我的SQL 是：select orderId,orderName from orderdetail where orderId = 123</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>SQL都订单ID索引，但在订单ID的索引树的叶子节点只有orderId和Id，而我们还想检索出orderName，所以MySQL 会拿到ID再去查出orderName给我们返回，这种操作就叫回表</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-2393680d1df54c696f97c8194b34237c_r.jpg"/></div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>想要避免回表，也可以使用覆盖索引（能使用就使用，因为避免了回表操作）</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>所谓的覆盖索引，实际上就是你想要查出的列刚好在叶子节点上都存在，比如我建了orderId和orderName联合索引，刚好我需要查询也是orderId和orderName，这些数据都存在索引树的叶子节点上，就不需要回表操作了</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span> 既然你也提到了联合索引，我想问下你了解最左匹配原则吗？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>嗯，说明这个概念，还是举例子比较容易说明</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c>3 and d=4，则会在每个节点依次命中a、b、c，无法命中d</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>先匹配最左边的，索引只能用于查找key是否存在（相等），遇到范围查询 (>、<、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>这就是最左匹配原则</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-6d6af5c6cfe9be27d1f41af4d7860d3a_r.jpg"/></div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span> 嗯嗯，我还想问下你们主键是怎么生成的？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>主键就自增的</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span> 那假设我不用MySQL自增的主键，你觉得会有什么问题呢？</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>首先主键得保证它的唯一性和空间尽可能短吧，这两块是需要考虑的</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>另外，由于索引的特性（有序），如果生成像uuid类似的主键，那插入的的性能是比自增的要差的</div></div><br/> <div align="right"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span>因为生成的uuid，在插入时有可能需要移动磁盘块（比如，块内的空间在当前时刻已经存储满了，但新生成的uuid需要插入已满的块内，就需要移动块的数据）</div></div><br/> <div align="left"><div style="width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;"></span>OK…</div></div><br/> <div align="right"><div style="width: 80%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center"><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;"></span><span style="width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px"></span><img src="/pictures/MySQL-闲谈/v2-ca51dbec74c22029ebde0650378dfbfd_r.jpg"/></div></div><br/> <h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li><p><strong>为什么B+树？</strong></p><ul><li>数据无法一次load到内存，B+树是多路搜索树，只有叶子节点才存储数据，叶子节点之间链表进行关联。（树矮，易遍历）</li></ul></li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li><p><strong>什么是回表？</strong></p><ul><li>非聚簇索引在叶子节点只存储列值以及主键ID，有条件下尽可能用覆盖索引避免回表操作，提高查询速度</li></ul></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ul><li><p><strong>什么是最左匹配原则？</strong></p><ul><li>从最左边为起点开始连续匹配，遇到范围查询终止</li></ul></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li><p><strong>主键非自增会有什么问题？</strong></p><ul><li>插入效率下降，存在移动块的数据问题</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 对话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 对话框</title>
      <link href="/2022/11/05/Markdown-%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/05/Markdown-%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-只有左右框"><a href="#1-只有左右框" class="headerlink" title="1. 只有左右框"></a>1. 只有左右框</h3><img src="/pictures/markdown-对话框/2022.11.05.21.09.58.png"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:47%; border-style:solid; border-width:1px; border-radius:15px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;margin:5%&quot;</span>&gt;</span></span><br><span class="line">这是右边</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">###### </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:47%; border-style:solid; border-width:1px; border-radius:15px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;margin:5%&quot;</span>&gt;</span></span><br><span class="line">这是左边</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br/><h3 id="2-带有箭头的左右框"><a href="#2-带有箭头的左右框" class="headerlink" title="2. 带有箭头的左右框"></a>2. 带有箭头的左右框</h3><img src="/pictures/markdown-对话框/2022.11.07.17.19.38.png"/><br/><ul><li><p>写法一</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div-diabox</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>:center</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div-diabox</span> <span class="selector-class">.arrow-right-out</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: transparent transparent transparent black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div-diabox</span> <span class="selector-class">.arrow-right-in</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: transparent transparent transparent white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: -<span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div-diabox</span> <span class="selector-class">.arrow-left-out</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: transparent black transparent transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div-diabox</span> <span class="selector-class">.arrow-left-in</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: transparent white transparent transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: -<span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-diabox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arrow-right-out&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arrow-right-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">右边</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-diabox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arrow-left-out&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arrow-left-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">左边</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写法二</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent black; border-width: 10px; position: absolute; top: 10px; right: -20px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent transparent transparent white; border-width: 10px; position: absolute; top: 10px; right: -19px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">右边</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%; border-style: solid; border-width: 1px; border-radius: 16px; position: relative; padding:30px; text-align:center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent black transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -20px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;width: 0px; height: 0px; border-style: solid; border-color: transparent white transparent transparent; border-width: 10px; position: absolute; top: 10px; left: -19px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">左边</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看硬盘空间</title>
      <link href="/2022/11/05/Linux-%E6%9F%A5%E7%9C%8B%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4/"/>
      <url>/2022/11/05/Linux-%E6%9F%A5%E7%9C%8B%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh ./*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLC Linux 安装在自定义目录</title>
      <link href="/2022/11/05/VLC-Linux-%E5%AE%89%E8%A3%85%E5%9C%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/11/05/VLC-Linux-%E5%AE%89%E8%A3%85%E5%9C%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>apt 只下载包及其依赖而不安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get install -d &lt;软件包&gt;</span><br><span class="line">sudo apt-get install -d vlc</span><br></pre></td></tr></table></figure><p>这将会下载到这个目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/cache/apt/archives/</span><br></pre></td></tr></table></figure><p>为了只是获得想要的包和依赖，应该先清空这个目录再下载</p><p>将 <strong>&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;</strong> 的包以及依赖移到某一个目录保存</p><p>然后把这些包安装到指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for file in packagesPath:</span><br><span class="line">do </span><br><span class="line">echo $file</span><br><span class="line">sudo dpkg -x $file customInstallPath</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在 customInstallPath 下编写一个启动脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">HERE=&quot;$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)&quot;</span><br><span class="line">export UNION_PRELOAD=$HERE</span><br><span class="line">export LD_PRELOAD=$HERE/libunionpreload.so</span><br><span class="line">export PATH=$HERE/usr/bin/:$HERE/usr/sbin/:$HERE/usr/games/:$HERE/bin/:$HERE/opt/vlc/:$HERE/sbin/:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$HERE/usr/lib/:$HERE/usr/lib/x86_64-linux-gnu/:$HERE/lib/:$HERE/lib/x86_64-linux-gnu/:$HERE/usr/lib/x86_64-linux-gnu/vlc/:$LD_LIBRARY_PATH</span><br><span class="line">export QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/:$HERE/usr/lib/x86_64-linux-gnu/qt5/plugins/:$QT_PLUGIN_PATH</span><br><span class="line">export XDG_DATA_DIRS=$HERE/usr/share/:$XDG_DATA_DIRS</span><br><span class="line">exec $HERE/usr/bin/vlc &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>保存并赋予这个启动脚本执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x launch.sh</span><br></pre></td></tr></table></figure><p>执行 launch.sh 就可以运行 vlc 了</p><p>这个脚本里面的 bash 变量是程序内部执行需要的变量，并不是环境变量，只有知道软件构建运行的源码才可以写出来，所以这个脚本并不是通用的，只适合 vlc</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wayland Wemeet</title>
      <link href="/2022/11/05/wayland-wemeet/"/>
      <url>/2022/11/05/wayland-wemeet/</url>
      
        <content type="html"><![CDATA[<p>腾讯会议不支持 Wayland</p><img src="/pictures/wayland-wemeet/2022-04-19-13-25-31屏幕截图.png"/><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>解决方法</p><ul><li><p>进入 &#x2F;opt&#x2F;wemeet 目录</p></li><li><p>编辑 wemeetapp.sh 文件</p></li><li><p>在 export QT_PLUGIN_PATH&#x3D;”${HERE}&#x2F;plugins” 后添加如下三行代码后保存</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export XDG_SESSION_TYPE=x11</span><br><span class="line">export QT_QPA_PLATFORM=xcb</span><br><span class="line">unset WAYLAND_DISPLAY</span><br></pre></td></tr></table></figure></li><li><p>重启即可</p></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p>缺点</p><ul><li>由于 Wayland 的限制，腾讯会议现在无法捕捉到屏幕，自然“共享屏幕”也就失效了，实际效果是当尝试共享屏幕时，共享的是 pure black</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Wayland </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MARO Distibuted Toolkit</title>
      <link href="/2022/11/04/MARO-Distibuted-toolkit/"/>
      <url>/2022/11/04/MARO-Distibuted-toolkit/</url>
      
        <content type="html"><![CDATA[<h3 id="MARO-三层框架"><a href="#MARO-三层框架" class="headerlink" title="MARO 三层框架"></a>MARO 三层框架</h3><img src="/pictures/maro-distributed-toolkit/maro_overview.svg"/><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="接下来展示的是第三层-Distibuted-toolkit"><a href="#接下来展示的是第三层-Distibuted-toolkit" class="headerlink" title="接下来展示的是第三层 Distibuted toolkit"></a>接下来展示的是第三层 Distibuted toolkit</h4><img src="/pictures/maro-distributed-toolkit/overview.svg"/><ul><li><p>MARO Distibuted Toolkit 遵循 message-passing 模式，即不同组件之间的协作基于消息<strong>发送</strong>和<strong>接收</strong></p></li><li><p>典型的 <strong>master&#x2F;worker</strong> 分布式程序通常包含以下步骤</p><ul><li>master 会将任务（w&#x2F; or w&#x2F;o data）发送到 worker</li><li>worker 将在其本地计算环境或本地设备中完成任务</li><li>worker 将计算结果返回到 master</li></ul></li></ul><img src="/pictures/maro-distributed-toolkit/v2-b5f0db269480aceb6590007f8ad9dfe8_r.jpg" style="zoom:40%"/>    <ul><li>根据实际需要，主控组件和工作组件之间的通信方式可以是同步的，也可以是异步的</li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h4 id="关键部件"><a href="#关键部件" class="headerlink" title="关键部件"></a>关键部件</h4><img src="/pictures/maro-distributed-toolkit/key_components.svg"/> <ul><li><h5 id="Comunication"><a href="#Comunication" class="headerlink" title="Comunication"></a>Comunication</h5><ul><li><h5 id="大致功能预览"><a href="#大致功能预览" class="headerlink" title="大致功能预览"></a>大致功能预览</h5><ul><li><p>提供通用的消息传递接口</p><ul><li>send, receive</li><li>broadcast</li><li>scatter</li></ul></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li><p>通信组件使用<strong>可替换</strong>的通信协议驱动程序来适应不同的通信协议栈</p><ul><li>TCP&#x2F;IP</li><li>InfiniBand</li></ul></li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li><p>Peer Discovering</p></li><li><p>部分故障恢复</p></li><li><p>条件事件自动调度</p></li></ul></li></ul><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><ul><li><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5>  <img src="/pictures/maro-distributed-toolkit/proxy.svg"/><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><ul><li>Proxy 提供通信原语的实现，是通信操作接口，是通信组件的主要实体</li><li>Proxy 默认使用 ZeroMQ 框架</li><li>Proxy 为基于 Redis 的 peer discovering 提供支持</li><li>分布式通信原语常见操作如下<h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><ul><li><p><strong>Broadcast</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-c9aa7762a6ec00d370c58de183441362_r.jpg"/>  <img src="/pictures/maro-distributed-toolkit/v2-1ff295f93679ebe9a03ad510259ead8b_r.jpg"/></li></ul><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><h6 id="-9"><a href="#-9" class="headerlink" title=""></a></h6><ul><li><p><strong>Scatter</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-be03c436a4f699aa001deb4490f33813_r.jpg"/>  <img src="/pictures/maro-distributed-toolkit/v2-f17bd118677f919e255d5b1689fc66dc_r.jpg"/></li></ul><h6 id="-10"><a href="#-10" class="headerlink" title=""></a></h6><h6 id="-11"><a href="#-11" class="headerlink" title=""></a></h6><h6 id="-12"><a href="#-12" class="headerlink" title=""></a></h6><ul><li><p><strong>Reduce (强调聚合之后处理)</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-466054a11a994842eb1b062b13b9bde3_r.png"/>    <img src="/pictures/maro-distributed-toolkit/v2-c7bdad601780f9798a62c2dfb1bbef4d_r.jpg"/></li></ul><h6 id="-13"><a href="#-13" class="headerlink" title=""></a></h6><h6 id="-14"><a href="#-14" class="headerlink" title=""></a></h6><h6 id="-15"><a href="#-15" class="headerlink" title=""></a></h6><ul><li><p><strong>Gather (单纯聚合没有额外处理)</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-3b2ec50810fc8d92971a4b7c0b800b1b_r.jpg"/>  <img src="/pictures/maro-distributed-toolkit/v2-dc3fcf248c39b4a76947bcea140840d1_720w.webp"/></li></ul><h6 id="-16"><a href="#-16" class="headerlink" title=""></a></h6><h6 id="-17"><a href="#-17" class="headerlink" title=""></a></h6><h6 id="-18"><a href="#-18" class="headerlink" title=""></a></h6><ul><li><p><strong>All Reduce</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-0e90f4c9b66d42dfa41145d3b6a52361_r.jpg"/>  <img src="/pictures/maro-distributed-toolkit/v2-80b1bd60a2fdefb19f792fdf193c6d76_r.jpg"/></li></ul><h6 id="-19"><a href="#-19" class="headerlink" title=""></a></h6><h6 id="-20"><a href="#-20" class="headerlink" title=""></a></h6><h6 id="-21"><a href="#-21" class="headerlink" title=""></a></h6><ul><li><p><strong>All Gather</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-ce5261aec55090a1f9e9dd5233b22af9_r.jpg"/>    <img src="/pictures/maro-distributed-toolkit/v2-831e0b04646c78f9e74bf4f29c35b8af_720w.webp"/></li></ul><h6 id="-22"><a href="#-22" class="headerlink" title=""></a></h6><h6 id="-23"><a href="#-23" class="headerlink" title=""></a></h6><h6 id="-24"><a href="#-24" class="headerlink" title=""></a></h6><ul><li><p><strong>Reduce Scatter</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-14cdd631faae00452885a116dd36737c_720w.webp"/></li></ul><h6 id="-25"><a href="#-25" class="headerlink" title=""></a></h6><h6 id="-26"><a href="#-26" class="headerlink" title=""></a></h6><h6 id="-27"><a href="#-27" class="headerlink" title=""></a></h6><ul><li><p><strong>All to All</strong></p>  <img src="/pictures/maro-distributed-toolkit/v2-945ffd7612632fa88ed2bc68ec832071_r.jpg"/></li></ul></li></ul></li></ul><h6 id="-28"><a href="#-28" class="headerlink" title=""></a></h6><ul><li><p><strong>Message</strong></p><ul><li><p>用于打包组件之间的通信内容，消息实例的主要属性包括</p><ul><li>tag：自定义属性，可用于通过 <strong>conditional event register table</strong> 实现自动调度逻辑</li><li>source：message 发送者的别名</li><li>destination：message 接收者的别名</li><li>payload：用于远程函数调用的 Python 对象</li><li>session_id（自动生成）：特定会话的 UUID ，一个会话可能包含多条消息</li><li>message_id（自动生成）：特定消息的 UUID</li></ul></li></ul><h6 id="-29"><a href="#-29" class="headerlink" title=""></a></h6><ul><li><p>Example</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maro.communication <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">message = Message(tag=<span class="string">&quot;check_in&quot;</span>,</span><br><span class="line">                  source=<span class="string">&quot;worker_001&quot;</span>,</span><br><span class="line">                  destination=<span class="string">&quot;master&quot;</span>,</span><br><span class="line">                  body=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="-30"><a href="#-30" class="headerlink" title=""></a></h6><ul><li><p><strong>Session Message</strong></p><ul><li><p>MARO 为常见的分布式场景提供了两种预定义的会话类型</p><ul><li><p><strong>Task Session</strong></p><ul><li><p>存在 master 和 worker 关系</p></li><li><p>用于描述从 master 发送到 worker 的 computing task</p><ul><li>master 将 task 发送给 worker</li><li>一旦 worker 收到 task ，worker 就开始执行 task</li><li>worker 将 computing result 返回给 master</li></ul></li></ul></li></ul><h6 id="-31"><a href="#-31" class="headerlink" title=""></a></h6><ul><li><p><strong>Notification Session</strong></p><ul><li><p>sender 和 receiver 关系</p></li><li><p>用于信息同步</p><ul><li>sender 发送 notification message</li><li>receiver 接收 notification message</li></ul></li></ul></li></ul></li></ul><h6 id="-32"><a href="#-32" class="headerlink" title=""></a></h6><ul><li>session 的每个阶段由 proxy 在内部维护</li><li>Example  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maro.communication <span class="keyword">import</span> SessionMessage, SessionType</span><br><span class="line"></span><br><span class="line">task_message = SessionMessage(tag=<span class="string">&quot;sum&quot;</span>,</span><br><span class="line">                              source=<span class="string">&quot;master&quot;</span>,</span><br><span class="line">                              destination=<span class="string">&quot;worker_001&quot;</span>,</span><br><span class="line">                              body=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, ...],</span><br><span class="line">                              session_type=SessionType.TASK)</span><br><span class="line"></span><br><span class="line">notification_message = SessionMessage(tag=<span class="string">&quot;check_out&quot;</span>,</span><br><span class="line">                                      source=<span class="string">&quot;worker_001&quot;</span>,</span><br><span class="line">                                      destination=<span class="string">&quot;master&quot;</span>,</span><br><span class="line">                                      body=<span class="string">&quot;&quot;</span>,</span><br><span class="line">                                      session_type=SessionType.NOTIFICATION)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="-33"><a href="#-33" class="headerlink" title=""></a></h6><ul><li><h5 id="MARO-通信原语实际接口"><a href="#MARO-通信原语实际接口" class="headerlink" title="MARO 通信原语实际接口"></a>MARO 通信原语实际接口</h5><ul><li>receive：用于持续接收消息<br>  receive_by_id：仅接收具有给定 session ID 的消息</li><li>send：单播，这是一种阻塞、一对一的发送模式，监视并收集来自远程对等方的回复消息   </li><li>isend：非阻塞版的 send ，将立即返回 message session ID，该 ID 可由  receive_by_id 使用</li><li>scatter：send 的高级版本，用于向 peer 发送消息，并监视和收集来自 peer 的回复消息，不是真正的多播，每条消息都会经过完整的 TCP&#x2F;IP 堆栈（ZeroMQ driver），如果要发送的消息完全相同，并且想要更好的性能，请改用 broadcast 接口</li><li>iscatter：非阻塞版本的 scatter ，message session ID 将立即返回，可由 receive_by_id 使用</li><li>broadcast：阻塞，用于向所有订阅者广播消息，将监视并收集所有订阅者的回复消息</li><li>ibroadcast：非阻塞版本的 broadcast ，相关 message session ID 将立即返回，可供 receive_by_id 使用</li></ul></li></ul><h6 id="-34"><a href="#-34" class="headerlink" title=""></a></h6><ul><li><h5 id="Conditional-Event-Register-Table"><a href="#Conditional-Event-Register-Table" class="headerlink" title="Conditional Event Register Table"></a>Conditional Event Register Table</h5><ul><li>提供消息自动发送机制</li><li>通过将 conditional event 和相关的 handler function 注册到注册表中，当 conditional event 满足时，handler function 将与接收到的消息一起自动执行</li></ul><h6 id="-35"><a href="#-35" class="headerlink" title=""></a></h6>  <img src="/pictures/maro-distributed-toolkit/register_table.register.svg"/>  <h6 id="-36"><a href="#-36" class="headerlink" title=""></a></h6><ul><li><p>conditional event 用于声明自动触发相关 handler function 所需的消息组</p></li><li><p>unit event 是条件事件中的最小组件，声明格式分三段</p><ul><li>source：用于声明所需的消息源</li><li>tag：消息实例的属性</li><li>amount：所需的消息实例量</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unit_event_abs = <span class="string">&quot;worker:update:10&quot;</span></span><br><span class="line"></span><br><span class="line">unit_event_rel = <span class="string">&quot;worker:update:60%&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>AND OR 操作支持更复杂的业务逻辑</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">combined_event_and = (<span class="string">&quot;worker_01:update:2&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;worker_02:update:3&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;AND&quot;</span>)</span><br><span class="line"></span><br><span class="line">combined_event_or = (<span class="string">&quot;worker_03:update:1&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;worker_04:update:5&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;OR&quot;</span>)</span><br><span class="line"></span><br><span class="line">combined_event_mix = ((<span class="string">&quot;worker_01:update:2&quot;</span>, <span class="string">&quot;worker_02:update:3&quot;</span>, <span class="string">&quot;AND&quot;</span>),</span><br><span class="line">                      <span class="string">&quot;worker_03:update:1&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;OR&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Handler function 是绑定到特定 conditional event 的用户定义的回调函数，当满足事件的条件时，相关消息将被发送到处理程序函数执行</p>  <img src="/pictures/maro-distributed-toolkit/register_table.trigger.svg"/>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A common handler function signature</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">that, proxy, messages</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Conditional event handler function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            that: local instance reference, which needs to be operated.</span></span><br><span class="line"><span class="string">            proxy: the proxy reference for remote communication.</span></span><br><span class="line"><span class="string">            messages: received messages.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="-37"><a href="#-37" class="headerlink" title=""></a></h6><ul><li><h5 id="Distributed-Decorator"><a href="#Distributed-Decorator" class="headerlink" title="Distributed Decorator"></a>Distributed Decorator</h5><ul><li><p>从本地函数类生成分布式 worker 类的帮助程序</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maro.communication <span class="keyword">import</span> dist, Proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize proxy instance for remote communication.</span></span><br><span class="line">proxy = Proxy(group_name=<span class="string">&quot;master-worker&quot;</span>,</span><br><span class="line">              component_type=<span class="string">&quot;worker&quot;</span>,</span><br><span class="line">              expected_peers=[(<span class="string">&quot;master&quot;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare the trigger condition of rollout event.</span></span><br><span class="line">rollout_event = <span class="string">&quot;master:rollout:1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Implement rollout event handler logic.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_rollout</span>(<span class="params">that, proxy, messages</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assemble event-handler directory.</span></span><br><span class="line">handler_dict = &#123;rollout_event: on_rollout&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert a local functional class to a distributed one.</span></span><br><span class="line"><span class="meta">@dist(<span class="params">proxy, handler_dict</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><br/><h3 style="display:flex"><span align="left" style="width:50%">PRE : <a href="/2022/10/26/%E5%88%9D%E8%AF%86-MARO/" title="初识 MARO">初识 MARO</a></span><span align="right" style="width:50%">NEXT : <a href="/2022/10/27/MARO-VM-%E8%B0%83%E5%BA%A6/" title="MARO VM 调度">MARO VM 调度</a></span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> MARO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM 配置</title>
      <link href="/2022/10/29/VIM-%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/10/29/VIM-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="VIM-配置说明"><a href="#VIM-配置说明" class="headerlink" title="VIM 配置说明"></a>VIM 配置说明</h3><ol><li><p>安装 neovim 可以直接从 github 下载 appimage</p></li><li><p>配置 neovim 首次启动使用 :checkhealth 查看配置的路径等信息</p></li><li><p>coc.nvim 的 LSP 服务需要 npm （ node.js ）提供支持，npm 安装的时候可以从官方网站那里下载然后安装到指定 path，之后的 -g 安装 npm 包的时候包会安装在安装 npm 的目录下面</p></li><li><p>注意这个 coc-setting.json 这个在安装了 coc.nvim 之后可以 :CocConfig 来进行编辑，json 里面这一句话一定要加上，解决了初次 tab 选中的问题</p></li><li><p>配置文件 init.vim 位于 &#x2F;home&#x2F;asleep&#x2F;.config&#x2F;nvim 下，coc-settings.json 也是在这个路径下面</p></li><li><p>vimplug 管理插件，这里有点特殊，这里我将其他插件安装在与 vimplug 的 plug.vim 同一个目录下面，即  &#x2F;home&#x2F;asleep&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;autoload</p></li><li><p>安装各种插件之前，应该要了解各个插件的依赖</p></li><li><p>至于 vimplug 的安装，只需要把 github 上面的那个 plug.vim 文件弄下来放在上面说的那个 path 下面就可以调用 :PlugInstall，不用整个仓库弄下来</p></li><li><p>至于 coc 的插件，coc.nvim 是一个插件管理器，coc.nvim 管理的插件在 &#x2F;home&#x2F;asleep&#x2F;.config&#x2F;coc&#x2F;extensions 下面</p></li><li><p>综上所述，如果要迁移 nvim 及其配置，只需要复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/home/asleep/.config/coc/extensions   “coc-extensions”</span><br><span class="line"></span><br><span class="line">/home/asleep/.config/nvim   “coc-settings.json”  “init.vim“</span><br><span class="line"></span><br><span class="line">/home/asleep/.local/share/nvim/site/autoload   “plug.vim” “vim-plug extensions”</span><br></pre></td></tr></table></figure></li><li><p>这三个路径下的文件就可以完成迁移 </p></li><li><p>每次修改 init.vim 之后，都要 :so % 即 :source init.vim 生效</p></li></ol><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h3 id="coc-setting-json"><a href="#coc-setting-json" class="headerlink" title="coc-setting.json"></a>coc-setting.json</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;suggest.noselect&quot;: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h3 id="init-vim-已启用的配置"><a href="#init-vim-已启用的配置" class="headerlink" title="init.vim 已启用的配置"></a>init.vim 已启用的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot; ---------------------------------------------common-start----------------------------------------------------</span><br><span class="line">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">set number</span><br><span class="line">set mouse=c</span><br><span class="line">set tabstop=4</span><br><span class="line">set autoindent</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">set hlsearch</span><br><span class="line">set clipboard+=unnamedplus</span><br><span class="line">set foldmethod=syntax</span><br><span class="line">set nofoldenable</span><br><span class="line">&quot; 自动同步</span><br><span class="line">set autoread</span><br><span class="line">set fillchars=eob:\ </span><br><span class="line"></span><br><span class="line">&quot; Vim jump to the last position when reopening a file</span><br><span class="line">if has(&quot;autocmd&quot;)</span><br><span class="line">  au BufReadPost * if line(&quot;&#x27;\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&#x27;\&quot;&quot; | endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function! ESC_IMAP()</span><br><span class="line">    let l:frontChar = getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 2]</span><br><span class="line">    if l:frontChar == &quot;;&quot; </span><br><span class="line">        call feedkeys(&quot;\&lt;BS&gt;\&lt;BS&gt;\&lt;ESC&gt;&quot;, &#x27;n&#x27;)</span><br><span class="line">    else</span><br><span class="line">        call feedkeys(&quot;\&lt;BS&gt;\;&quot;, &#x27;n&#x27;)</span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line">inoremap &lt;expr&gt; ; ESC_IMAP()</span><br><span class="line"></span><br><span class="line">set timeoutlen=200</span><br><span class="line"></span><br><span class="line">nnoremap ;; &lt;ESC&gt;</span><br><span class="line">vnoremap ;; &lt;ESC&gt;</span><br><span class="line">snoremap ;; &lt;ESC&gt;</span><br><span class="line">xnoremap ;; &lt;ESC&gt;</span><br><span class="line">cnoremap ;; &lt;ESC&gt;</span><br><span class="line">onoremap ;; &lt;ESC&gt;</span><br><span class="line"></span><br><span class="line">&quot; exit windows</span><br><span class="line">tnoremap ;; &lt;C-\&gt;&lt;C-n&gt;</span><br><span class="line"></span><br><span class="line">&quot; switch windows</span><br><span class="line">nnoremap &lt;TAB&gt; &lt;C-w&gt;w</span><br><span class="line">nnoremap vv &lt;C-v&gt;</span><br><span class="line"></span><br><span class="line">echo expand(&quot;%:p:h&quot;)</span><br><span class="line"></span><br><span class="line">cnoreabbrev fd echo expand(&quot;%:p:h&quot;)</span><br><span class="line">cnoreabbrev vst vs&lt;ENTER&gt;:term</span><br><span class="line">cnoreabbrev spt sp&lt;ENTER&gt;:term</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; -------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;-----------------------------------------------common-end----------------------------------------------------</span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;</span><br><span class="line">&quot;</span><br><span class="line">&quot;</span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;--------------------------------------------vim-plug-start---------------------------------------------------</span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#begin(&#x27;/home/asleep/.local/share/nvim/site/autoload&#x27;)</span><br><span class="line">Plug &#x27;itchyny/lightline.vim&#x27;</span><br><span class="line">Plug &#x27;joshdick/onedark.vim&#x27;</span><br><span class="line">Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class="line">Plug &#x27;jiangmiao/auto-pairs&#x27;</span><br><span class="line">Plug &#x27;ms-jpq/chadtree&#x27;, &#123;&#x27;branch&#x27;: &#x27;chad&#x27;, &#x27;do&#x27;: &#x27;python3 -m chadtree deps&#x27;&#125;</span><br><span class="line">Plug &#x27;sheerun/vim-polyglot&#x27;</span><br><span class="line">Plug &#x27;Yggdroot/LeaderF&#x27;, &#123; &#x27;do&#x27;: &#x27;:LeaderfInstallCExtension&#x27; &#125;</span><br><span class="line">Plug &#x27;tpope/vim-fugitive&#x27;</span><br><span class="line">Plug &#x27;sbdchd/neoformat&#x27;</span><br><span class="line">Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#x27;cd app &amp;&amp; yarn install&#x27; &#125;</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">&quot;有些插件需要安装 nerd fonts！</span><br><span class="line">&quot;nerd fonts 包括了 powerline fonts！</span><br><span class="line">&quot;建议安装 DejaVuSansMonoNerd！</span><br><span class="line"></span><br><span class="line">&quot;这个是 LeaderF 的设置</span><br><span class="line">let g:Lf_WindowPosition = &#x27;popup&#x27;</span><br><span class="line">cnoreabbrev ff LeaderfFile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cnoreabbrev fm Neoformat</span><br><span class="line"></span><br><span class="line">cnoreabbrev mt MarkdownPreviewToggle</span><br><span class="line">let g:mkdp_theme = &quot;light&quot;</span><br><span class="line"></span><br><span class="line">&quot;这个是 chadtree 的设置</span><br><span class="line">&quot;明确指定绑定的键之后，就不会使用默认的键</span><br><span class="line">let g:chadtree_settings = &#123;</span><br><span class="line">  \ &#x27;keymap.change_focus_up&#x27;: [&quot;..&quot;],</span><br><span class="line">  \ &#x27;keymap.secondary&#x27;: [&quot;&lt;2-leftmouse&gt;&quot;]</span><br><span class="line">\&#125;</span><br><span class="line"></span><br><span class="line">nnoremap &lt;F2&gt; :CHADopen&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">let g:onedark_terminal_italics=1</span><br><span class="line">autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE </span><br><span class="line">colorscheme onedark</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let g:lightline = &#123;</span><br><span class="line">      \&#x27;colorscheme&#x27; : &#x27;onedark&#x27;,</span><br><span class="line">      \ &#x27;separator&#x27;: &#123; &#x27;left&#x27;: &#x27;&#x27;, &#x27;right&#x27;: &#x27;&#x27; &#125;,</span><br><span class="line">      \ &#x27;subseparator&#x27;: &#123; &#x27;left&#x27;: &#x27;&#x27;, &#x27;right&#x27;: &#x27;&#x27; &#125;,</span><br><span class="line">      \ &#x27;component&#x27;: &#123;</span><br><span class="line">            \ &#x27;lineinfo&#x27;: &#x27; %3l / %L : %-2v&#x27;,</span><br><span class="line">            \ &#125;, </span><br><span class="line">      \ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;-----------------------------------------------vim-plug-end--------------------------------------------------</span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;------------------------------------------------coc-start----------------------------------------------------</span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt; coc#pum#visible() ? coc#pum#next(1) :&quot;\&lt;Tab&gt;&quot; </span><br><span class="line"></span><br><span class="line">nnoremap gd &lt;Plug&gt;(coc-definition)</span><br><span class="line">nnoremap gt &lt;Plug&gt;(coc-type-definition)</span><br><span class="line">nnoremap gi &lt;Plug&gt;(coc-implementation)</span><br><span class="line">nnoremap gr &lt;Plug&gt;(coc-references)</span><br><span class="line"></span><br><span class="line">&quot; Use K to show documentation in preview window.</span><br><span class="line">function! ShowDocumentation()</span><br><span class="line">  if CocAction(&#x27;hasProvider&#x27;, &#x27;hover&#x27;)</span><br><span class="line">    call CocActionAsync(&#x27;doHover&#x27;)</span><br><span class="line">  else</span><br><span class="line">    call feedkeys(&#x27;K&#x27;, &#x27;in&#x27;)</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line">nnoremap &lt;silent&gt; K :call ShowDocumentation()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; Highlight the symbol and its references when holding the cursor.</span><br><span class="line">autocmd CursorHold * silent call CocActionAsync(&#x27;highlight&#x27;)</span><br><span class="line"></span><br><span class="line">&quot; Symbol renaming.</span><br><span class="line">nnoremap &lt;space&gt;r &lt;Plug&gt;(coc-rename)</span><br><span class="line"></span><br><span class="line">&quot; Show all diagnostics.</span><br><span class="line">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; Manage extensions.</span><br><span class="line">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; Find symbol of current document.</span><br><span class="line">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;-------------------------------------------------coc-end-----------------------------------------------------</span><br><span class="line">&quot;-------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><h3 id="init-vim-未启用的配置"><a href="#init-vim-未启用的配置" class="headerlink" title="init.vim 未启用的配置"></a>init.vim 未启用的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;&quot;----------------------------------------------netrw_start----------------------------------------------------</span><br><span class="line">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;let g:netrw_banner = 0</span><br><span class="line">&quot;&quot;let g:netrw_liststyle = 3</span><br><span class="line">&quot;&quot;let g:netrw_browse_split = 4</span><br><span class="line">&quot;&quot;let g:netrw_altv = 1</span><br><span class="line">&quot;&quot;let g:netrw_winsize = 15</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;set autochdir</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;&quot; Toggle Vexplore with &lt;F2&gt;</span><br><span class="line">&quot;&quot;function! ToggleVExplorer()</span><br><span class="line">&quot;&quot;    if exists(&quot;t:expl_buf_num&quot;)</span><br><span class="line">&quot;&quot;        let expl_win_num = bufwinnr(t:expl_buf_num)</span><br><span class="line">&quot;&quot;        let cur_win_num = winnr()</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;        if expl_win_num != -1</span><br><span class="line">&quot;&quot;            while expl_win_num != cur_win_num</span><br><span class="line">&quot;&quot;                exec &quot;wincmd w&quot;</span><br><span class="line">&quot;&quot;                let cur_win_num = winnr()</span><br><span class="line">&quot;&quot;            endwhile</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;            close</span><br><span class="line">&quot;&quot;        endif</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;        unlet t:expl_buf_num</span><br><span class="line">&quot;&quot;    else</span><br><span class="line">&quot;&quot;         Vexplore</span><br><span class="line">&quot;&quot;         let t:expl_buf_num = bufnr(&quot;%&quot;)</span><br><span class="line">&quot;&quot;    endif</span><br><span class="line">&quot;&quot;endfunction</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;map &lt;F2&gt; :call ToggleVExplorer()&lt;CR&gt;</span><br><span class="line">&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot; 状态栏无插件设置</span><br><span class="line">&quot;&quot;hi VertSplit ctermfg=NONE ctermbg=NONE cterm=NONE</span><br><span class="line">&quot;&quot;set fillchars=vert:\ </span><br><span class="line">&quot;&quot;&quot;&quot;set fillchars=vert:\│</span><br><span class="line">&quot;&quot;set statusline=%*\ %.50F\               &quot;显示文件名和文件路径</span><br><span class="line">&quot;&quot;set statusline+=%=%y%m%r%h%w\ %*        &quot;显示文件类型及文件状态</span><br><span class="line">&quot;&quot;set statusline+=%&#123;&amp;ff&#125;\[%&#123;&amp;fenc&#125;]\ %*   &quot;显示文件编码类型</span><br><span class="line">&quot;&quot;set statusline+=%l/%L,%c\ %*            &quot;显示光标所在行和列</span><br><span class="line">&quot;&quot;set statusline+=%3p%%                   &quot;显示光标前文本所占总文本的比例</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;hi Statusline ctermfg=NONE ctermbg=NONE cterm=bold </span><br><span class="line">&quot;&quot;hi StatuslineNC ctermfg=NONE ctermbg=NONE cterm=NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br><span class="line">&quot;&quot;-----------------------------------------------netrw-end-----------------------------------------------------</span><br><span class="line">&quot;&quot;-------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MARO VM 调度</title>
      <link href="/2022/10/27/MARO-VM-%E8%B0%83%E5%BA%A6/"/>
      <url>/2022/10/27/MARO-VM-%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>在云服务期间，用户请求具有一定数量资源的 <strong>虚拟机（VM）（Virtual Mechine）</strong>，例如中央处理器、内存等</li><li>假设一个特定的时间，VM 请求的数量和到达模式是固定的，给定一个物理资源有限的 <strong>物理机（PM）（Physical Mechine）</strong> 集群</li><li>不同的 VM 分配策略导致数据中心的成功完成量不同，运营成本也不同</li><li>对于云提供商，一个好的 VM 分配策略可以最大限度地提高资源利用率，从而可以通过向用户提供更多的 VM 来增加利润</li><li>对于云用户，良好的 VM 分配策略可以最大程度地缩短 VM 响应时间，并提供更好的使用体验</li></ul><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h3 id="资源供需"><a href="#资源供需" class="headerlink" title="资源供需"></a>资源供需</h3><img src="/pictures/maro-vm-调度/2022.10.27.20.00.43.png"/><ul><li><p>每个 <strong>PM</strong> 中的物理资源是中心资源，包括 <strong>物理内核</strong> 和 <strong>内存</strong></p><ul><li>VM 请求需要一定数量的 <strong>物理资源</strong> ，资源要求因不同的 VM 请求而异 </li><li>只要指定的 PM 的剩余资源足够，<strong>模拟器</strong> 就会将 VM 分配到指定 PM ，VM 会在指定 PM 中创建 </li><li>VM 的资源利用率动态变化，PM 的实时能耗将在 <strong>Runtime-Simulation（模拟器）</strong> 中被模拟出来</li><li>VM 执行一段时间后完成其任务，<strong>模拟器</strong> 将释放分配给此 VM 的资源，并从 PM 中解除分配此 VM ，物理资源被释放，可以处理下一个 VM 请求</li></ul></li></ul><img src="/pictures/maro-vm-调度/2022.10.28.15.14.52.png"/><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h3 id="VM-Request"><a href="#VM-Request" class="headerlink" title="VM Request"></a>VM Request</h3><ul><li>MARO 和机器学习算法原理类似，需要 <strong>样本数据</strong> 训练出 <strong>模型（找出当前场景的规律）</strong>，再通过模型去 <strong>预测</strong> 怎样的行为更加正确符合实际</li><li>VM scheduling 场景里面，<strong>样本数据</strong> 是 VM Request<strong>s</strong> ，样本数据从实际工作负荷中统一采样</li><li>只要原始数据集足够大，采样率不太小，采样的 VM Requests<strong>（复数名词）</strong> 就可以被认为遵循与原始请求类似的分布</li><li>一个 VM Request 包含 <strong>VM 信息</strong>（如 订阅 ID、部署 ID 和 VM 类别）、<strong>VM 的所需资源</strong>（包括所需的 CPU 核心数和内存）以及 <strong>剩余缓冲时间（remaining buffer time）</strong></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><h3 id="VM-类型"><a href="#VM-类型" class="headerlink" title="VM 类型"></a>VM 类型</h3><ul><li><p>交互式</p><ul><li>交互式 VM 通常需要较低的响应时间，因此设置此类 VM 只能分配给不可超额订阅的 PM 服务器</li></ul></li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li><p>延迟不敏感</p><ul><li>不区分延迟的 VM 通常用于批处理任务或开发工作负荷，可以将此类 VM 分配给可过度订阅的 PM 服务器</li></ul></li></ul><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><h3 id="VM-分配"><a href="#VM-分配" class="headerlink" title="VM 分配"></a>VM 分配</h3><ul><li><p>根据 <strong>有效的 PM 列表</strong> ，<strong>模拟器记录的历史信息</strong> 以及 <strong>VM 的详细所需资源</strong> ，<strong>VM 调度器（决策代理）</strong> 将根据其分配策略做出决策</p></li><li><p>两种有意义的操作</p><ul><li>将 <strong>有效的 PM ID</strong> 传送到模拟器</li><li>推迟如果 <strong>剩余缓冲区时间</strong> 足够，则可以稍后将处理的 VM Request</li></ul></li></ul><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><h3 id="Oversubscription-超额订阅"><a href="#Oversubscription-超额订阅" class="headerlink" title="Oversubscription 超额订阅"></a>Oversubscription 超额订阅</h3><ul><li><p>考虑到各种服务级别，将物理机分为可超额订阅和非超额订阅的</p></li><li><p>所谓超额，就比如 10 个 VM 实际上只使用 7 个 PM （就是厂商为了省钱）</p></li><li><p>对于超额订阅，可以在 <strong>config.yml</strong> 中设置参数</p></li><li><p>在此场景，有两个资源可能被超额订阅，CPU 和 内存，因可以设置这两个的最大超额订阅率</p><ul><li><p><strong>MAX_CPU_OVERSUBSCRIPTION_RATE</strong> ，CPU 的超额订阅率，默认设置为 1.15 ，意味着每个 PM 最多可以分配其资源容量的 1.15 倍 </p></li><li><p><strong>MAX_MEM_OVERSUBSCRIPTION_RATE</strong> ，内存的超额订阅率，与 CPU 的类似</p></li></ul></li><li><p>为了保护 PM 免受过载的影响，需要考虑 CPU 利用率 ，MAX_UTILIZATION_RATE 被用作安全机制</p><ul><li><strong>MAX_UTILIZATION_RATE</strong> ，默认设置为 1，这意味着在筛选有效 PM 时，允许的最大物理 CPU 使用率为 100%</li></ul></li></ul><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><h3 id="Runtime-Simulation"><a href="#Runtime-Simulation" class="headerlink" title="Runtime Simulation"></a>Runtime Simulation</h3><ul><li><h4 id="动态利用率"><a href="#动态利用率" class="headerlink" title="动态利用率"></a>动态利用率</h4><ul><li>为了使模拟环境最接近真实情况，MARO 模拟每个 VM 的资源利用率（当前仅为 CPU 利用率）</li><li><strong>模拟的</strong> VM CPU 利用率根据<strong>实际的</strong> VM 工作负载读数而变化</li><li>MARO 还将根据每个 PM 中的<strong>实时</strong> VM 定期更新<strong>实时</strong>资源利用率</li></ul></li><li><h4 id="实时能耗"><a href="#实时能耗" class="headerlink" title="实时能耗"></a>实时能耗</h4><ul><li><p>不同的 VM 分配会导致 PM 集群的能耗不同，MARO 还根据 CPU 利用率模拟（计算）能耗</p><ul><li><p>能耗曲线</p><ul><li>这个非线性曲线反映了 CPU 利用率 与 能耗 的关系，用于模拟（计算）能耗</li></ul></li></ul></li></ul>  <img src="/pictures/maro-vm-调度/vm.energy_curve.svg"/></li></ul><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><h3 id="Overload"><a href="#Overload" class="headerlink" title="Overload"></a>Overload</h3><ul><li><p>由于 VM 的 CPU 使用率随时间而变化，因此在启用超额订阅时，VM 的 CPU 使用率之和可能会超过物理资源的容量，这种情况称为过载</p><ul><li><p>目前对于过载的情况，MARO 只支持<strong>静默（杀死）所有虚拟机</strong> 或 <strong>仅记录过载时间</strong>，在 config.yml 里面设置</p><ul><li><p><strong>KILL_ALL_VMS_IF_OVERLOAD</strong> </p><ul><li>如果启用此操作，则一旦发生重载，将解除分配位于重载 PM 的<strong>所有</strong> VM</li><li>考虑到过载的影响，MARO 仍然会计算高利用率的能耗，静默行动对 PM 利用率的影响将反映在下一次 tick 中</li></ul></li></ul></li></ul></li></ul><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><ul><li>无论是否启用终止所有 VM，过载 PM 的数量和过载 VM 的数量都会被计算</li><li>这两个指标是累积值，将被记录为环境指标</li></ul><h6 id="-9"><a href="#-9" class="headerlink" title=""></a></h6><h3 id="VM-解除分配"><a href="#VM-解除分配" class="headerlink" title="VM 解除分配"></a>VM 解除分配</h3><ul><li>MARO 模拟器会定期检查每次 tick 中完成任务的虚拟机</li><li>完成的 VM 意味着它经历了一个完整的生命周期，已准备好终止，它所占用的资源最终将再次可用</li><li>然后，模拟器将释放已完成的 VM 的资源，并最终从 PM 中删除 VM</li></ul><h6 id="-10"><a href="#-10" class="headerlink" title=""></a></h6><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><ul><li><p>准备两个 csv 文件 vm_table 和 cpu_readings_file</p><ul><li><p>vm_table</p><ul><li><p><strong>vm_id</strong>:       int, 每个 vm 的id</p></li><li><p><strong>sub_id</strong>:      int, subscription id（每个 vm 的订阅 id）</p></li><li><p><strong>deploy_id</strong>:   int, 每个 vm 的部署 id</p></li><li><p><strong>timestamp</strong>:   int, 每个 vm 的创建时间</p></li><li><p><strong>vm_deleted</strong>:  int. 每个 vm 的删除时间</p></li><li><p><strong>vm_lifetime</strong>: int, 每个 vm 的生存时间，Lifetime &#x3D; deletion time - creation time (timestamp) + 1</p></li><li><p><strong>vm_category</strong>: int, 目前有三种类型</p><ul><li><p>Delay-Insensitive</p><ul><li>可能延迟的 VM 工作负荷，例如批处理任务或测试工作负荷</li><li>可以将此类 VM 分配给可过度订阅的 PM</li></ul></li><li><p>Interactive</p><ul><li>交互式 VM 工作负荷，需要用户及时响应</li><li>此类 VM 只能分配给不可超额订阅的 PM</li></ul></li><li><p>Unknown</p><ul><li>未知类型</li><li>为避免过载，此类 VM 被视为交互式 VM，只能分配给不可超额订阅的 PM</li></ul></li></ul></li></ul></li><li><p>cpu_readings_file </p><ul><li><strong>timestamp</strong>:   int, 与 vm_table 中的 timestamp 匹配</li><li><strong>vm_id</strong>: int, 与 vm_table 中的 vm_id 匹配</li><li><strong>cpu_utilization</strong>: float, VM CPU 的利用率，以百分比单位 （%）存储</li></ul></li></ul></li></ul><h6 id="-11"><a href="#-11" class="headerlink" title=""></a></h6><h3 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h3><ul><li><p>将 CSV 数据集构建为 MARO 模拟器可以使用的二进制文件</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># maro data build --meta $PATH_TO_META_FILE --file $PATH_TO_CSV_FILE  --output $PATH_TO_OUTPUT_FILE</span><br><span class="line">maro data build --meta ~/.maro/data/vm_scheduling/meta/vmtable.yml  --file ~/.maro/data/vm_scheduling/.build/azure.2019.10k/vmtable.bin --output $PWD/vmtable.bin</span><br></pre></td></tr></table></figure><ul><li><p>–meta：必需，用于指定 meta file 的路径。默认情况下，meta file 位于</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.maro/data/vm_scheduling/meta/</span><br></pre></td></tr></table></figure></li><li><p>–file：必需，用于指定源 CSV 数据文件的路径，如果需要多个源 CSV 数据文件，则可以在特定文件中列出源文件的所有完整路径，并使用 @ 符号指定这个特定文件</p></li><li><p>–output：必需，用于指定目标二进制文件的路径</p></li></ul></li><li><p>生成二进制文件之后，在 topologies 目录下的 config.yml 中指定 VM_TABLE 和 CPU_READINGS 的直接路径</p></li></ul><h6 id="-12"><a href="#-12" class="headerlink" title=""></a></h6><h3 id="Environment-Interface"><a href="#Environment-Interface" class="headerlink" title="Environment Interface"></a>Environment Interface</h3><ul><li><h4 id="DecisionPayload"><a href="#DecisionPayload" class="headerlink" title="DecisionPayload"></a>DecisionPayload</h4><ul><li><p>一旦环境需要代理的响应来促进模拟，它就会抛出一个带有 DecisionPayload 的 PendingDecision 事件</p></li><li><p>DecisionPayload 包含以下信息</p><ul><li><strong>valid_pms (List[int])</strong> ：被视为有效的 PM ID 列表（其 CPU 和内存资源足以满足传入的 VM 请求） </li><li><strong>vm_id (int)</strong> ：传入的 VM Request（正在等待分配的 VM Request）的 vm_id ，</li><li><strong>vm_cpu_cores_requirement (int)</strong> ：传入的 VM Request 的 CPU 内核数量</li><li><strong>vm_memory_requirement (int)</strong> ：传入的 VM Request 请求的内存资源大小</li><li><strong>remaining_buffer_time（int）</strong> ：当使用 remaining_buffer_time 时，VM Request 将被视为失败，可以在 config.yml 里面设置</li></ul></li></ul></li><li><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><ul><li><p>从环境中获取 PendingDecisionAction 事件后，代理应使用 Action 进行响应，以下是有效的 Action</p><ul><li><p><strong>None</strong>：除了忽略此 VM Request 之外什么都不执行</p></li><li><p><strong>AllocateAction</strong>：VM 的创建时间将固定在它收到这个 Request 的 tick 处，模拟器将更新目标 PM 的工作负载（CPU 核心数量，内存和能耗），这个 Action 包括:</p><ul><li>**vm_id(int)**：等待分配资源的 VM 的 ID</li><li>**pm_id(int)**：计划将 VM 分配到的 PM 的 ID</li></ul></li><li><p><strong>PostponeAction</strong>：计算 remaining buffer time，这个 Action 包括：</p><ul><li><strong>vm_id (int)</strong> ：等待分配的 VM 的 ID</li><li><strong>postpone_step（int）</strong>：分配要推迟的次数，单位是 DELAY_DURATION ，1 表示延迟 1 DELAY_DURATION ，可以在 config.yml 中设置</li><li>如果时间仍然足够，模拟器将重新生成一个新的请求事件，新需求事件的 仅在剩余缓冲时间上与旧事件不同</li><li>如果时间用完，模拟器会将其记录为失败的分配</li></ul></li></ul></li></ul></li></ul><h6 id="-13"><a href="#-13" class="headerlink" title=""></a></h6><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> maro.simulator <span class="keyword">import</span> Env</span><br><span class="line"><span class="keyword">from</span> maro.simulator.scenarios.vm_scheduling <span class="keyword">import</span> AllocateAction, DecisionPayload, PostponeAction</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize an Env for vm_scheduling scenario</span></span><br><span class="line"><span class="comment"># 初始化环境</span></span><br><span class="line">env = Env(</span><br><span class="line">  scenario=<span class="string">&quot;vm_scheduling&quot;</span>,     </span><br><span class="line">  topology=<span class="string">&quot;azure.2019.10k&quot;</span>,    </span><br><span class="line">  start_tick=<span class="number">0</span>,                </span><br><span class="line">  durations=<span class="number">8638</span>,              </span><br><span class="line">  snapshot_resolution=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化变量，声明类型，&quot;:&quot;用于声明类型</span></span><br><span class="line">metrics: <span class="built_in">object</span> = <span class="literal">None</span></span><br><span class="line">decision_event: DecisionPayload = <span class="literal">None</span></span><br><span class="line">is_done: <span class="built_in">bool</span> = <span class="literal">False</span></span><br><span class="line">action: AllocateAction = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the env with a None Action</span></span><br><span class="line"><span class="comment"># 开始模拟</span></span><br><span class="line">metrics, decision_event, is_done = env.step(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_done:</span><br><span class="line">    valid_pm_num: <span class="built_in">int</span> = <span class="built_in">len</span>(decision_event.valid_pms)</span><br><span class="line"><span class="comment"># 作出决策</span></span><br><span class="line">    <span class="keyword">if</span> valid_pm_num &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># No valid PM now, postpone.</span></span><br><span class="line"><span class="comment"># 没有可用的 PM ，推迟分配</span></span><br><span class="line">        action: PostponeAction = PostponeAction(</span><br><span class="line">            vm_id=decision_event.vm_id,</span><br><span class="line">            postpone_step=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Randomly choose an available PM.</span></span><br><span class="line"><span class="comment"># 有可用的 PM ，随机选一个 PM 与 VM 绑定</span></span><br><span class="line">        random_idx = random.randint(<span class="number">0</span>, valid_pm_num - <span class="number">1</span>)</span><br><span class="line">        pm_id = decision_event.valid_pms[random_idx]</span><br><span class="line">        action: AllocateAction = AllocateAction(</span><br><span class="line">            vm_id=decision_event.vm_id,</span><br><span class="line">            pm_id=pm_id</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采取行动</span></span><br><span class="line">    metrics, decision_event, is_done = env.step(action)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[Random] Topology: azure.2019.10k. Total ticks: 8638. Start tick: 0&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(metrics)</span><br></pre></td></tr></table></figure><br/><h3><div align="left">PRE : <a href="/2022/11/04/MARO-Distibuted-toolkit/" title="MARO Distibuted Toolkit">MARO Distibuted toolkit</a></div></h3>]]></content>
      
      
      
        <tags>
            
            <tag> MARO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作面试</title>
      <link href="/2022/10/26/%E5%B7%A5%E4%BD%9C%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/10/26/%E5%B7%A5%E4%BD%9C%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="深信服-Go-后端笔试-实习-2022-9-29"><a href="#深信服-Go-后端笔试-实习-2022-9-29" class="headerlink" title="深信服 Go 后端笔试(实习) 2022.9.29"></a>深信服 Go 后端笔试(实习) 2022.9.29</h4><ul><li>牛客，要求录屏</li><li>Go 语言基本语法（非常细节）</li><li>算法 编辑距离</li></ul><h4 id="字节飞书搜索后端一面-实习-2022-10-11"><a href="#字节飞书搜索后端一面-实习-2022-10-11" class="headerlink" title="字节飞书搜索后端一面(实习) 2022.10.11"></a>字节飞书搜索后端一面(实习) 2022.10.11</h4><ul><li>飞书浏览器或者客户端面试</li><li>自我介绍</li><li>简历内容（项目过程里面遇到什么问题，如何解决)</li><li>为什么选择字节</li><li>为什么选择 Go 语言</li><li>Python 为什么比 Go 效率低下</li><li>Go 语言 sync 包的数据结构以及函数用过哪些</li><li>Go 语言逃逸分析</li><li>Go 内存管理</li><li>什么是线程安全</li><li>redis 如何实现线程安全</li><li>你写的 redis 是线程安全的吗</li><li>redis 实现原理</li><li>算法 对称二叉树（感觉有点羞辱）</li><li>C++ 现在最新标准，有什么新特性</li></ul><h4 id="海能达-Go-后端笔试一面-实习-2022-10-18"><a href="#海能达-Go-后端笔试一面-实习-2022-10-18" class="headerlink" title="海能达 Go 后端笔试一面(实习) 2022.10.18"></a>海能达 Go 后端笔试一面(实习) 2022.10.18</h4><ul><li>腾讯会议</li><li>自我介绍</li><li>Go 的切片数组区别</li><li>为什么大三就来面试</li><li>简历内容（项目过程里面遇到什么问题，如何解决)</li><li>软件工程</li><li>软件开发流程</li><li>软件设计模式</li><li>影响数据库查询速率的因素</li></ul><h4 id="腾讯游戏技术运营一面-实习-2022-10-25"><a href="#腾讯游戏技术运营一面-实习-2022-10-25" class="headerlink" title="腾讯游戏技术运营一面(实习) 2022.10.25"></a>腾讯游戏技术运营一面(实习) 2022.10.25</h4><ul><li><p>腾讯会议面试，要求录屏</p></li><li><p>先来做几条题目，很简单，主要看思路，但是基本语法不能错误，任意语言</p><ul><li>使用 js&#x2F;php&#x2F;python 自行实现函数方法 去掉一个数组的重复元素，例如：let arr &#x3D; [1 ,1 ,2, 3, 3, 2, 1] (若是百亿数据，要求时间O(n)，空间O(1)，有什么思路)</li><li>使用 js&#x2F;php&#x2F;python 实现一个函数，将字符串 “hello_world” 转换成 “HelloWorld” , “hello_hang_zhou” 转换成 “HelloHangZhou” (注意：通用性)</li><li>使用 js&#x2F;php&#x2F;python 实现一个函数方法，参数为输入一个整数，然后输出这个数所有的因数以及总的个数，比如参数传 48 ，此时输出 1、2、3、4、6、8、12、16、24、48 共 10 个数字，比如参数传 21 ，此时输出 1、3、7、21 共 4 个数字</li><li>使用 js&#x2F;php&#x2F;python 函数遍历以下 json 数据，输出指定格式结果（考虑 children 层次会无限嵌套）</li><li>数据库操作，建一个表学生 student (id,name,sex,birth) (编号、姓名、性别、出生年月)<ul><li>写下建表语句：</li><li>student 表新增一个字段“班级编号”（class_no），写出对应的执行 sql 语句</li><li>统计每个班级有多少个学生，根据班级编号统计，写下统计 sql</li></ul></li></ul></li><li><p>自我介绍</p></li><li><p>问简历的内容</p></li><li><p>redis 五种数据类型</p></li><li><p>平时喜欢看什么书（简历有写）</p></li><li><p>bash 基本知识</p></li><li><p>面向对象三大特性</p></li><li><p>数据库三大特性深入理解</p></li><li><p>sql 备份主从一致</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 工作面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 加强 Next Theme 美化</title>
      <link href="/2022/10/26/Hexo-%E5%8A%A0%E5%BC%BA-Next-Theme-%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/10/26/Hexo-%E5%8A%A0%E5%BC%BA-Next-Theme-%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="Hexo-Next-主题"><a href="#Hexo-Next-主题" class="headerlink" title="Hexo-Next 主题"></a>Hexo-Next 主题</h4><p>hexo-theme-next 应该是目前最广泛使用的hexo主题</p><h4 id="安装-Hexo-Next-主题"><a href="#安装-Hexo-Next-主题" class="headerlink" title="安装 Hexo-Next 主题"></a>安装 Hexo-Next 主题</h4><p>切换到你的博客顶级工程目录，npm 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure><h4 id="切换到-Next-主题"><a href="#切换到-Next-主题" class="headerlink" title="切换到 Next 主题"></a>切换到 Next 主题</h4><p>在你的博客顶层工程目录下打开 “_config.yml”</p><img src="/pictures/hexo-next-theme-美化/2022.10.26.13.24.11.png"/><p>搜索themes，将里面的值改为next</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h4 id="配置-Next-主题"><a href="#配置-Next-主题" class="headerlink" title="配置 Next 主题"></a>配置 Next 主题</h4><p>将 node_modules&#x2F;hexo-theme-next&#x2F;_config.yml 复制到博客顶层文件目录，重命名为 “_config.next.yml”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_site_dir</span><br><span class="line"><span class="built_in">cp</span> node_modules/hexo-theme-next/_config.yml  _config.next.yml</span><br></pre></td></tr></table></figure><ul><li><h5 id="选择-Schemes"><a href="#选择-Schemes" class="headerlink" title="选择 Schemes"></a>选择 Schemes</h5><p>  打开 “_config.next.yml” ，首先可以看到 Scheme Settings ，里面提供了四种模式，本站使用 Mist 主题</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li><li><h5 id="设置站点-icon"><a href="#设置站点-icon" class="headerlink" title="设置站点 icon"></a>设置站点 icon</h5><p>  在 favicon 中，可以设置侧边栏头像以及站点 icon ，需要把你的 icon 放在主题目录的 source&#x2F;img&#x2F; 目录下</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">     <span class="attr">small:</span> <span class="string">/img/avatar.jfif</span></span><br><span class="line">     <span class="attr">medium:</span> <span class="string">/img/avatar.jfif</span></span><br><span class="line">     <span class="attr">apple_touch_icon:</span> <span class="string">/img/avatar.jfif</span></span><br><span class="line">     <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br></pre></td></tr></table></figure></li><li><h5 id="还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置"><a href="#还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置" class="headerlink" title="还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置"></a>还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置</h5></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 MARO</title>
      <link href="/2022/10/26/%E5%88%9D%E8%AF%86-MARO/"/>
      <url>/2022/10/26/%E5%88%9D%E8%AF%86-MARO/</url>
      
        <content type="html"><![CDATA[<h3 id="MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台"><a href="#MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台" class="headerlink" title="MARO ，“Multi-Agent-Resource Optimization” ，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台"></a><a href="https://github.com/microsoft/maro">MARO ，“Multi-Agent-Resource Optimization” </a>，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台</h3><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="可以应用-MARO-的实际例子："><a href="#可以应用-MARO-的实际例子：" class="headerlink" title="可以应用 MARO 的实际例子："></a>可以应用 MARO 的实际例子：</h4><ul><li><h5 id="CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）"><a href="#CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）" class="headerlink" title="CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）"></a>CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）</h5><ul><li>而使用 MARO 可以解决这个问题，使得每个港口尽可能分配到恰当的空集装箱资源，不多不少。</li><li>在这个场景里面，空集装箱是中心资源，导致资源数量改变的事件有两个：<ul><li>第一个是 Order ，即订单，订单会导致货物从 source port 运到 destination port ， 这个时候 source port 出货，empty container 会减少，destination port 进货，empty container 会增加</li><li>第二个是 repositioning，使用 MARO 重定位空集装箱，平衡全球空集装箱分布。</li></ul></li></ul></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p><img src="/pictures/%E5%88%9D%E8%AF%86MARO/cim.container_flow.svg"></p><ul><li><h5 id="对上面这个流程图的解释"><a href="#对上面这个流程图的解释" class="headerlink" title="对上面这个流程图的解释"></a>对上面这个流程图的解释</h5><ul><li>托运人（shipper）生成订单（send order）后，相应源端口（source port）的空容器将被释放（release empty）给托运人（shipper）</li><li>托运人（shipper）将用货物装满集装箱，将其变成满载货物，然后在将满载货物的集装箱运回到（return laden）源港口（source port）</li><li>船（vessel）到港口（source port）之后被装载满载货物的集装箱（load laden）</li><li>船航行到进口港（source port），卸货（discharge laden）</li><li>满载货物将被释放（release laden）给收货人（consignee），收货人将取出其中的货物，集装箱再次变空返回港口（return empty）</li></ul></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li><h5 id="这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty"><a href="#这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty" class="headerlink" title="这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty"></a>这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty</h5><ul><li>为了为了重新平衡集装箱分布，每个港口（port）的代理商（agent）将决定每次船舶（vessel）到达港口时如何重新分配（repostioning）空集装箱<ul><li>船只（vessel）到达港口时，是往船上装载空集装箱（load empty），还是消费船上原有的空集装箱（discharge empty）</li><li>分配 load&#x2F;discharge empty 的数量</li></ul></li></ul></li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li><h5 id="MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况"><a href="#MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况" class="headerlink" title="MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况"></a>MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况</h5><ul><li>出口导向型港口（例如中国的港口）显示出明显的高需求特征，通常需要额外的空集装箱供应，这些港口将倾向于从船上卸载空集装箱</li><li>虽然以进口为导向的港口具有显著的盈余特征，但通常从收货人那里收到许多空集装箱，因此，如果存在空闲容量，面向进口的港口将倾向于将多余的空集装箱装入船舶</li></ul></li></ul><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><ul><li><h4 id="简单拓扑结构"><a href="#简单拓扑结构" class="headerlink" title="简单拓扑结构"></a>简单拓扑结构</h4><img src="/pictures/%E5%88%9D%E8%AF%86MARO/cim.toys.svg"></li><li><h5 id="这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单"><a href="#这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单" class="headerlink" title="这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单"></a>这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单</h5></li><li><h5 id="上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S"><a href="#上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S" class="headerlink" title="上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S"></a>上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S</h5><ul><li><strong>拓扑（1）</strong> 有四个 port ，D1 和 D2 是简单的需求者（需要额外 empty container 的端口），而 S2 是简单的供应商（具有剩余空容器的端口），尽管 S1 是一个简单的目标端口，但它位于两个服务路由的交点，这使其成为此拓扑中的特殊端口，为了实现全局最优，S1 必须学会区分服务路由并执行特定于服务路由的重新定位操作</li><li><strong>拓扑（2）</strong> 中有五个端口，根据订单，D1 和 D2 是简单的需求者，而 S1 和 S2 是简单的供应商，作为服务航线交汇处的港口，T1港口虽然可以达到自平衡状态，但仍对全局最优起着重要作用，T1 的最佳重新定位策略是将多余的空容器从左侧服务路由转移到右侧服务路由，此外，D1 和 D2 应该学会只卸载它们需要的 empty 数量，并将多余的 empty 留给其他端口</li><li><strong>拓扑（3）</strong> 中有六个端口，简单的需求者 D1 和 D2 ，简单的供应商 S1 和 S2 ，以及自平衡端口 T1 和 T2 ，比拓扑（2）更困难的是，应该采取更多的转移来将多余的空集装箱从最左边的服务路线重新定位到最右边的航线，这意味着需要一个涉及更多港口的多步骤解决方案</li></ul></li></ul><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><p><img src="/pictures/%E5%88%9D%E8%AF%86MARO/cim.global_trade.svg"></p><ul><li>这是基于真实世界数据设计的拓扑,大多数港口不再具有简单的供需功能。港口之间的合作要复杂得多，很难手动找到有效的重新定位策略</li></ul><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><ul><li><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4></li><li><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymaro</span><br></pre></td></tr></table></figure></li><li><h5 id="MARO-算法有两个关键步骤"><a href="#MARO-算法有两个关键步骤" class="headerlink" title="MARO 算法有两个关键步骤"></a>MARO 算法有两个关键步骤</h5></li><li><h6 id="算法决策事件-DecisionEventDecisionEvent"><a href="#算法决策事件-DecisionEventDecisionEvent" class="headerlink" title="算法决策事件 DecisionEventDecisionEvent"></a>算法决策事件 DecisionEventDecisionEvent</h6><ul><li>tick (int)：相应的刻度</li><li>port_idx（int）：需要响应环境的端口&#x2F;代理的 ID</li><li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li><li>action_scope（操作范围）：操作范围有两个属性，load表示可以从船舶港口装载的最大数量，discharge表示从船舶到港口可以卸货的最大数量</li><li>early_discharge（int）：当船上的可用容量不足以装载满载物时，船上的一些空容器将被提前卸货以释放空间，由于满载而提前卸货的空容器数量记录在该字段中</li></ul></li><li><h6 id="行动-Action"><a href="#行动-Action" class="headerlink" title="行动 Action"></a>行动 Action</h6><ul><li>none，这意味着什么都不做</li><li>a valid instance，有效实例：</li><li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li><li>port_idx（int）：执行此操作的端口&#x2F;代理的 ID</li><li>action_type（操作类型）：在此操作中是装载还是卸载空容器</li><li>数量（int）：要装载&#x2F;卸载的空容器的（非负）数量</li></ul></li></ul><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><p><img src="/pictures/%E5%88%9D%E8%AF%86MARO/maro_overview.svg"></p><ul><li><h4 id="上图是-MARO-框架图"><a href="#上图是-MARO-框架图" class="headerlink" title="上图是 MARO 框架图"></a>上图是 MARO 框架图</h4><ul><li>Simulation toolkit：它提供了一些预定义的场景，以及用于构建新场景的可重用轮子</li><li>RL toolkit：它为 RL 提供了全栈抽象，例如代理管理器、代理、RL 算法、学习器、参与者和各种塑造者</li><li>Distributed toolkit：提供分布式通信组件、消息自动处理、集群配置、作业编排等用户定义功能的接口</li></ul></li></ul><br/><h3><div align="right" >NEXT : <a href="/2022/11/04/MARO-Distibuted-toolkit/" title="MARO Distibuted Toolkit">MARO Distibuted toolkit</a></div></h3>]]></content>
      
      
      
        <tags>
            
            <tag> MARO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 文档分类 图片存储</title>
      <link href="/2022/10/23/Hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/"/>
      <url>/2022/10/23/Hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>建立分类</strong></p><ol><li>输入 hexo new page ‘categories’</li></ol><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ol start="2"><li>在顶层工程目录的 source 目录中會看到 categories 文件夹</li></ol><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ol start="3"><li><p>修改 categories 中的 index.md 开头，增加一些东西使得变成如下内容</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-10-23 13:30:15</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li><p>若要把 “_post” 內的其中一份文档添加到 “Hexo-Usage” categories 里面，在这个文档头部插入 categories: Hexo-Usage</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 基本美化</span><br><span class="line">date: 2022-10-23 16:08:56</span><br><span class="line"><span class="section">categories: Hexo-Usage</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li><p>重新生成静态网页，可以看到导航栏多了一个分类选项</p></li></ol><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.31.09.png"></p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><p><strong>建立标签</strong></p><p>和建立分类一样，只不过内容改变一点</p><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ol><li>输入 hexo new page ‘tags’</li></ol><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><ol start="2"><li>在顶层工程目录的 source 目录中會看到 tags 文件夹</li></ol><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><ol start="3"><li>修改 tags 中的 index.md 开头，增加一些东西使得变成如下内容 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-10-23 13:35:49</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>若要把 “_post” 內的其中一份文档添加到 “Hexo” tag 里面，在这个文档头部插入 tags: Hexo <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 文档分类 图片存储</span><br><span class="line">date: 2022-10-23 19:16:39</span><br><span class="line">categories: Hexo-Usage</span><br><span class="line">tags: Hexo</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>插入多个 tags ，记得 tab 缩进 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 文档分类 图片存储</span><br><span class="line">date: 2022-10-23 19:16:39</span><br><span class="line">categories: Hexo-Usage</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">- Github</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>重新生成静态网页，可以看到导航栏多了一个标签选项</li></ol><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.50.12.png"></p><p><strong>文档里面插入图片</strong></p><p>使用Hexo创建文件搭建博客时，会遇到图片插图，以及插入的图片无法显示的问题</p><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><ol><li>在 Hexo 的目录（也就是顶层工程目录） source 中创建一个图片文件夹，例如 pictures</li></ol><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.55.54.png"></p><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><ol start="2"><li><p>把要插入的图片文件放到该目录下面，在文档中正常使用 markdown 的语法插入图片即可，例如</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![img](ictures/xxx.png)</span><br></pre></td></tr></table></figure></li><li><p>当然，你还可以在 pictures 再创建目录以区分不同文章的图片</p></li></ol><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.20.00.11.png"></p><ol start="4"><li><p>这个时候在文章里面引用的方式就是</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![img](ictures/hexo-文档分类-图片存储/xxx.png)</span><br></pre></td></tr></table></figure></li></ol><p>记住在 “pictures” 前面有一个 “&#x2F;“ ，表示根目录的意思，因为对于 hexo 来说它的资源文件的根目录就是 source ，当然也可以修改 “_config.yml” 改变这个配置，下图是 hexo 框架文件夹描述</p><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/20191220164252492.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 基本美化</title>
      <link href="/2022/10/23/Hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/10/23/Hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>首先是顶部背景</strong>，下面是原背景</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.14.49.png"></p><p>在 blogs 文件夹（顶层工程文件目录）里面搜索 banner.jpg</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.17.17.png"></p><p>把这两个 banner.jpg 替换成自己图片，替换之后名字还得是 banner.jpg</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.19.21.png"></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.22.22.png"></p><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p><strong>定义自己的信息</strong>，定义在顶层工程目录的 “_config.yml” 里面</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.25.30.png"></p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.27.38.png"></p><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><p><strong>美化代码块</strong>，原本的代码块没有 margin-left 和 margin-right ，不好看<br><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.29.42.png"></p><p>在顶层工程文件目录里面，搜索 highlight.styl</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.32.39.png"></p><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.33.18.png"></p><p>这两个 css 文件是一样的，要修改的地方也一样</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.35.28.png"></p><p>注释掉原来的 margin ，换成 “margin:1px” 就可以</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.36.27.png"></p><p>效果很 nice</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.38.27.png"></p><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><p><strong>最终效果</strong></p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.41.32.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages + Hexo</title>
      <link href="/2022/10/23/Github-Pages+Hexo/"/>
      <url>/2022/10/23/Github-Pages+Hexo/</url>
      
        <content type="html"><![CDATA[<p><strong>Github Pages 可以为个人博客提供支持，Hexo 可以让 Github Pages 更加美观和提供本地预览，而不需要上传到 Github Pages 之后再看到效果</strong></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p><strong>安装准备</strong>（本地）：</p><ul><li>git</li><li>npm</li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p><strong>配置 Git</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;github 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>Github 已经不支持密码登录，需要复杂一点的步骤去验证</p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ol><li>到个人中心-设置-setting</li><li><img src="/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png"></li><li><img src="/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png"><br><img src="/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png"></li><li>选 classic 的 token 而不是 beta 的，因为 classic 可以永久</li><li><img src="/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png"><br><img src="/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png"></li><li>点击 generate token按钮</li></ol><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><p>然后 生成了token 一定要复制，不然刷新浏览器就没了</p><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><p>拿到token以后再去git push&#x2F;clone ，password就是输入刚才复制的token</p><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><p><strong>Hexo 安装（本地全局）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建一个文件夹（我的是blogs）用于存放你的博客，然后进入该文件夹，并用如下命令进行初始化并安装必备组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">hexo init .</span><br></pre></td></tr></table></figure><p>初始化后，目录结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"> ├── _config.yml <span class="comment"># 网站配置信息</span></span><br><span class="line"> ├── package.json <span class="comment"># 应用程序信息</span></span><br><span class="line"> ├── scaffolds<span class="comment"># 模板文件夹</span></span><br><span class="line"> ├── <span class="built_in">source</span> <span class="comment"># 存放用户资源</span></span><br><span class="line"> |   ├── _drafts</span><br><span class="line"> |   └── _posts<span class="comment"># 存放个人博客</span></span><br><span class="line"> └── themes <span class="comment"># 主题文件夹</span></span><br></pre></td></tr></table></figure><p>然后输入如下命令，然后在浏览器中打开 <a href="http://localhost:4000/">http://localhost:4000</a> ，就可以预览原始网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;博客名&#x27;</span> <span class="comment"># 新建博客</span></span><br><span class="line">hexo g <span class="comment"># 生成静态网页</span></span><br><span class="line">hexo s <span class="comment"># 打开本地服务器</span></span><br></pre></td></tr></table></figure><p>然后就可以看到如下的界面<br><img src="/pictures/github-pages-hexo/2022.10.23.14.48.30.png"></p><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><p><strong>发布到 Github Pages 上面</strong></p><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><p>注册 Github 帐号，有帐号了不用注册</p><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><p>新建一个空仓库，暂时不要创建 README.md ，而且得确保你的仓库是 public 同时，仓库名一定要是 <strong>用户名.github.io</strong></p><h6 id="-9"><a href="#-9" class="headerlink" title=""></a></h6><p>在上文提到的 blogs 文件夹下面安装 hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h6 id="-10"><a href="#-10" class="headerlink" title=""></a></h6><p>在刚才的博客根目录中的站点配置文件 “_config.yml” ，设置为你的个人仓库名，branch 与你的 git 主分支对应<br><img src="/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg"><br><img src="/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png"></p><h6 id="-11"><a href="#-11" class="headerlink" title=""></a></h6><p>开始推送内容到 Github 上去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清理缓存</span></span><br><span class="line">hexo g     <span class="comment"># 将 md 生成 html</span></span><br><span class="line">git add -A <span class="comment"># 添加到 git 缓冲区</span></span><br><span class="line">git commit -m <span class="string">&quot;first time&quot;</span><span class="comment"># 提交所有更改</span></span><br><span class="line">hexo d     <span class="comment"># 推送到远程</span></span><br></pre></td></tr></table></figure><p>稍等片刻，就可以访问 https:&#x2F;&#x2F;用户名.github.io 了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian Bashrc</title>
      <link href="/2022/10/23/debian-bashrc/"/>
      <url>/2022/10/23/debian-bashrc/</url>
      
        <content type="html"><![CDATA[<p>需要修改 bashrc 的时候，修改 &#x2F;etc&#x2F;bash.bashrc，而不是 ~&#x2F;.bashrc 前者是全局的，下面这一句话就是 &#x2F;etc&#x2F;bash.bashrc 末尾的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/path.sh</span><br></pre></td></tr></table></figure><p>（环境变量相关）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian Fcitx 中文输入法</title>
      <link href="/2022/10/23/debian-fcitx-%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/2022/10/23/debian-fcitx-%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>不是中文环境需要进行切换中文环境,可以通过以下命令切换:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>至少选择zh_CN.UTF-8</p><p>更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update </span><br></pre></td></tr></table></figure><p>安装 fcitx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx</span><br></pre></td></tr></table></figure><p>安装 google-pinyin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx-googlepinyin</span><br></pre></td></tr></table></figure><p>重启</p><p>命令行输入 im-config 选中fcitx</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
            <tag> Fcitx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian Gnome 默认浏览器</title>
      <link href="/2022/10/23/debian-gnome-default-browser/"/>
      <url>/2022/10/23/debian-gnome-default-browser/</url>
      
        <content type="html"><![CDATA[<p>可以参考里面的指引来设置默认浏览器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wiki.debian.org/DefaultWebBrowser</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
            <tag> Gnome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian Nvidia 驱动</title>
      <link href="/2022/10/23/debian-nvidia/"/>
      <url>/2022/10/23/debian-nvidia/</url>
      
        <content type="html"><![CDATA[<p>最重要的一点，去 bios 那里关闭 secure boot 先！</p><p>更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-driver</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
            <tag> Nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash Powerline Fonts 美化</title>
      <link href="/2022/10/23/linux-bash-powerline-arrow/"/>
      <url>/2022/10/23/linux-bash-powerline-arrow/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/b-ryan/powerline-shell#bash</span><br></pre></td></tr></table></figure><p>留意 README.md 里面的内容，留意如何安装 powerline 字体</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Bash </tag>
            
            <tag> Powerline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 环境变量配置错误处理</title>
      <link href="/2022/10/23/linux-command-not-found-bash/"/>
      <url>/2022/10/23/linux-command-not-found-bash/</url>
      
        <content type="html"><![CDATA[<p>Linux 环境变量配置出错后，提示command not found</p><p>处理方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/bin:/usr/sbin:/bin:/sbin</span><br></pre></td></tr></table></figure><p>这样处理后，临时生效环境变量，然后修改配置错误的文件例如.bash_profile   &#x2F;etc&#x2F;profile .bashrc 等，修改后，执行source生效正确的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile --根据实际情况修改后面的文件路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gnome Desktop File 参考</title>
      <link href="/2022/10/23/linux-debian-gnome-desktop-launch/"/>
      <url>/2022/10/23/linux-debian-gnome-desktop-launch/</url>
      
        <content type="html"><![CDATA[<p>eg:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Tabby</span><br><span class="line">Comment=Tabby</span><br><span class="line">Exec=/home/asleep/softwares/tabby/tabby/tabby %U</span><br><span class="line">Icon=/home/asleep/softwares/tabby/tabby/tabby.svg</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br><span class="line">StartupWMClass=tabby</span><br></pre></td></tr></table></figure><p>需要改变的是 name，common，exec，icon，startupwmclass</p><p>.desktop 文件位于 &#x2F;usr&#x2F;share&#x2F;application&#x2F; 下面</p><p>StartupWMClass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xprop | grep CLASS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Gnome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux VScode 字体</title>
      <link href="/2022/10/23/linux-debian-vscode-fonts-firacode/"/>
      <url>/2022/10/23/linux-debian-vscode-fonts-firacode/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/tonsky/FiraCode</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 换源</title>
      <link href="/2022/10/23/node-%E6%8D%A2%E6%BA%90-%E9%98%BF%E9%87%8C/"/>
      <url>/2022/10/23/node-%E6%8D%A2%E6%BA%90-%E9%98%BF%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<p>由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>执行下面的命令，确认是否切换成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 环境变量配置</title>
      <link href="/2022/10/23/path.sh-gopath-alias/"/>
      <url>/2022/10/23/path.sh-gopath-alias/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;etc&#x2F;profile.d&#x2F;path.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/conda/conda/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/qrcp/qrcp</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/nodejs/nodejs/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/baidunetdisk/baidunetdisk/opt/baidunetdisk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/adb/adb</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/wine/wine</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/neovim/neovim</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/go/go_path/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/autossh/autossh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">&#x27;/home/asleep/softwares/go/go_base/go&#x27;</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">&#x27;/home/asleep/softwares/go/go_path&#x27;</span></span><br><span class="line"><span class="built_in">export</span> GOCACHE=<span class="string">&#x27;/home/asleep/softwares/go/go_cache&#x27;</span></span><br><span class="line"><span class="built_in">export</span> GOENV=<span class="string">&#x27;/home/asleep/softwares/go/go_env&#x27;</span></span><br><span class="line"><span class="comment"># export GOMOD=&#x27;/home/asleep/softwares/go/go_mod&#x27;</span></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=<span class="string">&#x27;auto&#x27;</span></span><br><span class="line"><span class="comment"># export GOWORK=&#x27;/home/asleep/softwares/go/go_work&#x27;</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=<span class="string">&#x27;https://goproxy.cn/,direct&#x27;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/asleep/softwares/go/go_base/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># alias vim=&#x27;vim.tiny&#x27;</span></span><br><span class="line"><span class="comment"># alias sudo=&#x27;sudo &#x27;</span></span><br></pre></td></tr></table></figure><p>这里只能存 path 和 alias，其他的能在 &#x2F;etc&#x2F;bash.bashrc 里面解决就在那里解决，原则！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM 批量查找替换</title>
      <link href="/2022/10/23/vim-nvim-replace-%E6%89%B9%E9%87%8F%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/"/>
      <url>/2022/10/23/vim-nvim-replace-%E6%89%B9%E9%87%8F%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 当前行进行替换</span><br><span class="line">:s/XXX/YYY/g</span><br><span class="line"># XXX是需要替换的字符串,YYY是替换后的字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 全局替换</span><br><span class="line">:% s/XXX/YYY/g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对指定部分进行替换用V进入visual模式,再进行</span><br><span class="line">:s/XXX/YYY/g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 或指定行范围 替换</span><br><span class="line">:100,102s/XXX/YYY/g</span><br><span class="line"></span><br><span class="line"># 模糊查找不区分大小写，在要查找的内容后面加上 \c 就行</span><br><span class="line">:/xxx\c</span><br><span class="line">:s/XXX\c/YYY/g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The First Blog</title>
      <link href="/2022/10/22/The-First-Blog/"/>
      <url>/2022/10/22/The-First-Blog/</url>
      
        <content type="html"><![CDATA[<p>“开始记录进步与欢乐！”</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

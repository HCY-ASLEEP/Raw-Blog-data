<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>工作面试</title>
      <link href="/2022/10/26/%E5%B7%A5%E4%BD%9C%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/10/26/%E5%B7%A5%E4%BD%9C%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="深信服-Go-后端笔试-实习-2022-9-29"><a href="#深信服-Go-后端笔试-实习-2022-9-29" class="headerlink" title="深信服 Go 后端笔试(实习) 2022.9.29"></a>深信服 Go 后端笔试(实习) 2022.9.29</h4><ul><li>牛客，要求录屏</li><li>Go 语言基本语法（非常细节）</li><li>算法 编辑距离</li></ul><h4 id="字节飞书搜索后端一面-实习-2022-10-11"><a href="#字节飞书搜索后端一面-实习-2022-10-11" class="headerlink" title="字节飞书搜索后端一面(实习) 2022.10.11"></a>字节飞书搜索后端一面(实习) 2022.10.11</h4><ul><li>飞书浏览器或者客户端面试</li><li>自我介绍</li><li>简历内容（项目过程里面遇到什么问题，如何解决)</li><li>为什么选择字节</li><li>为什么选择 Go 语言</li><li>Python 为什么比 Go 效率低下</li><li>Go 语言 sync 包的数据结构以及函数用过哪些</li><li>Go 语言逃逸分析</li><li>Go 内存管理</li><li>redis 实现原理</li><li>算法 对称二叉树（感觉有点羞辱）</li><li>C++ 现在最新标准，有什么新特性</li></ul><h4 id="海能达-Go-后端笔试一面-实习-2022-10-18"><a href="#海能达-Go-后端笔试一面-实习-2022-10-18" class="headerlink" title="海能达 Go 后端笔试一面(实习) 2022.10.18"></a>海能达 Go 后端笔试一面(实习) 2022.10.18</h4><ul><li>腾讯会议</li><li>自我介绍</li><li>Go 的切片数组区别</li><li>为什么大三就来面试</li><li>简历内容（项目过程里面遇到什么问题，如何解决)</li><li>影响数据库查询速率的因素</li></ul><h4 id="腾讯游戏技术运行一面-实习-2022-10-25"><a href="#腾讯游戏技术运行一面-实习-2022-10-25" class="headerlink" title="腾讯游戏技术运行一面(实习) 2022.10.25"></a>腾讯游戏技术运行一面(实习) 2022.10.25</h4><ul><li><p>腾讯会议面试，要求录屏</p></li><li><p>先来做几条题目，很简单，主要看思路，但是基本语法不能错误，任意语言</p><ul><li>使用 js&#x2F;php&#x2F;python 自行实现函数方法 去掉一个数组的重复元素，例如：let arr &#x3D; [1 ,1 ,2, 3, 3, 2, 1] (若是百亿数据，要求时间O(n)，空间O(1)，有什么思路)</li><li>使用 js&#x2F;php&#x2F;python 实现一个函数，将字符串 “hello_world” 转换成 “HelloWorld” , “hello_hang_zhou” 转换成 “HelloHangZhou” (注意：通用性)</li><li>使用 js&#x2F;php&#x2F;python 实现一个函数方法，参数为输入一个整数，然后输出这个数所有的因数以及总的个数，比如参数传 48 ，此时输出 1、2、3、4、6、8、12、16、24、48 共 10 个数字，比如参数传 21 ，此时输出 1、3、7、21 共 4 个数字</li><li>使用 js&#x2F;php&#x2F;python 函数遍历以下 json 数据，输出指定格式结果（考虑 children 层次会无限嵌套）</li><li>数据库操作，建一个表学生 student (id,name,sex,birth) (编号、姓名、性别、出生年月)<ul><li>写下建表语句：</li><li>student 表新增一个字段“班级编号”（class_no），写出对应的执行 sql 语句</li><li>统计每个班级有多少个学生，根据班级编号统计，写下统计 sql</li></ul></li></ul></li><li><p>自我介绍</p></li><li><p>问简历的内容</p></li><li><p>redis 五种数据类型</p></li><li><p>平时喜欢看什么书（简历有写）</p></li><li><p>bash 基本知识</p></li><li><p>面向对象三大特性</p></li><li><p>数据库三大特性深入理解</p></li><li><p>sql 备份主从一致</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 工作面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 加强 Next Theme 美化</title>
      <link href="/2022/10/26/Hexo-%E5%8A%A0%E5%BC%BA-Next-Theme-%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/10/26/Hexo-%E5%8A%A0%E5%BC%BA-Next-Theme-%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="Hexo-Next-主题"><a href="#Hexo-Next-主题" class="headerlink" title="Hexo-Next 主题"></a>Hexo-Next 主题</h4><p>hexo-theme-next 应该是目前最广泛使用的hexo主题</p><h4 id="安装-Hexo-Next-主题"><a href="#安装-Hexo-Next-主题" class="headerlink" title="安装 Hexo-Next 主题"></a>安装 Hexo-Next 主题</h4><p>切换到你的博客顶级工程目录，npm 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure><h4 id="切换到-Next-主题"><a href="#切换到-Next-主题" class="headerlink" title="切换到 Next 主题"></a>切换到 Next 主题</h4><p>在你的博客顶层工程目录下打开 “_config.yml”</p><img src="/pictures/hexo-next-theme 美化/2022.10.26.13.24.11.png"/><p>搜索themes，将里面的值改为next</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4 id="配置-Next-主题"><a href="#配置-Next-主题" class="headerlink" title="配置 Next 主题"></a>配置 Next 主题</h4><p>将 node_modules&#x2F;hexo-theme-next&#x2F;_config.yml 复制到博客顶层文件目录，重命名为 “_config.next.yml”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your_site_dir</span><br><span class="line">cp node_modules/hexo-theme-next/_config.yml  _config.next.yml</span><br></pre></td></tr></table></figure><ul><li><h5 id="选择-Schemes"><a href="#选择-Schemes" class="headerlink" title="选择 Schemes"></a>选择 Schemes</h5><p>  打开 “_config.next.yml” ，首先可以看到 Scheme Settings ，里面提供了四种模式，本站使用 Mist 主题</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure></li><li><h5 id="设置站点-icon"><a href="#设置站点-icon" class="headerlink" title="设置站点 icon"></a>设置站点 icon</h5><p>  在 favicon 中，可以设置侧边栏头像以及站点 icon ，需要把你的 icon 放在主题目录的 source&#x2F;img&#x2F; 目录下</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">     small: /img/avatar.jfif</span><br><span class="line">     medium: /img/avatar.jfif</span><br><span class="line">     apple_touch_icon: /img/avatar.jfif</span><br><span class="line">     safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure></li><li><h5 id="还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置"><a href="#还有其余的很多配置，可以参考-“-config-next-yml”-里面的提示来配置" class="headerlink" title="还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置"></a>还有其余的很多配置，可以参考 “_config.next.yml” 里面的提示来配置</h5></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 MARO</title>
      <link href="/2022/10/26/%E5%88%9D%E8%AF%86-MARO/"/>
      <url>/2022/10/26/%E5%88%9D%E8%AF%86-MARO/</url>
      
        <content type="html"><![CDATA[<h3 id="MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台"><a href="#MARO-，“Multi-Agent-Resource-Optimization”-，中文是“多代理资源优化”-，使用强化学习来解决资源调度的一个平台" class="headerlink" title="MARO ，“Multi-Agent-Resource Optimization” ，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台"></a><a href="https://github.com/microsoft/maro">MARO ，“Multi-Agent-Resource Optimization” </a>，中文是“多代理资源优化” ，使用强化学习来解决资源调度的一个平台</h3><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="可以应用-MARO-的实际例子："><a href="#可以应用-MARO-的实际例子：" class="headerlink" title="可以应用 MARO 的实际例子："></a>可以应用 MARO 的实际例子：</h4><ul><li><h5 id="CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）"><a href="#CIM-”Container-Inventory-Management”-中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）" class="headerlink" title="CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）"></a>CIM,”Container Inventory Management”,中文是“集装箱库存管理”。全球贸易里面会有很多港口，但是每个港口需要的空集装箱都不一样，有的港口可能空集装箱是剩余的（比如进口向港口），有的港口可能空集装箱不够（比如出口向港口）</h5><ul><li>而使用 MARO 可以解决这个问题，使得每个港口尽可能分配到恰当的空集装箱资源，不多不少。</li><li>在这个场景里面，空集装箱是中心资源，导致资源数量改变的事件有两个：<ul><li>第一个是 Order ，即订单，订单会导致货物从 source port 运到 destination port ， 这个时候 source port 出货，empty container 会减少，destination port 进货，empty container 会增加</li><li>第二个是 repositioning，使用 MARO 重定位空集装箱，平衡全球空集装箱分布。</li></ul></li></ul></li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p><img src="/pictures/%E5%88%9D%E8%AF%86MARO/cim.container_flow.svg"></p><ul><li><h5 id="对上面这个流程图的解释"><a href="#对上面这个流程图的解释" class="headerlink" title="对上面这个流程图的解释"></a>对上面这个流程图的解释</h5><ul><li>托运人（shipper）生成订单（send order）后，相应源端口（source port）的空容器将被释放（release empty）给托运人（shipper）</li><li>托运人（shipper）将用货物装满集装箱，将其变成满载货物，然后在将满载货物的集装箱运回到（return laden）源港口（source port）</li><li>船（vessel）到港口（source port）之后被装载满载货物的集装箱（load laden）</li><li>船航行到进口港（source port），卸货（discharge laden）</li><li>满载货物将被释放（release laden）给收货人（consignee），收货人将取出其中的货物，集装箱再次变空返回港口（return empty）</li></ul></li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ul><li><h5 id="这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty"><a href="#这个时候我们发现，整个过程我们还有五个部分没有提到，分别是-agent-，operate-empty-，load-x2F-discharge-empty" class="headerlink" title="这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty"></a>这个时候我们发现，整个过程我们还有五个部分没有提到，分别是 agent ，operate empty ，load&#x2F;discharge empty</h5><ul><li>为了为了重新平衡集装箱分布，每个港口（port）的代理商（agent）将决定每次船舶（vessel）到达港口时如何重新分配（repostioning）空集装箱<ul><li>船只（vessel）到达港口时，是往船上装载空集装箱（load empty），还是消费船上原有的空集装箱（discharge empty）</li><li>分配 load&#x2F;discharge empty 的数量</li></ul></li></ul></li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ul><li><h5 id="MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况"><a href="#MARO-就是帮助-agent-调整-load-x2F-discharge-empty-的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况" class="headerlink" title="MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况"></a>MARO 就是帮助 agent 调整 load&#x2F;discharge empty 的数量，决策目标不仅要考虑自身未来的供需情况，还要考虑上下游港口的需求和情况</h5><ul><li>出口导向型港口（例如中国的港口）显示出明显的高需求特征，通常需要额外的空集装箱供应，这些港口将倾向于从船上卸载空集装箱</li><li>虽然以进口为导向的港口具有显著的盈余特征，但通常从收货人那里收到许多空集装箱，因此，如果存在空闲容量，面向进口的港口将倾向于将多余的空集装箱装入船舶</li></ul></li></ul><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><ul><li><h4 id="简单拓扑结构"><a href="#简单拓扑结构" class="headerlink" title="简单拓扑结构"></a>简单拓扑结构</h4><img src="/pictures/%E5%88%9D%E8%AF%86MARO/cim.toys.svg"></li><li><h5 id="这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单"><a href="#这里要特别注意上面这个图里面，这里的-S-和-D-并不是-source-和-destination，而是-empty-containers-的-supplier-和-demander，这里-order-也并不是货物订单，而是-empty-containers-的订单" class="headerlink" title="这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单"></a>这里要特别注意上面这个图里面，这里的 S 和 D 并不是 source 和 destination，而是 empty containers 的 supplier 和 demander，这里 order 也并不是货物订单，而是 empty containers 的订单</h5></li><li><h5 id="上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S"><a href="#上图实线表示货物流向，虚线表示订单流向，S-与-D-由订单（Order）决定，订单发起方为-D，订单收到方为-S" class="headerlink" title="上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S"></a>上图实线表示货物流向，虚线表示订单流向，S 与 D 由订单（Order）决定，订单发起方为 D，订单收到方为 S</h5><ul><li><strong>拓扑（1）</strong> 有四个 port ，D1 和 D2 是简单的需求者（需要额外 empty container 的端口），而 S2 是简单的供应商（具有剩余空容器的端口），尽管 S1 是一个简单的目标端口，但它位于两个服务路由的交点，这使其成为此拓扑中的特殊端口，为了实现全局最优，S1 必须学会区分服务路由并执行特定于服务路由的重新定位操作</li><li><strong>拓扑（2）</strong> 中有五个端口，根据订单，D1 和 D2 是简单的需求者，而 S1 和 S2 是简单的供应商，作为服务航线交汇处的港口，T1港口虽然可以达到自平衡状态，但仍对全局最优起着重要作用，T1 的最佳重新定位策略是将多余的空容器从左侧服务路由转移到右侧服务路由，此外，D1 和 D2 应该学会只卸载它们需要的 empty 数量，并将多余的 empty 留给其他端口</li><li><strong>拓扑（3）</strong> 中有六个端口，简单的需求者 D1 和 D2 ，简单的供应商 S1 和 S2 ，以及自平衡端口 T1 和 T2 ，比拓扑（2）更困难的是，应该采取更多的转移来将多余的空集装箱从最左边的服务路线重新定位到最右边的航线，这意味着需要一个涉及更多港口的多步骤解决方案</li></ul></li></ul><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><p><img src="/pictures/%E5%88%9D%E8%AF%86MARO/cim.global_trade.svg"></p><ul><li>这是基于真实世界数据设计的拓扑,大多数港口不再具有简单的供需功能。港口之间的合作要复杂得多，很难手动找到有效的重新定位策略</li></ul><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><ul><li><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4></li><li><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymaro</span><br></pre></td></tr></table></figure></li><li><h5 id="MARO-算法有两个关键步骤"><a href="#MARO-算法有两个关键步骤" class="headerlink" title="MARO 算法有两个关键步骤"></a>MARO 算法有两个关键步骤</h5></li><li><h6 id="算法决策事件-DecisionEventDecisionEvent"><a href="#算法决策事件-DecisionEventDecisionEvent" class="headerlink" title="算法决策事件 DecisionEventDecisionEvent"></a>算法决策事件 DecisionEventDecisionEvent</h6><ul><li>tick (int)：相应的刻度</li><li>port_idx（int）：需要响应环境的端口&#x2F;代理的 ID</li><li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li><li>action_scope（操作范围）：操作范围有两个属性，load表示可以从船舶港口装载的最大数量，discharge表示从船舶到港口可以卸货的最大数量</li><li>early_discharge（int）：当船上的可用容量不足以装载满载物时，船上的一些空容器将被提前卸货以释放空间，由于满载而提前卸货的空容器数量记录在该字段中</li></ul></li><li><h6 id="行动-Action"><a href="#行动-Action" class="headerlink" title="行动 Action"></a>行动 Action</h6><ul><li>none，这意味着什么都不做</li><li>a valid instance，有效实例：</li><li>vessel_idx（int）：港口&#x2F;代理人的船舶&#x2F;操作对象的 ID</li><li>port_idx（int）：执行此操作的端口&#x2F;代理的 ID</li><li>action_type（操作类型）：在此操作中是装载还是卸载空容器</li><li>数量（int）：要装载&#x2F;卸载的空容器的（非负）数量</li></ul></li></ul><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><p><img src="/pictures/%E5%88%9D%E8%AF%86MARO/maro_overview.svg"></p><ul><li><h4 id="上图是-MARO-框架图"><a href="#上图是-MARO-框架图" class="headerlink" title="上图是 MARO 框架图"></a>上图是 MARO 框架图</h4><ul><li>Simulation toolkit：它提供了一些预定义的场景，以及用于构建新场景的可重用轮子</li><li>RL toolkit：它为 RL 提供了全栈抽象，例如代理管理器、代理、RL 算法、学习器、参与者和各种塑造者</li><li>Distributed toolkit：提供分布式通信组件、消息自动处理、集群配置、作业编排等用户定义功能的接口</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MARO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 文档分类 图片存储</title>
      <link href="/2022/10/23/Hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/"/>
      <url>/2022/10/23/Hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>建立分类</strong></p><ol><li>输入 hexo new page ‘categories’</li></ol><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ol start="2"><li>在顶层工程目录的 source 目录中會看到 categories 文件夹</li></ol><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ol start="3"><li><p>修改 categories 中的 index.md 开头，增加一些东西使得变成如下内容</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-10-23 13:30:15</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>若要把 “_post” 內的其中一份文档添加到 “Hexo-Usage” categories 里面，在这个文档头部插入 categories: Hexo-Usage</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 基本美化</span><br><span class="line">date: 2022-10-23 16:08:56</span><br><span class="line">categories: Hexo-Usage</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>重新生成静态网页，可以看到导航栏多了一个分类选项</p></li></ol><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.31.09.png"></p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><p><strong>建立标签</strong></p><p>和建立分类一样，只不过内容改变一点</p><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><ol><li>输入 hexo new page ‘tags’</li></ol><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><ol start="2"><li>在顶层工程目录的 source 目录中會看到 tags 文件夹</li></ol><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><ol start="3"><li>修改 tags 中的 index.md 开头，增加一些东西使得变成如下内容 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-10-23 13:35:49</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>若要把 “_post” 內的其中一份文档添加到 “Hexo” tag 里面，在这个文档头部插入 tags: Hexo <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 文档分类 图片存储</span><br><span class="line">date: 2022-10-23 19:16:39</span><br><span class="line">categories: Hexo-Usage</span><br><span class="line">tags: Hexo</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>插入多个 tags ，记得 tab 缩进 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 文档分类 图片存储</span><br><span class="line">date: 2022-10-23 19:16:39</span><br><span class="line">categories: Hexo-Usage</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">- Github</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>重新生成静态网页，可以看到导航栏多了一个标签选项</li></ol><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.50.12.png"></p><p><strong>文档里面插入图片</strong></p><p>使用Hexo创建文件搭建博客时，会遇到图片插图，以及插入的图片无法显示的问题</p><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><ol><li>在 Hexo 的目录（也就是顶层工程目录） source 中创建一个图片文件夹，例如 pictures</li></ol><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.19.55.54.png"></p><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><ol start="2"><li><p>把要插入的图片文件放到该目录下面，在文档中正常使用 markdown 的语法插入图片即可，例如</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![img](ictures/xxx.png)</span><br></pre></td></tr></table></figure></li><li><p>当然，你还可以在 pictures 再创建目录以区分不同文章的图片</p></li></ol><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/2022.10.23.20.00.11.png"></p><ol start="4"><li><p>这个时候在文章里面引用的方式就是</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![img](ictures/hexo-文档分类-图片存储/xxx.png)</span><br></pre></td></tr></table></figure></li></ol><p>记住在 “pictures” 前面有一个 “&#x2F;“ ，表示根目录的意思，因为对于 hexo 来说它的资源文件的根目录就是 source ，当然也可以修改 “_config.yml” 改变这个配置，下图是 hexo 框架文件夹描述</p><p><img src="/pictures/hexo-%E6%96%87%E6%A1%A3%E5%88%86%E7%B1%BB-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/20191220164252492.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 基本美化</title>
      <link href="/2022/10/23/Hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/10/23/Hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>首先是顶部背景</strong>，下面是原背景</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.14.49.png"></p><p>在 blogs 文件夹（顶层工程文件目录）里面搜索 banner.jpg</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.17.17.png"></p><p>把这两个 banner.jpg 替换成自己图片，替换之后名字还得是 banner.jpg</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.19.21.png"></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.22.22.png"></p><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p><strong>定义自己的信息</strong>，定义在顶层工程目录的 “_config.yml” 里面</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.25.30.png"></p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.27.38.png"></p><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><p><strong>美化代码块</strong>，原本的代码块没有 margin-left 和 margin-right ，不好看<br><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.29.42.png"></p><p>在顶层工程文件目录里面，搜索 highlight.styl</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.32.39.png"></p><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.33.18.png"></p><p>这两个 css 文件是一样的，要修改的地方也一样</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.35.28.png"></p><p>注释掉原来的 margin ，换成 “margin:1px” 就可以</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.36.27.png"></p><p>效果很 nice</p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.38.27.png"></p><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><p><strong>最终效果</strong></p><p><img src="/pictures/hexo-%E5%9F%BA%E6%9C%AC%E7%BE%8E%E5%8C%96/2022.10.23.16.41.32.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages + Hexo</title>
      <link href="/2022/10/23/Github-Pages+Hexo/"/>
      <url>/2022/10/23/Github-Pages+Hexo/</url>
      
        <content type="html"><![CDATA[<p><strong>Github Pages 可以为个人博客提供支持，Hexo 可以让 Github Pages 更加美观和提供本地预览，而不需要上传到 Github Pages 之后再看到效果</strong></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p><strong>安装准备</strong>（本地）：</p><ul><li>git</li><li>npm</li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><p><strong>配置 Git</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;github 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>Github 已经不支持密码登录，需要复杂一点的步骤去验证</p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><ol><li>到个人中心-设置-setting</li><li><img src="/pictures/github-pages-hexo/75e96721a3344ed5b397ec8adfeedb98.png"></li><li><img src="/pictures/github-pages-hexo/4eb29e6a9b2c4bf6b2b5db9299b1a393.png"><br><img src="/pictures/github-pages-hexo/3def5390d66a40eab1305013f28383d1.png"></li><li>选 classic 的 token 而不是 beta 的，因为 classic 可以永久</li><li><img src="/pictures/github-pages-hexo/de366346ddf443fba27a2cda84d9593f.png"><br><img src="/pictures/github-pages-hexo/852ef46dcc3d4018bc79fdac2ed8c917.png"></li><li>点击 generate token按钮</li></ol><h6 id="-3"><a href="#-3" class="headerlink" title=""></a></h6><p>然后 生成了token 一定要复制，不然刷新浏览器就没了</p><h6 id="-4"><a href="#-4" class="headerlink" title=""></a></h6><p>拿到token以后再去git push&#x2F;clone ，password就是输入刚才复制的token</p><h6 id="-5"><a href="#-5" class="headerlink" title=""></a></h6><p><strong>Hexo 安装（本地全局）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建一个文件夹（我的是blogs）用于存放你的博客，然后进入该文件夹，并用如下命令进行初始化并安装必备组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">hexo init .</span><br></pre></td></tr></table></figure><p>初始化后，目录结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"> ├── _config.yml # 网站配置信息</span><br><span class="line"> ├── package.json # 应用程序信息</span><br><span class="line"> ├── scaffolds# 模板文件夹</span><br><span class="line"> ├── source # 存放用户资源</span><br><span class="line"> |   ├── _drafts</span><br><span class="line"> |   └── _posts# 存放个人博客</span><br><span class="line"> └── themes # 主题文件夹</span><br></pre></td></tr></table></figure><p>然后输入如下命令，然后在浏览器中打开 <a href="http://localhost:4000/">http://localhost:4000</a> ，就可以预览原始网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#x27;博客名&#x27; # 新建博客</span><br><span class="line">hexo g # 生成静态网页</span><br><span class="line">hexo s # 打开本地服务器</span><br></pre></td></tr></table></figure><p>然后就可以看到如下的界面<br><img src="/pictures/github-pages-hexo/2022.10.23.14.48.30.png"></p><h6 id="-6"><a href="#-6" class="headerlink" title=""></a></h6><p><strong>发布到 Github Pages 上面</strong></p><h6 id="-7"><a href="#-7" class="headerlink" title=""></a></h6><p>注册 Github 帐号，有帐号了不用注册</p><h6 id="-8"><a href="#-8" class="headerlink" title=""></a></h6><p>新建一个空仓库，暂时不要创建 README.md ，而且得确保你的仓库是 public 同时，仓库名一定要是 <strong>用户名.github.io</strong></p><h6 id="-9"><a href="#-9" class="headerlink" title=""></a></h6><p>在上文提到的 blogs 文件夹下面安装 hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h6 id="-10"><a href="#-10" class="headerlink" title=""></a></h6><p>在刚才的博客根目录中的站点配置文件 “_config.yml” ，设置为你的个人仓库名，branch 与你的 git 主分支对应<br><img src="/pictures/github-pages-hexo/v2-376b7a40b8e6a310cc31bd3522ea9a7a_r.jpg"><br><img src="/pictures/github-pages-hexo/v2-d15b384267cf4fa326c2e2febb1b2b62_r.png"></p><h6 id="-11"><a href="#-11" class="headerlink" title=""></a></h6><p>开始推送内容到 Github 上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清理缓存</span><br><span class="line">hexo g     # 将 md 生成 html</span><br><span class="line">git add -A # 添加到 git 缓冲区</span><br><span class="line">git commit -m &quot;first time&quot;# 提交所有更改</span><br><span class="line">hexo d     # 推送到远程</span><br></pre></td></tr></table></figure><p>稍等片刻，就可以访问 https:&#x2F;&#x2F;用户名.github.io 了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The First Blog</title>
      <link href="/2022/10/22/The-First-Blog/"/>
      <url>/2022/10/22/The-First-Blog/</url>
      
        <content type="html"><![CDATA[<p>“开始记录进步与欢乐！”</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
